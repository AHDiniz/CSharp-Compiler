
// Generated from src/Parser/CSharpParser.g4 by ANTLR 4.9.2


#include "CSharpParserListener.h"

#include "CSharpParser.h"


using namespace antlrcpp;
using namespace antlr4;

CSharpParser::CSharpParser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

CSharpParser::~CSharpParser() {
  delete _interpreter;
}

std::string CSharpParser::getGrammarFileName() const {
  return "CSharpParser.g4";
}

const std::vector<std::string>& CSharpParser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& CSharpParser::getVocabulary() const {
  return _vocabulary;
}


//----------------- Compilation_unitContext ------------------------------------------------------------------

CSharpParser::Compilation_unitContext::Compilation_unitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Compilation_unitContext::EOF() {
  return getToken(CSharpParser::EOF, 0);
}

tree::TerminalNode* CSharpParser::Compilation_unitContext::BYTE_ORDER_MARK() {
  return getToken(CSharpParser::BYTE_ORDER_MARK, 0);
}

CSharpParser::Extern_alias_directivesContext* CSharpParser::Compilation_unitContext::extern_alias_directives() {
  return getRuleContext<CSharpParser::Extern_alias_directivesContext>(0);
}

CSharpParser::Using_directivesContext* CSharpParser::Compilation_unitContext::using_directives() {
  return getRuleContext<CSharpParser::Using_directivesContext>(0);
}

std::vector<CSharpParser::Global_attribute_sectionContext *> CSharpParser::Compilation_unitContext::global_attribute_section() {
  return getRuleContexts<CSharpParser::Global_attribute_sectionContext>();
}

CSharpParser::Global_attribute_sectionContext* CSharpParser::Compilation_unitContext::global_attribute_section(size_t i) {
  return getRuleContext<CSharpParser::Global_attribute_sectionContext>(i);
}

CSharpParser::Namespace_member_declarationsContext* CSharpParser::Compilation_unitContext::namespace_member_declarations() {
  return getRuleContext<CSharpParser::Namespace_member_declarationsContext>(0);
}


size_t CSharpParser::Compilation_unitContext::getRuleIndex() const {
  return CSharpParser::RuleCompilation_unit;
}

void CSharpParser::Compilation_unitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilation_unit(this);
}

void CSharpParser::Compilation_unitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilation_unit(this);
}

CSharpParser::Compilation_unitContext* CSharpParser::compilation_unit() {
  Compilation_unitContext *_localctx = _tracker.createInstance<Compilation_unitContext>(_ctx, getState());
  enterRule(_localctx, 0, CSharpParser::RuleCompilation_unit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::BYTE_ORDER_MARK) {
      setState(436);
      match(CSharpParser::BYTE_ORDER_MARK);
    }
    setState(440);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      setState(439);
      extern_alias_directives();
      break;
    }

    default:
      break;
    }
    setState(443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::USING) {
      setState(442);
      using_directives();
    }
    setState(448);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(445);
        global_attribute_section(); 
      }
      setState(450);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    }
    setState(452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ABSTRACT)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::CLASS)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::ENUM)
      | (1ULL << CSharpParser::EXTERN)
      | (1ULL << CSharpParser::INTERFACE)
      | (1ULL << CSharpParser::INTERNAL))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (CSharpParser::NAMESPACE - 65))
      | (1ULL << (CSharpParser::NEW - 65))
      | (1ULL << (CSharpParser::OVERRIDE - 65))
      | (1ULL << (CSharpParser::PARTIAL - 65))
      | (1ULL << (CSharpParser::PRIVATE - 65))
      | (1ULL << (CSharpParser::PROTECTED - 65))
      | (1ULL << (CSharpParser::PUBLIC - 65))
      | (1ULL << (CSharpParser::READONLY - 65))
      | (1ULL << (CSharpParser::REF - 65))
      | (1ULL << (CSharpParser::SEALED - 65))
      | (1ULL << (CSharpParser::STATIC - 65))
      | (1ULL << (CSharpParser::STRUCT - 65))
      | (1ULL << (CSharpParser::UNSAFE - 65))
      | (1ULL << (CSharpParser::VIRTUAL - 65))
      | (1ULL << (CSharpParser::VOLATILE - 65))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 65)))) != 0)) {
      setState(451);
      namespace_member_declarations();
    }
    setState(454);
    match(CSharpParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_or_type_nameContext ------------------------------------------------------------------

CSharpParser::Namespace_or_type_nameContext::Namespace_or_type_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Namespace_or_type_nameContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Namespace_or_type_nameContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

CSharpParser::Qualified_alias_memberContext* CSharpParser::Namespace_or_type_nameContext::qualified_alias_member() {
  return getRuleContext<CSharpParser::Qualified_alias_memberContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Namespace_or_type_nameContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::Namespace_or_type_nameContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}

std::vector<CSharpParser::Type_argument_listContext *> CSharpParser::Namespace_or_type_nameContext::type_argument_list() {
  return getRuleContexts<CSharpParser::Type_argument_listContext>();
}

CSharpParser::Type_argument_listContext* CSharpParser::Namespace_or_type_nameContext::type_argument_list(size_t i) {
  return getRuleContext<CSharpParser::Type_argument_listContext>(i);
}


size_t CSharpParser::Namespace_or_type_nameContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_or_type_name;
}

void CSharpParser::Namespace_or_type_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_or_type_name(this);
}

void CSharpParser::Namespace_or_type_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_or_type_name(this);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::namespace_or_type_name() {
  Namespace_or_type_nameContext *_localctx = _tracker.createInstance<Namespace_or_type_nameContext>(_ctx, getState());
  enterRule(_localctx, 2, CSharpParser::RuleNamespace_or_type_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(461);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      setState(456);
      identifier();
      setState(458);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
      case 1: {
        setState(457);
        type_argument_list();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      setState(460);
      qualified_alias_member();
      break;
    }

    default:
      break;
    }
    setState(470);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(463);
        match(CSharpParser::DOT);
        setState(464);
        identifier();
        setState(466);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
        case 1: {
          setState(465);
          type_argument_list();
          break;
        }

        default:
          break;
        } 
      }
      setState(472);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_Context ------------------------------------------------------------------

CSharpParser::Type_Context::Type_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Base_typeContext* CSharpParser::Type_Context::base_type() {
  return getRuleContext<CSharpParser::Base_typeContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_Context::INTERR() {
  return getTokens(CSharpParser::INTERR);
}

tree::TerminalNode* CSharpParser::Type_Context::INTERR(size_t i) {
  return getToken(CSharpParser::INTERR, i);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::Type_Context::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::Type_Context::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_Context::STAR() {
  return getTokens(CSharpParser::STAR);
}

tree::TerminalNode* CSharpParser::Type_Context::STAR(size_t i) {
  return getToken(CSharpParser::STAR, i);
}


size_t CSharpParser::Type_Context::getRuleIndex() const {
  return CSharpParser::RuleType_;
}

void CSharpParser::Type_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_(this);
}

void CSharpParser::Type_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_(this);
}

CSharpParser::Type_Context* CSharpParser::type_() {
  Type_Context *_localctx = _tracker.createInstance<Type_Context>(_ctx, getState());
  enterRule(_localctx, 4, CSharpParser::RuleType_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(473);
    base_type();
    setState(479);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(477);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::INTERR: {
            setState(474);
            match(CSharpParser::INTERR);
            break;
          }

          case CSharpParser::OPEN_BRACKET: {
            setState(475);
            rank_specifier();
            break;
          }

          case CSharpParser::STAR: {
            setState(476);
            match(CSharpParser::STAR);
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(481);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_typeContext ------------------------------------------------------------------

CSharpParser::Base_typeContext::Base_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Simple_typeContext* CSharpParser::Base_typeContext::simple_type() {
  return getRuleContext<CSharpParser::Simple_typeContext>(0);
}

CSharpParser::Class_typeContext* CSharpParser::Base_typeContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Base_typeContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

tree::TerminalNode* CSharpParser::Base_typeContext::STAR() {
  return getToken(CSharpParser::STAR, 0);
}

CSharpParser::Tuple_typeContext* CSharpParser::Base_typeContext::tuple_type() {
  return getRuleContext<CSharpParser::Tuple_typeContext>(0);
}


size_t CSharpParser::Base_typeContext::getRuleIndex() const {
  return CSharpParser::RuleBase_type;
}

void CSharpParser::Base_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBase_type(this);
}

void CSharpParser::Base_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBase_type(this);
}

CSharpParser::Base_typeContext* CSharpParser::base_type() {
  Base_typeContext *_localctx = _tracker.createInstance<Base_typeContext>(_ctx, getState());
  enterRule(_localctx, 6, CSharpParser::RuleBase_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(487);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::BOOL:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::DECIMAL:
      case CSharpParser::DOUBLE:
      case CSharpParser::FLOAT:
      case CSharpParser::INT:
      case CSharpParser::LONG:
      case CSharpParser::SBYTE:
      case CSharpParser::SHORT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::USHORT: {
        enterOuterAlt(_localctx, 1);
        setState(482);
        simple_type();
        break;
      }

      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BY:
      case CSharpParser::DESCENDING:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::STRING:
      case CSharpParser::UNMANAGED:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(483);
        class_type();
        break;
      }

      case CSharpParser::VOID: {
        enterOuterAlt(_localctx, 3);
        setState(484);
        match(CSharpParser::VOID);
        setState(485);
        match(CSharpParser::STAR);
        break;
      }

      case CSharpParser::OPEN_PARENS: {
        enterOuterAlt(_localctx, 4);
        setState(486);
        tuple_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_typeContext ------------------------------------------------------------------

CSharpParser::Tuple_typeContext::Tuple_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Tuple_typeContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<CSharpParser::Tuple_elementContext *> CSharpParser::Tuple_typeContext::tuple_element() {
  return getRuleContexts<CSharpParser::Tuple_elementContext>();
}

CSharpParser::Tuple_elementContext* CSharpParser::Tuple_typeContext::tuple_element(size_t i) {
  return getRuleContext<CSharpParser::Tuple_elementContext>(i);
}

tree::TerminalNode* CSharpParser::Tuple_typeContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Tuple_typeContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Tuple_typeContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Tuple_typeContext::getRuleIndex() const {
  return CSharpParser::RuleTuple_type;
}

void CSharpParser::Tuple_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_type(this);
}

void CSharpParser::Tuple_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_type(this);
}

CSharpParser::Tuple_typeContext* CSharpParser::tuple_type() {
  Tuple_typeContext *_localctx = _tracker.createInstance<Tuple_typeContext>(_ctx, getState());
  enterRule(_localctx, 8, CSharpParser::RuleTuple_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(489);
    match(CSharpParser::OPEN_PARENS);
    setState(490);
    tuple_element();
    setState(493); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(491);
      match(CSharpParser::COMMA);
      setState(492);
      tuple_element();
      setState(495); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CSharpParser::COMMA);
    setState(497);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_elementContext ------------------------------------------------------------------

CSharpParser::Tuple_elementContext::Tuple_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Tuple_elementContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Tuple_elementContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::Tuple_elementContext::getRuleIndex() const {
  return CSharpParser::RuleTuple_element;
}

void CSharpParser::Tuple_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_element(this);
}

void CSharpParser::Tuple_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_element(this);
}

CSharpParser::Tuple_elementContext* CSharpParser::tuple_element() {
  Tuple_elementContext *_localctx = _tracker.createInstance<Tuple_elementContext>(_ctx, getState());
  enterRule(_localctx, 10, CSharpParser::RuleTuple_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(499);
    type_();
    setState(501);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64)))) != 0)) {
      setState(500);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_typeContext ------------------------------------------------------------------

CSharpParser::Simple_typeContext::Simple_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Numeric_typeContext* CSharpParser::Simple_typeContext::numeric_type() {
  return getRuleContext<CSharpParser::Numeric_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Simple_typeContext::BOOL() {
  return getToken(CSharpParser::BOOL, 0);
}


size_t CSharpParser::Simple_typeContext::getRuleIndex() const {
  return CSharpParser::RuleSimple_type;
}

void CSharpParser::Simple_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_type(this);
}

void CSharpParser::Simple_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_type(this);
}

CSharpParser::Simple_typeContext* CSharpParser::simple_type() {
  Simple_typeContext *_localctx = _tracker.createInstance<Simple_typeContext>(_ctx, getState());
  enterRule(_localctx, 12, CSharpParser::RuleSimple_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(505);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::DECIMAL:
      case CSharpParser::DOUBLE:
      case CSharpParser::FLOAT:
      case CSharpParser::INT:
      case CSharpParser::LONG:
      case CSharpParser::SBYTE:
      case CSharpParser::SHORT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::USHORT: {
        enterOuterAlt(_localctx, 1);
        setState(503);
        numeric_type();
        break;
      }

      case CSharpParser::BOOL: {
        enterOuterAlt(_localctx, 2);
        setState(504);
        match(CSharpParser::BOOL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Numeric_typeContext ------------------------------------------------------------------

CSharpParser::Numeric_typeContext::Numeric_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Integral_typeContext* CSharpParser::Numeric_typeContext::integral_type() {
  return getRuleContext<CSharpParser::Integral_typeContext>(0);
}

CSharpParser::Floating_point_typeContext* CSharpParser::Numeric_typeContext::floating_point_type() {
  return getRuleContext<CSharpParser::Floating_point_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Numeric_typeContext::DECIMAL() {
  return getToken(CSharpParser::DECIMAL, 0);
}


size_t CSharpParser::Numeric_typeContext::getRuleIndex() const {
  return CSharpParser::RuleNumeric_type;
}

void CSharpParser::Numeric_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumeric_type(this);
}

void CSharpParser::Numeric_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumeric_type(this);
}

CSharpParser::Numeric_typeContext* CSharpParser::numeric_type() {
  Numeric_typeContext *_localctx = _tracker.createInstance<Numeric_typeContext>(_ctx, getState());
  enterRule(_localctx, 14, CSharpParser::RuleNumeric_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(510);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::INT:
      case CSharpParser::LONG:
      case CSharpParser::SBYTE:
      case CSharpParser::SHORT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::USHORT: {
        enterOuterAlt(_localctx, 1);
        setState(507);
        integral_type();
        break;
      }

      case CSharpParser::DOUBLE:
      case CSharpParser::FLOAT: {
        enterOuterAlt(_localctx, 2);
        setState(508);
        floating_point_type();
        break;
      }

      case CSharpParser::DECIMAL: {
        enterOuterAlt(_localctx, 3);
        setState(509);
        match(CSharpParser::DECIMAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Integral_typeContext ------------------------------------------------------------------

CSharpParser::Integral_typeContext::Integral_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Integral_typeContext::SBYTE() {
  return getToken(CSharpParser::SBYTE, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::BYTE() {
  return getToken(CSharpParser::BYTE, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::SHORT() {
  return getToken(CSharpParser::SHORT, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::USHORT() {
  return getToken(CSharpParser::USHORT, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::INT() {
  return getToken(CSharpParser::INT, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::UINT() {
  return getToken(CSharpParser::UINT, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::LONG() {
  return getToken(CSharpParser::LONG, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::ULONG() {
  return getToken(CSharpParser::ULONG, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::CHAR() {
  return getToken(CSharpParser::CHAR, 0);
}


size_t CSharpParser::Integral_typeContext::getRuleIndex() const {
  return CSharpParser::RuleIntegral_type;
}

void CSharpParser::Integral_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegral_type(this);
}

void CSharpParser::Integral_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegral_type(this);
}

CSharpParser::Integral_typeContext* CSharpParser::integral_type() {
  Integral_typeContext *_localctx = _tracker.createInstance<Integral_typeContext>(_ctx, getState());
  enterRule(_localctx, 16, CSharpParser::RuleIntegral_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(512);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & ((1ULL << (CSharpParser::SBYTE - 83))
      | (1ULL << (CSharpParser::SHORT - 83))
      | (1ULL << (CSharpParser::UINT - 83))
      | (1ULL << (CSharpParser::ULONG - 83))
      | (1ULL << (CSharpParser::USHORT - 83)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Floating_point_typeContext ------------------------------------------------------------------

CSharpParser::Floating_point_typeContext::Floating_point_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Floating_point_typeContext::FLOAT() {
  return getToken(CSharpParser::FLOAT, 0);
}

tree::TerminalNode* CSharpParser::Floating_point_typeContext::DOUBLE() {
  return getToken(CSharpParser::DOUBLE, 0);
}


size_t CSharpParser::Floating_point_typeContext::getRuleIndex() const {
  return CSharpParser::RuleFloating_point_type;
}

void CSharpParser::Floating_point_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloating_point_type(this);
}

void CSharpParser::Floating_point_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloating_point_type(this);
}

CSharpParser::Floating_point_typeContext* CSharpParser::floating_point_type() {
  Floating_point_typeContext *_localctx = _tracker.createInstance<Floating_point_typeContext>(_ctx, getState());
  enterRule(_localctx, 18, CSharpParser::RuleFloating_point_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::DOUBLE

    || _la == CSharpParser::FLOAT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_typeContext ------------------------------------------------------------------

CSharpParser::Class_typeContext::Class_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Class_typeContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Class_typeContext::OBJECT() {
  return getToken(CSharpParser::OBJECT, 0);
}

tree::TerminalNode* CSharpParser::Class_typeContext::DYNAMIC() {
  return getToken(CSharpParser::DYNAMIC, 0);
}

tree::TerminalNode* CSharpParser::Class_typeContext::STRING() {
  return getToken(CSharpParser::STRING, 0);
}


size_t CSharpParser::Class_typeContext::getRuleIndex() const {
  return CSharpParser::RuleClass_type;
}

void CSharpParser::Class_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_type(this);
}

void CSharpParser::Class_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_type(this);
}

CSharpParser::Class_typeContext* CSharpParser::class_type() {
  Class_typeContext *_localctx = _tracker.createInstance<Class_typeContext>(_ctx, getState());
  enterRule(_localctx, 20, CSharpParser::RuleClass_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(520);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(516);
      namespace_or_type_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(517);
      match(CSharpParser::OBJECT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(518);
      match(CSharpParser::DYNAMIC);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(519);
      match(CSharpParser::STRING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_argument_listContext ------------------------------------------------------------------

CSharpParser::Type_argument_listContext::Type_argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Type_argument_listContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

std::vector<CSharpParser::Type_Context *> CSharpParser::Type_argument_listContext::type_() {
  return getRuleContexts<CSharpParser::Type_Context>();
}

CSharpParser::Type_Context* CSharpParser::Type_argument_listContext::type_(size_t i) {
  return getRuleContext<CSharpParser::Type_Context>(i);
}

tree::TerminalNode* CSharpParser::Type_argument_listContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_argument_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Type_argument_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Type_argument_listContext::getRuleIndex() const {
  return CSharpParser::RuleType_argument_list;
}

void CSharpParser::Type_argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_argument_list(this);
}

void CSharpParser::Type_argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_argument_list(this);
}

CSharpParser::Type_argument_listContext* CSharpParser::type_argument_list() {
  Type_argument_listContext *_localctx = _tracker.createInstance<Type_argument_listContext>(_ctx, getState());
  enterRule(_localctx, 22, CSharpParser::RuleType_argument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(522);
    match(CSharpParser::LT);
    setState(523);
    type_();
    setState(528);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(524);
      match(CSharpParser::COMMA);
      setState(525);
      type_();
      setState(530);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(531);
    match(CSharpParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_listContext ------------------------------------------------------------------

CSharpParser::Argument_listContext::Argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::ArgumentContext *> CSharpParser::Argument_listContext::argument() {
  return getRuleContexts<CSharpParser::ArgumentContext>();
}

CSharpParser::ArgumentContext* CSharpParser::Argument_listContext::argument(size_t i) {
  return getRuleContext<CSharpParser::ArgumentContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Argument_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Argument_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Argument_listContext::getRuleIndex() const {
  return CSharpParser::RuleArgument_list;
}

void CSharpParser::Argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_list(this);
}

void CSharpParser::Argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_list(this);
}

CSharpParser::Argument_listContext* CSharpParser::argument_list() {
  Argument_listContext *_localctx = _tracker.createInstance<Argument_listContext>(_ctx, getState());
  enterRule(_localctx, 24, CSharpParser::RuleArgument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(533);
    argument();
    setState(538);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(534);
      match(CSharpParser::COMMA);
      setState(535);
      argument();
      setState(540);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

CSharpParser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::ArgumentContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::ArgumentContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::VAR() {
  return getToken(CSharpParser::VAR, 0);
}

CSharpParser::Type_Context* CSharpParser::ArgumentContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::IN() {
  return getToken(CSharpParser::IN, 0);
}


size_t CSharpParser::ArgumentContext::getRuleIndex() const {
  return CSharpParser::RuleArgument;
}

void CSharpParser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void CSharpParser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

CSharpParser::ArgumentContext* CSharpParser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 26, CSharpParser::RuleArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(544);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      setState(541);
      identifier();
      setState(542);
      match(CSharpParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(547);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      setState(546);
      dynamic_cast<ArgumentContext *>(_localctx)->refout = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 54) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 54)) & ((1ULL << (CSharpParser::IN - 54))
        | (1ULL << (CSharpParser::OUT - 54))
        | (1ULL << (CSharpParser::REF - 54)))) != 0))) {
        dynamic_cast<ArgumentContext *>(_localctx)->refout = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(551);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(549);
      match(CSharpParser::VAR);
      break;
    }

    case 2: {
      setState(550);
      type_();
      break;
    }

    default:
      break;
    }
    setState(553);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

CSharpParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::AssignmentContext* CSharpParser::ExpressionContext::assignment() {
  return getRuleContext<CSharpParser::AssignmentContext>(0);
}

CSharpParser::Non_assignment_expressionContext* CSharpParser::ExpressionContext::non_assignment_expression() {
  return getRuleContext<CSharpParser::Non_assignment_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::ExpressionContext::REF() {
  return getToken(CSharpParser::REF, 0);
}


size_t CSharpParser::ExpressionContext::getRuleIndex() const {
  return CSharpParser::RuleExpression;
}

void CSharpParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void CSharpParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

CSharpParser::ExpressionContext* CSharpParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 28, CSharpParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(559);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(555);
      assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(556);
      non_assignment_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(557);
      match(CSharpParser::REF);
      setState(558);
      non_assignment_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_assignment_expressionContext ------------------------------------------------------------------

CSharpParser::Non_assignment_expressionContext::Non_assignment_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Lambda_expressionContext* CSharpParser::Non_assignment_expressionContext::lambda_expression() {
  return getRuleContext<CSharpParser::Lambda_expressionContext>(0);
}

CSharpParser::Query_expressionContext* CSharpParser::Non_assignment_expressionContext::query_expression() {
  return getRuleContext<CSharpParser::Query_expressionContext>(0);
}

CSharpParser::Conditional_expressionContext* CSharpParser::Non_assignment_expressionContext::conditional_expression() {
  return getRuleContext<CSharpParser::Conditional_expressionContext>(0);
}


size_t CSharpParser::Non_assignment_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleNon_assignment_expression;
}

void CSharpParser::Non_assignment_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_assignment_expression(this);
}

void CSharpParser::Non_assignment_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_assignment_expression(this);
}

CSharpParser::Non_assignment_expressionContext* CSharpParser::non_assignment_expression() {
  Non_assignment_expressionContext *_localctx = _tracker.createInstance<Non_assignment_expressionContext>(_ctx, getState());
  enterRule(_localctx, 30, CSharpParser::RuleNon_assignment_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(564);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(561);
      lambda_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(562);
      query_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(563);
      conditional_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

CSharpParser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Unary_expressionContext* CSharpParser::AssignmentContext::unary_expression() {
  return getRuleContext<CSharpParser::Unary_expressionContext>(0);
}

CSharpParser::Assignment_operatorContext* CSharpParser::AssignmentContext::assignment_operator() {
  return getRuleContext<CSharpParser::Assignment_operatorContext>(0);
}

CSharpParser::ExpressionContext* CSharpParser::AssignmentContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::AssignmentContext::OP_COALESCING_ASSIGNMENT() {
  return getToken(CSharpParser::OP_COALESCING_ASSIGNMENT, 0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::AssignmentContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}


size_t CSharpParser::AssignmentContext::getRuleIndex() const {
  return CSharpParser::RuleAssignment;
}

void CSharpParser::AssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment(this);
}

void CSharpParser::AssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment(this);
}

CSharpParser::AssignmentContext* CSharpParser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 32, CSharpParser::RuleAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(574);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(566);
      unary_expression();
      setState(567);
      assignment_operator();
      setState(568);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(570);
      unary_expression();
      setState(571);
      match(CSharpParser::OP_COALESCING_ASSIGNMENT);
      setState(572);
      throwable_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_operatorContext ------------------------------------------------------------------

CSharpParser::Assignment_operatorContext::Assignment_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_ADD_ASSIGNMENT() {
  return getToken(CSharpParser::OP_ADD_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_SUB_ASSIGNMENT() {
  return getToken(CSharpParser::OP_SUB_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_MULT_ASSIGNMENT() {
  return getToken(CSharpParser::OP_MULT_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_DIV_ASSIGNMENT() {
  return getToken(CSharpParser::OP_DIV_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_MOD_ASSIGNMENT() {
  return getToken(CSharpParser::OP_MOD_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_AND_ASSIGNMENT() {
  return getToken(CSharpParser::OP_AND_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_OR_ASSIGNMENT() {
  return getToken(CSharpParser::OP_OR_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_XOR_ASSIGNMENT() {
  return getToken(CSharpParser::OP_XOR_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_LEFT_SHIFT_ASSIGNMENT() {
  return getToken(CSharpParser::OP_LEFT_SHIFT_ASSIGNMENT, 0);
}

CSharpParser::Right_shift_assignmentContext* CSharpParser::Assignment_operatorContext::right_shift_assignment() {
  return getRuleContext<CSharpParser::Right_shift_assignmentContext>(0);
}


size_t CSharpParser::Assignment_operatorContext::getRuleIndex() const {
  return CSharpParser::RuleAssignment_operator;
}

void CSharpParser::Assignment_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_operator(this);
}

void CSharpParser::Assignment_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_operator(this);
}

CSharpParser::Assignment_operatorContext* CSharpParser::assignment_operator() {
  Assignment_operatorContext *_localctx = _tracker.createInstance<Assignment_operatorContext>(_ctx, getState());
  enterRule(_localctx, 34, CSharpParser::RuleAssignment_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(587);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ASSIGNMENT: {
        enterOuterAlt(_localctx, 1);
        setState(576);
        match(CSharpParser::ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_ADD_ASSIGNMENT: {
        enterOuterAlt(_localctx, 2);
        setState(577);
        match(CSharpParser::OP_ADD_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_SUB_ASSIGNMENT: {
        enterOuterAlt(_localctx, 3);
        setState(578);
        match(CSharpParser::OP_SUB_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_MULT_ASSIGNMENT: {
        enterOuterAlt(_localctx, 4);
        setState(579);
        match(CSharpParser::OP_MULT_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_DIV_ASSIGNMENT: {
        enterOuterAlt(_localctx, 5);
        setState(580);
        match(CSharpParser::OP_DIV_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_MOD_ASSIGNMENT: {
        enterOuterAlt(_localctx, 6);
        setState(581);
        match(CSharpParser::OP_MOD_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_AND_ASSIGNMENT: {
        enterOuterAlt(_localctx, 7);
        setState(582);
        match(CSharpParser::OP_AND_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_OR_ASSIGNMENT: {
        enterOuterAlt(_localctx, 8);
        setState(583);
        match(CSharpParser::OP_OR_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_XOR_ASSIGNMENT: {
        enterOuterAlt(_localctx, 9);
        setState(584);
        match(CSharpParser::OP_XOR_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_LEFT_SHIFT_ASSIGNMENT: {
        enterOuterAlt(_localctx, 10);
        setState(585);
        match(CSharpParser::OP_LEFT_SHIFT_ASSIGNMENT);
        break;
      }

      case CSharpParser::GT: {
        enterOuterAlt(_localctx, 11);
        setState(586);
        right_shift_assignment();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_expressionContext ------------------------------------------------------------------

CSharpParser::Conditional_expressionContext::Conditional_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Null_coalescing_expressionContext* CSharpParser::Conditional_expressionContext::null_coalescing_expression() {
  return getRuleContext<CSharpParser::Null_coalescing_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Conditional_expressionContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

std::vector<CSharpParser::Throwable_expressionContext *> CSharpParser::Conditional_expressionContext::throwable_expression() {
  return getRuleContexts<CSharpParser::Throwable_expressionContext>();
}

CSharpParser::Throwable_expressionContext* CSharpParser::Conditional_expressionContext::throwable_expression(size_t i) {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(i);
}

tree::TerminalNode* CSharpParser::Conditional_expressionContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}


size_t CSharpParser::Conditional_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleConditional_expression;
}

void CSharpParser::Conditional_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_expression(this);
}

void CSharpParser::Conditional_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_expression(this);
}

CSharpParser::Conditional_expressionContext* CSharpParser::conditional_expression() {
  Conditional_expressionContext *_localctx = _tracker.createInstance<Conditional_expressionContext>(_ctx, getState());
  enterRule(_localctx, 36, CSharpParser::RuleConditional_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(589);
    null_coalescing_expression();
    setState(595);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      setState(590);
      match(CSharpParser::INTERR);
      setState(591);
      throwable_expression();
      setState(592);
      match(CSharpParser::COLON);
      setState(593);
      throwable_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_coalescing_expressionContext ------------------------------------------------------------------

CSharpParser::Null_coalescing_expressionContext::Null_coalescing_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Conditional_or_expressionContext* CSharpParser::Null_coalescing_expressionContext::conditional_or_expression() {
  return getRuleContext<CSharpParser::Conditional_or_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Null_coalescing_expressionContext::OP_COALESCING() {
  return getToken(CSharpParser::OP_COALESCING, 0);
}

CSharpParser::Null_coalescing_expressionContext* CSharpParser::Null_coalescing_expressionContext::null_coalescing_expression() {
  return getRuleContext<CSharpParser::Null_coalescing_expressionContext>(0);
}

CSharpParser::Throw_expressionContext* CSharpParser::Null_coalescing_expressionContext::throw_expression() {
  return getRuleContext<CSharpParser::Throw_expressionContext>(0);
}


size_t CSharpParser::Null_coalescing_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleNull_coalescing_expression;
}

void CSharpParser::Null_coalescing_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_coalescing_expression(this);
}

void CSharpParser::Null_coalescing_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_coalescing_expression(this);
}

CSharpParser::Null_coalescing_expressionContext* CSharpParser::null_coalescing_expression() {
  Null_coalescing_expressionContext *_localctx = _tracker.createInstance<Null_coalescing_expressionContext>(_ctx, getState());
  enterRule(_localctx, 38, CSharpParser::RuleNull_coalescing_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(597);
    conditional_or_expression();
    setState(603);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OP_COALESCING) {
      setState(598);
      match(CSharpParser::OP_COALESCING);
      setState(601);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::ADD:
        case CSharpParser::ALIAS:
        case CSharpParser::ARGLIST:
        case CSharpParser::ASCENDING:
        case CSharpParser::ASYNC:
        case CSharpParser::AWAIT:
        case CSharpParser::BASE:
        case CSharpParser::BOOL:
        case CSharpParser::BY:
        case CSharpParser::BYTE:
        case CSharpParser::CHAR:
        case CSharpParser::CHECKED:
        case CSharpParser::DECIMAL:
        case CSharpParser::DEFAULT:
        case CSharpParser::DELEGATE:
        case CSharpParser::DESCENDING:
        case CSharpParser::DOUBLE:
        case CSharpParser::DYNAMIC:
        case CSharpParser::EQUALS:
        case CSharpParser::FALSE:
        case CSharpParser::FLOAT:
        case CSharpParser::FROM:
        case CSharpParser::GET:
        case CSharpParser::GROUP:
        case CSharpParser::INT:
        case CSharpParser::INTO:
        case CSharpParser::JOIN:
        case CSharpParser::LET:
        case CSharpParser::LONG:
        case CSharpParser::NAMEOF:
        case CSharpParser::NEW:
        case CSharpParser::NULL:
        case CSharpParser::OBJECT:
        case CSharpParser::ON:
        case CSharpParser::ORDERBY:
        case CSharpParser::PARTIAL:
        case CSharpParser::REMOVE:
        case CSharpParser::SBYTE:
        case CSharpParser::SELECT:
        case CSharpParser::SET:
        case CSharpParser::SHORT:
        case CSharpParser::SIZEOF:
        case CSharpParser::STRING:
        case CSharpParser::THIS:
        case CSharpParser::TRUE:
        case CSharpParser::TYPEOF:
        case CSharpParser::UINT:
        case CSharpParser::ULONG:
        case CSharpParser::UNCHECKED:
        case CSharpParser::UNMANAGED:
        case CSharpParser::USHORT:
        case CSharpParser::VAR:
        case CSharpParser::WHEN:
        case CSharpParser::WHERE:
        case CSharpParser::YIELD:
        case CSharpParser::IDENTIFIER:
        case CSharpParser::LITERAL_ACCESS:
        case CSharpParser::INTEGER_LITERAL:
        case CSharpParser::HEX_INTEGER_LITERAL:
        case CSharpParser::BIN_INTEGER_LITERAL:
        case CSharpParser::REAL_LITERAL:
        case CSharpParser::CHARACTER_LITERAL:
        case CSharpParser::REGULAR_STRING:
        case CSharpParser::VERBATIUM_STRING:
        case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser::OPEN_PARENS:
        case CSharpParser::PLUS:
        case CSharpParser::MINUS:
        case CSharpParser::STAR:
        case CSharpParser::AMP:
        case CSharpParser::CARET:
        case CSharpParser::BANG:
        case CSharpParser::TILDE:
        case CSharpParser::OP_INC:
        case CSharpParser::OP_DEC:
        case CSharpParser::OP_RANGE: {
          setState(599);
          null_coalescing_expression();
          break;
        }

        case CSharpParser::THROW: {
          setState(600);
          throw_expression();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_or_expressionContext ------------------------------------------------------------------

CSharpParser::Conditional_or_expressionContext::Conditional_or_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Conditional_and_expressionContext *> CSharpParser::Conditional_or_expressionContext::conditional_and_expression() {
  return getRuleContexts<CSharpParser::Conditional_and_expressionContext>();
}

CSharpParser::Conditional_and_expressionContext* CSharpParser::Conditional_or_expressionContext::conditional_and_expression(size_t i) {
  return getRuleContext<CSharpParser::Conditional_and_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Conditional_or_expressionContext::OP_OR() {
  return getTokens(CSharpParser::OP_OR);
}

tree::TerminalNode* CSharpParser::Conditional_or_expressionContext::OP_OR(size_t i) {
  return getToken(CSharpParser::OP_OR, i);
}


size_t CSharpParser::Conditional_or_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleConditional_or_expression;
}

void CSharpParser::Conditional_or_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_or_expression(this);
}

void CSharpParser::Conditional_or_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_or_expression(this);
}

CSharpParser::Conditional_or_expressionContext* CSharpParser::conditional_or_expression() {
  Conditional_or_expressionContext *_localctx = _tracker.createInstance<Conditional_or_expressionContext>(_ctx, getState());
  enterRule(_localctx, 40, CSharpParser::RuleConditional_or_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(605);
    conditional_and_expression();
    setState(610);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::OP_OR) {
      setState(606);
      match(CSharpParser::OP_OR);
      setState(607);
      conditional_and_expression();
      setState(612);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_and_expressionContext ------------------------------------------------------------------

CSharpParser::Conditional_and_expressionContext::Conditional_and_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Inclusive_or_expressionContext *> CSharpParser::Conditional_and_expressionContext::inclusive_or_expression() {
  return getRuleContexts<CSharpParser::Inclusive_or_expressionContext>();
}

CSharpParser::Inclusive_or_expressionContext* CSharpParser::Conditional_and_expressionContext::inclusive_or_expression(size_t i) {
  return getRuleContext<CSharpParser::Inclusive_or_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Conditional_and_expressionContext::OP_AND() {
  return getTokens(CSharpParser::OP_AND);
}

tree::TerminalNode* CSharpParser::Conditional_and_expressionContext::OP_AND(size_t i) {
  return getToken(CSharpParser::OP_AND, i);
}


size_t CSharpParser::Conditional_and_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleConditional_and_expression;
}

void CSharpParser::Conditional_and_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_and_expression(this);
}

void CSharpParser::Conditional_and_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_and_expression(this);
}

CSharpParser::Conditional_and_expressionContext* CSharpParser::conditional_and_expression() {
  Conditional_and_expressionContext *_localctx = _tracker.createInstance<Conditional_and_expressionContext>(_ctx, getState());
  enterRule(_localctx, 42, CSharpParser::RuleConditional_and_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(613);
    inclusive_or_expression();
    setState(618);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::OP_AND) {
      setState(614);
      match(CSharpParser::OP_AND);
      setState(615);
      inclusive_or_expression();
      setState(620);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inclusive_or_expressionContext ------------------------------------------------------------------

CSharpParser::Inclusive_or_expressionContext::Inclusive_or_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Exclusive_or_expressionContext *> CSharpParser::Inclusive_or_expressionContext::exclusive_or_expression() {
  return getRuleContexts<CSharpParser::Exclusive_or_expressionContext>();
}

CSharpParser::Exclusive_or_expressionContext* CSharpParser::Inclusive_or_expressionContext::exclusive_or_expression(size_t i) {
  return getRuleContext<CSharpParser::Exclusive_or_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Inclusive_or_expressionContext::BITWISE_OR() {
  return getTokens(CSharpParser::BITWISE_OR);
}

tree::TerminalNode* CSharpParser::Inclusive_or_expressionContext::BITWISE_OR(size_t i) {
  return getToken(CSharpParser::BITWISE_OR, i);
}


size_t CSharpParser::Inclusive_or_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleInclusive_or_expression;
}

void CSharpParser::Inclusive_or_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclusive_or_expression(this);
}

void CSharpParser::Inclusive_or_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclusive_or_expression(this);
}

CSharpParser::Inclusive_or_expressionContext* CSharpParser::inclusive_or_expression() {
  Inclusive_or_expressionContext *_localctx = _tracker.createInstance<Inclusive_or_expressionContext>(_ctx, getState());
  enterRule(_localctx, 44, CSharpParser::RuleInclusive_or_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(621);
    exclusive_or_expression();
    setState(626);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::BITWISE_OR) {
      setState(622);
      match(CSharpParser::BITWISE_OR);
      setState(623);
      exclusive_or_expression();
      setState(628);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exclusive_or_expressionContext ------------------------------------------------------------------

CSharpParser::Exclusive_or_expressionContext::Exclusive_or_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::And_expressionContext *> CSharpParser::Exclusive_or_expressionContext::and_expression() {
  return getRuleContexts<CSharpParser::And_expressionContext>();
}

CSharpParser::And_expressionContext* CSharpParser::Exclusive_or_expressionContext::and_expression(size_t i) {
  return getRuleContext<CSharpParser::And_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Exclusive_or_expressionContext::CARET() {
  return getTokens(CSharpParser::CARET);
}

tree::TerminalNode* CSharpParser::Exclusive_or_expressionContext::CARET(size_t i) {
  return getToken(CSharpParser::CARET, i);
}


size_t CSharpParser::Exclusive_or_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleExclusive_or_expression;
}

void CSharpParser::Exclusive_or_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExclusive_or_expression(this);
}

void CSharpParser::Exclusive_or_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExclusive_or_expression(this);
}

CSharpParser::Exclusive_or_expressionContext* CSharpParser::exclusive_or_expression() {
  Exclusive_or_expressionContext *_localctx = _tracker.createInstance<Exclusive_or_expressionContext>(_ctx, getState());
  enterRule(_localctx, 46, CSharpParser::RuleExclusive_or_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(629);
    and_expression();
    setState(634);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(630);
        match(CSharpParser::CARET);
        setState(631);
        and_expression(); 
      }
      setState(636);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- And_expressionContext ------------------------------------------------------------------

CSharpParser::And_expressionContext::And_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Equality_expressionContext *> CSharpParser::And_expressionContext::equality_expression() {
  return getRuleContexts<CSharpParser::Equality_expressionContext>();
}

CSharpParser::Equality_expressionContext* CSharpParser::And_expressionContext::equality_expression(size_t i) {
  return getRuleContext<CSharpParser::Equality_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::And_expressionContext::AMP() {
  return getTokens(CSharpParser::AMP);
}

tree::TerminalNode* CSharpParser::And_expressionContext::AMP(size_t i) {
  return getToken(CSharpParser::AMP, i);
}


size_t CSharpParser::And_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleAnd_expression;
}

void CSharpParser::And_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnd_expression(this);
}

void CSharpParser::And_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnd_expression(this);
}

CSharpParser::And_expressionContext* CSharpParser::and_expression() {
  And_expressionContext *_localctx = _tracker.createInstance<And_expressionContext>(_ctx, getState());
  enterRule(_localctx, 48, CSharpParser::RuleAnd_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(637);
    equality_expression();
    setState(642);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(638);
        match(CSharpParser::AMP);
        setState(639);
        equality_expression(); 
      }
      setState(644);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Equality_expressionContext ------------------------------------------------------------------

CSharpParser::Equality_expressionContext::Equality_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Relational_expressionContext *> CSharpParser::Equality_expressionContext::relational_expression() {
  return getRuleContexts<CSharpParser::Relational_expressionContext>();
}

CSharpParser::Relational_expressionContext* CSharpParser::Equality_expressionContext::relational_expression(size_t i) {
  return getRuleContext<CSharpParser::Relational_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Equality_expressionContext::OP_EQ() {
  return getTokens(CSharpParser::OP_EQ);
}

tree::TerminalNode* CSharpParser::Equality_expressionContext::OP_EQ(size_t i) {
  return getToken(CSharpParser::OP_EQ, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Equality_expressionContext::OP_NE() {
  return getTokens(CSharpParser::OP_NE);
}

tree::TerminalNode* CSharpParser::Equality_expressionContext::OP_NE(size_t i) {
  return getToken(CSharpParser::OP_NE, i);
}


size_t CSharpParser::Equality_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleEquality_expression;
}

void CSharpParser::Equality_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquality_expression(this);
}

void CSharpParser::Equality_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquality_expression(this);
}

CSharpParser::Equality_expressionContext* CSharpParser::equality_expression() {
  Equality_expressionContext *_localctx = _tracker.createInstance<Equality_expressionContext>(_ctx, getState());
  enterRule(_localctx, 50, CSharpParser::RuleEquality_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(645);
    relational_expression();
    setState(650);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::OP_EQ

    || _la == CSharpParser::OP_NE) {
      setState(646);
      _la = _input->LA(1);
      if (!(_la == CSharpParser::OP_EQ

      || _la == CSharpParser::OP_NE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(647);
      relational_expression();
      setState(652);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relational_expressionContext ------------------------------------------------------------------

CSharpParser::Relational_expressionContext::Relational_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Shift_expressionContext *> CSharpParser::Relational_expressionContext::shift_expression() {
  return getRuleContexts<CSharpParser::Shift_expressionContext>();
}

CSharpParser::Shift_expressionContext* CSharpParser::Relational_expressionContext::shift_expression(size_t i) {
  return getRuleContext<CSharpParser::Shift_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::IS() {
  return getTokens(CSharpParser::IS);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::IS(size_t i) {
  return getToken(CSharpParser::IS, i);
}

std::vector<CSharpParser::IsTypeContext *> CSharpParser::Relational_expressionContext::isType() {
  return getRuleContexts<CSharpParser::IsTypeContext>();
}

CSharpParser::IsTypeContext* CSharpParser::Relational_expressionContext::isType(size_t i) {
  return getRuleContext<CSharpParser::IsTypeContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::AS() {
  return getTokens(CSharpParser::AS);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::AS(size_t i) {
  return getToken(CSharpParser::AS, i);
}

std::vector<CSharpParser::Type_Context *> CSharpParser::Relational_expressionContext::type_() {
  return getRuleContexts<CSharpParser::Type_Context>();
}

CSharpParser::Type_Context* CSharpParser::Relational_expressionContext::type_(size_t i) {
  return getRuleContext<CSharpParser::Type_Context>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::LT() {
  return getTokens(CSharpParser::LT);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::LT(size_t i) {
  return getToken(CSharpParser::LT, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::GT() {
  return getTokens(CSharpParser::GT);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::GT(size_t i) {
  return getToken(CSharpParser::GT, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::OP_LE() {
  return getTokens(CSharpParser::OP_LE);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::OP_LE(size_t i) {
  return getToken(CSharpParser::OP_LE, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::OP_GE() {
  return getTokens(CSharpParser::OP_GE);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::OP_GE(size_t i) {
  return getToken(CSharpParser::OP_GE, i);
}


size_t CSharpParser::Relational_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleRelational_expression;
}

void CSharpParser::Relational_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelational_expression(this);
}

void CSharpParser::Relational_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelational_expression(this);
}

CSharpParser::Relational_expressionContext* CSharpParser::relational_expression() {
  Relational_expressionContext *_localctx = _tracker.createInstance<Relational_expressionContext>(_ctx, getState());
  enterRule(_localctx, 52, CSharpParser::RuleRelational_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(653);
    shift_expression();
    setState(662);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::AS

    || _la == CSharpParser::IS || ((((_la - 146) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 146)) & ((1ULL << (CSharpParser::LT - 146))
      | (1ULL << (CSharpParser::GT - 146))
      | (1ULL << (CSharpParser::OP_LE - 146))
      | (1ULL << (CSharpParser::OP_GE - 146)))) != 0)) {
      setState(660);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::LT:
        case CSharpParser::GT:
        case CSharpParser::OP_LE:
        case CSharpParser::OP_GE: {
          setState(654);
          _la = _input->LA(1);
          if (!(((((_la - 146) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 146)) & ((1ULL << (CSharpParser::LT - 146))
            | (1ULL << (CSharpParser::GT - 146))
            | (1ULL << (CSharpParser::OP_LE - 146))
            | (1ULL << (CSharpParser::OP_GE - 146)))) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(655);
          shift_expression();
          break;
        }

        case CSharpParser::IS: {
          setState(656);
          match(CSharpParser::IS);
          setState(657);
          isType();
          break;
        }

        case CSharpParser::AS: {
          setState(658);
          match(CSharpParser::AS);
          setState(659);
          type_();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(664);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Shift_expressionContext ------------------------------------------------------------------

CSharpParser::Shift_expressionContext::Shift_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Additive_expressionContext *> CSharpParser::Shift_expressionContext::additive_expression() {
  return getRuleContexts<CSharpParser::Additive_expressionContext>();
}

CSharpParser::Additive_expressionContext* CSharpParser::Shift_expressionContext::additive_expression(size_t i) {
  return getRuleContext<CSharpParser::Additive_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Shift_expressionContext::OP_LEFT_SHIFT() {
  return getTokens(CSharpParser::OP_LEFT_SHIFT);
}

tree::TerminalNode* CSharpParser::Shift_expressionContext::OP_LEFT_SHIFT(size_t i) {
  return getToken(CSharpParser::OP_LEFT_SHIFT, i);
}

std::vector<CSharpParser::Right_shiftContext *> CSharpParser::Shift_expressionContext::right_shift() {
  return getRuleContexts<CSharpParser::Right_shiftContext>();
}

CSharpParser::Right_shiftContext* CSharpParser::Shift_expressionContext::right_shift(size_t i) {
  return getRuleContext<CSharpParser::Right_shiftContext>(i);
}


size_t CSharpParser::Shift_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleShift_expression;
}

void CSharpParser::Shift_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShift_expression(this);
}

void CSharpParser::Shift_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShift_expression(this);
}

CSharpParser::Shift_expressionContext* CSharpParser::shift_expression() {
  Shift_expressionContext *_localctx = _tracker.createInstance<Shift_expressionContext>(_ctx, getState());
  enterRule(_localctx, 54, CSharpParser::RuleShift_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(665);
    additive_expression();
    setState(673);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(668);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::OP_LEFT_SHIFT: {
            setState(666);
            match(CSharpParser::OP_LEFT_SHIFT);
            break;
          }

          case CSharpParser::GT: {
            setState(667);
            right_shift();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(670);
        additive_expression(); 
      }
      setState(675);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Additive_expressionContext ------------------------------------------------------------------

CSharpParser::Additive_expressionContext::Additive_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Multiplicative_expressionContext *> CSharpParser::Additive_expressionContext::multiplicative_expression() {
  return getRuleContexts<CSharpParser::Multiplicative_expressionContext>();
}

CSharpParser::Multiplicative_expressionContext* CSharpParser::Additive_expressionContext::multiplicative_expression(size_t i) {
  return getRuleContext<CSharpParser::Multiplicative_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Additive_expressionContext::PLUS() {
  return getTokens(CSharpParser::PLUS);
}

tree::TerminalNode* CSharpParser::Additive_expressionContext::PLUS(size_t i) {
  return getToken(CSharpParser::PLUS, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Additive_expressionContext::MINUS() {
  return getTokens(CSharpParser::MINUS);
}

tree::TerminalNode* CSharpParser::Additive_expressionContext::MINUS(size_t i) {
  return getToken(CSharpParser::MINUS, i);
}


size_t CSharpParser::Additive_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleAdditive_expression;
}

void CSharpParser::Additive_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditive_expression(this);
}

void CSharpParser::Additive_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditive_expression(this);
}

CSharpParser::Additive_expressionContext* CSharpParser::additive_expression() {
  Additive_expressionContext *_localctx = _tracker.createInstance<Additive_expressionContext>(_ctx, getState());
  enterRule(_localctx, 56, CSharpParser::RuleAdditive_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(676);
    multiplicative_expression();
    setState(681);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(677);
        _la = _input->LA(1);
        if (!(_la == CSharpParser::PLUS

        || _la == CSharpParser::MINUS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(678);
        multiplicative_expression(); 
      }
      setState(683);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicative_expressionContext ------------------------------------------------------------------

CSharpParser::Multiplicative_expressionContext::Multiplicative_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Switch_expressionContext *> CSharpParser::Multiplicative_expressionContext::switch_expression() {
  return getRuleContexts<CSharpParser::Switch_expressionContext>();
}

CSharpParser::Switch_expressionContext* CSharpParser::Multiplicative_expressionContext::switch_expression(size_t i) {
  return getRuleContext<CSharpParser::Switch_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Multiplicative_expressionContext::STAR() {
  return getTokens(CSharpParser::STAR);
}

tree::TerminalNode* CSharpParser::Multiplicative_expressionContext::STAR(size_t i) {
  return getToken(CSharpParser::STAR, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Multiplicative_expressionContext::DIV() {
  return getTokens(CSharpParser::DIV);
}

tree::TerminalNode* CSharpParser::Multiplicative_expressionContext::DIV(size_t i) {
  return getToken(CSharpParser::DIV, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Multiplicative_expressionContext::PERCENT() {
  return getTokens(CSharpParser::PERCENT);
}

tree::TerminalNode* CSharpParser::Multiplicative_expressionContext::PERCENT(size_t i) {
  return getToken(CSharpParser::PERCENT, i);
}


size_t CSharpParser::Multiplicative_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleMultiplicative_expression;
}

void CSharpParser::Multiplicative_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicative_expression(this);
}

void CSharpParser::Multiplicative_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicative_expression(this);
}

CSharpParser::Multiplicative_expressionContext* CSharpParser::multiplicative_expression() {
  Multiplicative_expressionContext *_localctx = _tracker.createInstance<Multiplicative_expressionContext>(_ctx, getState());
  enterRule(_localctx, 58, CSharpParser::RuleMultiplicative_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(684);
    switch_expression();
    setState(689);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(685);
        _la = _input->LA(1);
        if (!(((((_la - 137) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 137)) & ((1ULL << (CSharpParser::STAR - 137))
          | (1ULL << (CSharpParser::DIV - 137))
          | (1ULL << (CSharpParser::PERCENT - 137)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(686);
        switch_expression(); 
      }
      setState(691);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_expressionContext ------------------------------------------------------------------

CSharpParser::Switch_expressionContext::Switch_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Range_expressionContext* CSharpParser::Switch_expressionContext::range_expression() {
  return getRuleContext<CSharpParser::Range_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Switch_expressionContext::SWITCH() {
  return getToken(CSharpParser::SWITCH, 0);
}

tree::TerminalNode* CSharpParser::Switch_expressionContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Switch_expressionContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Switch_expression_armsContext* CSharpParser::Switch_expressionContext::switch_expression_arms() {
  return getRuleContext<CSharpParser::Switch_expression_armsContext>(0);
}

tree::TerminalNode* CSharpParser::Switch_expressionContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Switch_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_expression;
}

void CSharpParser::Switch_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_expression(this);
}

void CSharpParser::Switch_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_expression(this);
}

CSharpParser::Switch_expressionContext* CSharpParser::switch_expression() {
  Switch_expressionContext *_localctx = _tracker.createInstance<Switch_expressionContext>(_ctx, getState());
  enterRule(_localctx, 60, CSharpParser::RuleSwitch_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(692);
    range_expression();
    setState(702);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SWITCH) {
      setState(693);
      match(CSharpParser::SWITCH);
      setState(694);
      match(CSharpParser::OPEN_BRACE);
      setState(699);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
        | (1ULL << CSharpParser::ALIAS)
        | (1ULL << CSharpParser::ARGLIST)
        | (1ULL << CSharpParser::ASCENDING)
        | (1ULL << CSharpParser::ASYNC)
        | (1ULL << CSharpParser::AWAIT)
        | (1ULL << CSharpParser::BASE)
        | (1ULL << CSharpParser::BOOL)
        | (1ULL << CSharpParser::BY)
        | (1ULL << CSharpParser::BYTE)
        | (1ULL << CSharpParser::CHAR)
        | (1ULL << CSharpParser::CHECKED)
        | (1ULL << CSharpParser::DECIMAL)
        | (1ULL << CSharpParser::DEFAULT)
        | (1ULL << CSharpParser::DELEGATE)
        | (1ULL << CSharpParser::DESCENDING)
        | (1ULL << CSharpParser::DOUBLE)
        | (1ULL << CSharpParser::DYNAMIC)
        | (1ULL << CSharpParser::EQUALS)
        | (1ULL << CSharpParser::FALSE)
        | (1ULL << CSharpParser::FLOAT)
        | (1ULL << CSharpParser::FROM)
        | (1ULL << CSharpParser::GET)
        | (1ULL << CSharpParser::GROUP)
        | (1ULL << CSharpParser::INT)
        | (1ULL << CSharpParser::INTO)
        | (1ULL << CSharpParser::JOIN)
        | (1ULL << CSharpParser::LET)
        | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
        | (1ULL << (CSharpParser::NEW - 64))
        | (1ULL << (CSharpParser::NULL - 64))
        | (1ULL << (CSharpParser::OBJECT - 64))
        | (1ULL << (CSharpParser::ON - 64))
        | (1ULL << (CSharpParser::ORDERBY - 64))
        | (1ULL << (CSharpParser::PARTIAL - 64))
        | (1ULL << (CSharpParser::REF - 64))
        | (1ULL << (CSharpParser::REMOVE - 64))
        | (1ULL << (CSharpParser::SBYTE - 64))
        | (1ULL << (CSharpParser::SELECT - 64))
        | (1ULL << (CSharpParser::SET - 64))
        | (1ULL << (CSharpParser::SHORT - 64))
        | (1ULL << (CSharpParser::SIZEOF - 64))
        | (1ULL << (CSharpParser::STRING - 64))
        | (1ULL << (CSharpParser::THIS - 64))
        | (1ULL << (CSharpParser::TRUE - 64))
        | (1ULL << (CSharpParser::TYPEOF - 64))
        | (1ULL << (CSharpParser::UINT - 64))
        | (1ULL << (CSharpParser::ULONG - 64))
        | (1ULL << (CSharpParser::UNCHECKED - 64))
        | (1ULL << (CSharpParser::UNMANAGED - 64))
        | (1ULL << (CSharpParser::USHORT - 64))
        | (1ULL << (CSharpParser::VAR - 64))
        | (1ULL << (CSharpParser::WHEN - 64))
        | (1ULL << (CSharpParser::WHERE - 64))
        | (1ULL << (CSharpParser::YIELD - 64))
        | (1ULL << (CSharpParser::IDENTIFIER - 64))
        | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
        | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::REAL_LITERAL - 64))
        | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
        | (1ULL << (CSharpParser::REGULAR_STRING - 64))
        | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
        | (1ULL << (CSharpParser::PLUS - 129))
        | (1ULL << (CSharpParser::MINUS - 129))
        | (1ULL << (CSharpParser::STAR - 129))
        | (1ULL << (CSharpParser::AMP - 129))
        | (1ULL << (CSharpParser::CARET - 129))
        | (1ULL << (CSharpParser::BANG - 129))
        | (1ULL << (CSharpParser::TILDE - 129))
        | (1ULL << (CSharpParser::OP_INC - 129))
        | (1ULL << (CSharpParser::OP_DEC - 129))
        | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
        setState(695);
        switch_expression_arms();
        setState(697);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::COMMA) {
          setState(696);
          match(CSharpParser::COMMA);
        }
      }
      setState(701);
      match(CSharpParser::CLOSE_BRACE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_expression_armsContext ------------------------------------------------------------------

CSharpParser::Switch_expression_armsContext::Switch_expression_armsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Switch_expression_armContext *> CSharpParser::Switch_expression_armsContext::switch_expression_arm() {
  return getRuleContexts<CSharpParser::Switch_expression_armContext>();
}

CSharpParser::Switch_expression_armContext* CSharpParser::Switch_expression_armsContext::switch_expression_arm(size_t i) {
  return getRuleContext<CSharpParser::Switch_expression_armContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Switch_expression_armsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Switch_expression_armsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Switch_expression_armsContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_expression_arms;
}

void CSharpParser::Switch_expression_armsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_expression_arms(this);
}

void CSharpParser::Switch_expression_armsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_expression_arms(this);
}

CSharpParser::Switch_expression_armsContext* CSharpParser::switch_expression_arms() {
  Switch_expression_armsContext *_localctx = _tracker.createInstance<Switch_expression_armsContext>(_ctx, getState());
  enterRule(_localctx, 62, CSharpParser::RuleSwitch_expression_arms);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(704);
    switch_expression_arm();
    setState(709);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(705);
        match(CSharpParser::COMMA);
        setState(706);
        switch_expression_arm(); 
      }
      setState(711);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_expression_armContext ------------------------------------------------------------------

CSharpParser::Switch_expression_armContext::Switch_expression_armContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Switch_expression_armContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Switch_expression_armContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Switch_expression_armContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

CSharpParser::Case_guardContext* CSharpParser::Switch_expression_armContext::case_guard() {
  return getRuleContext<CSharpParser::Case_guardContext>(0);
}


size_t CSharpParser::Switch_expression_armContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_expression_arm;
}

void CSharpParser::Switch_expression_armContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_expression_arm(this);
}

void CSharpParser::Switch_expression_armContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_expression_arm(this);
}

CSharpParser::Switch_expression_armContext* CSharpParser::switch_expression_arm() {
  Switch_expression_armContext *_localctx = _tracker.createInstance<Switch_expression_armContext>(_ctx, getState());
  enterRule(_localctx, 64, CSharpParser::RuleSwitch_expression_arm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(712);
    expression();
    setState(714);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHEN) {
      setState(713);
      case_guard();
    }
    setState(716);
    right_arrow();
    setState(717);
    throwable_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Range_expressionContext ------------------------------------------------------------------

CSharpParser::Range_expressionContext::Range_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Unary_expressionContext *> CSharpParser::Range_expressionContext::unary_expression() {
  return getRuleContexts<CSharpParser::Unary_expressionContext>();
}

CSharpParser::Unary_expressionContext* CSharpParser::Range_expressionContext::unary_expression(size_t i) {
  return getRuleContext<CSharpParser::Unary_expressionContext>(i);
}

tree::TerminalNode* CSharpParser::Range_expressionContext::OP_RANGE() {
  return getToken(CSharpParser::OP_RANGE, 0);
}


size_t CSharpParser::Range_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleRange_expression;
}

void CSharpParser::Range_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange_expression(this);
}

void CSharpParser::Range_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange_expression(this);
}

CSharpParser::Range_expressionContext* CSharpParser::range_expression() {
  Range_expressionContext *_localctx = _tracker.createInstance<Range_expressionContext>(_ctx, getState());
  enterRule(_localctx, 66, CSharpParser::RuleRange_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(727);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(719);
      unary_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(721);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
        | (1ULL << CSharpParser::ALIAS)
        | (1ULL << CSharpParser::ARGLIST)
        | (1ULL << CSharpParser::ASCENDING)
        | (1ULL << CSharpParser::ASYNC)
        | (1ULL << CSharpParser::AWAIT)
        | (1ULL << CSharpParser::BASE)
        | (1ULL << CSharpParser::BOOL)
        | (1ULL << CSharpParser::BY)
        | (1ULL << CSharpParser::BYTE)
        | (1ULL << CSharpParser::CHAR)
        | (1ULL << CSharpParser::CHECKED)
        | (1ULL << CSharpParser::DECIMAL)
        | (1ULL << CSharpParser::DEFAULT)
        | (1ULL << CSharpParser::DELEGATE)
        | (1ULL << CSharpParser::DESCENDING)
        | (1ULL << CSharpParser::DOUBLE)
        | (1ULL << CSharpParser::DYNAMIC)
        | (1ULL << CSharpParser::EQUALS)
        | (1ULL << CSharpParser::FALSE)
        | (1ULL << CSharpParser::FLOAT)
        | (1ULL << CSharpParser::FROM)
        | (1ULL << CSharpParser::GET)
        | (1ULL << CSharpParser::GROUP)
        | (1ULL << CSharpParser::INT)
        | (1ULL << CSharpParser::INTO)
        | (1ULL << CSharpParser::JOIN)
        | (1ULL << CSharpParser::LET)
        | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
        | (1ULL << (CSharpParser::NEW - 64))
        | (1ULL << (CSharpParser::NULL - 64))
        | (1ULL << (CSharpParser::OBJECT - 64))
        | (1ULL << (CSharpParser::ON - 64))
        | (1ULL << (CSharpParser::ORDERBY - 64))
        | (1ULL << (CSharpParser::PARTIAL - 64))
        | (1ULL << (CSharpParser::REMOVE - 64))
        | (1ULL << (CSharpParser::SBYTE - 64))
        | (1ULL << (CSharpParser::SELECT - 64))
        | (1ULL << (CSharpParser::SET - 64))
        | (1ULL << (CSharpParser::SHORT - 64))
        | (1ULL << (CSharpParser::SIZEOF - 64))
        | (1ULL << (CSharpParser::STRING - 64))
        | (1ULL << (CSharpParser::THIS - 64))
        | (1ULL << (CSharpParser::TRUE - 64))
        | (1ULL << (CSharpParser::TYPEOF - 64))
        | (1ULL << (CSharpParser::UINT - 64))
        | (1ULL << (CSharpParser::ULONG - 64))
        | (1ULL << (CSharpParser::UNCHECKED - 64))
        | (1ULL << (CSharpParser::UNMANAGED - 64))
        | (1ULL << (CSharpParser::USHORT - 64))
        | (1ULL << (CSharpParser::VAR - 64))
        | (1ULL << (CSharpParser::WHEN - 64))
        | (1ULL << (CSharpParser::WHERE - 64))
        | (1ULL << (CSharpParser::YIELD - 64))
        | (1ULL << (CSharpParser::IDENTIFIER - 64))
        | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
        | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::REAL_LITERAL - 64))
        | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
        | (1ULL << (CSharpParser::REGULAR_STRING - 64))
        | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
        | (1ULL << (CSharpParser::PLUS - 129))
        | (1ULL << (CSharpParser::MINUS - 129))
        | (1ULL << (CSharpParser::STAR - 129))
        | (1ULL << (CSharpParser::AMP - 129))
        | (1ULL << (CSharpParser::CARET - 129))
        | (1ULL << (CSharpParser::BANG - 129))
        | (1ULL << (CSharpParser::TILDE - 129))
        | (1ULL << (CSharpParser::OP_INC - 129))
        | (1ULL << (CSharpParser::OP_DEC - 129)))) != 0)) {
        setState(720);
        unary_expression();
      }
      setState(723);
      match(CSharpParser::OP_RANGE);
      setState(725);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
      case 1: {
        setState(724);
        unary_expression();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_expressionContext ------------------------------------------------------------------

CSharpParser::Unary_expressionContext::Unary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Primary_expressionContext* CSharpParser::Unary_expressionContext::primary_expression() {
  return getRuleContext<CSharpParser::Primary_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::PLUS() {
  return getToken(CSharpParser::PLUS, 0);
}

CSharpParser::Unary_expressionContext* CSharpParser::Unary_expressionContext::unary_expression() {
  return getRuleContext<CSharpParser::Unary_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::MINUS() {
  return getToken(CSharpParser::MINUS, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::BANG() {
  return getToken(CSharpParser::BANG, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::TILDE() {
  return getToken(CSharpParser::TILDE, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::OP_INC() {
  return getToken(CSharpParser::OP_INC, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::OP_DEC() {
  return getToken(CSharpParser::OP_DEC, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Type_Context* CSharpParser::Unary_expressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::AWAIT() {
  return getToken(CSharpParser::AWAIT, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::AMP() {
  return getToken(CSharpParser::AMP, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::STAR() {
  return getToken(CSharpParser::STAR, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::CARET() {
  return getToken(CSharpParser::CARET, 0);
}


size_t CSharpParser::Unary_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleUnary_expression;
}

void CSharpParser::Unary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_expression(this);
}

void CSharpParser::Unary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_expression(this);
}

CSharpParser::Unary_expressionContext* CSharpParser::unary_expression() {
  Unary_expressionContext *_localctx = _tracker.createInstance<Unary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 68, CSharpParser::RuleUnary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(755);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(729);
      primary_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(730);
      match(CSharpParser::PLUS);
      setState(731);
      unary_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(732);
      match(CSharpParser::MINUS);
      setState(733);
      unary_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(734);
      match(CSharpParser::BANG);
      setState(735);
      unary_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(736);
      match(CSharpParser::TILDE);
      setState(737);
      unary_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(738);
      match(CSharpParser::OP_INC);
      setState(739);
      unary_expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(740);
      match(CSharpParser::OP_DEC);
      setState(741);
      unary_expression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(742);
      match(CSharpParser::OPEN_PARENS);
      setState(743);
      type_();
      setState(744);
      match(CSharpParser::CLOSE_PARENS);
      setState(745);
      unary_expression();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(747);
      match(CSharpParser::AWAIT);
      setState(748);
      unary_expression();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(749);
      match(CSharpParser::AMP);
      setState(750);
      unary_expression();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(751);
      match(CSharpParser::STAR);
      setState(752);
      unary_expression();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(753);
      match(CSharpParser::CARET);
      setState(754);
      unary_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expressionContext ------------------------------------------------------------------

CSharpParser::Primary_expressionContext::Primary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Primary_expression_startContext* CSharpParser::Primary_expressionContext::primary_expression_start() {
  return getRuleContext<CSharpParser::Primary_expression_startContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Primary_expressionContext::BANG() {
  return getTokens(CSharpParser::BANG);
}

tree::TerminalNode* CSharpParser::Primary_expressionContext::BANG(size_t i) {
  return getToken(CSharpParser::BANG, i);
}

std::vector<CSharpParser::Bracket_expressionContext *> CSharpParser::Primary_expressionContext::bracket_expression() {
  return getRuleContexts<CSharpParser::Bracket_expressionContext>();
}

CSharpParser::Bracket_expressionContext* CSharpParser::Primary_expressionContext::bracket_expression(size_t i) {
  return getRuleContext<CSharpParser::Bracket_expressionContext>(i);
}

std::vector<CSharpParser::Member_accessContext *> CSharpParser::Primary_expressionContext::member_access() {
  return getRuleContexts<CSharpParser::Member_accessContext>();
}

CSharpParser::Member_accessContext* CSharpParser::Primary_expressionContext::member_access(size_t i) {
  return getRuleContext<CSharpParser::Member_accessContext>(i);
}

std::vector<CSharpParser::Method_invocationContext *> CSharpParser::Primary_expressionContext::method_invocation() {
  return getRuleContexts<CSharpParser::Method_invocationContext>();
}

CSharpParser::Method_invocationContext* CSharpParser::Primary_expressionContext::method_invocation(size_t i) {
  return getRuleContext<CSharpParser::Method_invocationContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Primary_expressionContext::OP_INC() {
  return getTokens(CSharpParser::OP_INC);
}

tree::TerminalNode* CSharpParser::Primary_expressionContext::OP_INC(size_t i) {
  return getToken(CSharpParser::OP_INC, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Primary_expressionContext::OP_DEC() {
  return getTokens(CSharpParser::OP_DEC);
}

tree::TerminalNode* CSharpParser::Primary_expressionContext::OP_DEC(size_t i) {
  return getToken(CSharpParser::OP_DEC, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Primary_expressionContext::OP_PTR() {
  return getTokens(CSharpParser::OP_PTR);
}

tree::TerminalNode* CSharpParser::Primary_expressionContext::OP_PTR(size_t i) {
  return getToken(CSharpParser::OP_PTR, i);
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Primary_expressionContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Primary_expressionContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}


size_t CSharpParser::Primary_expressionContext::getRuleIndex() const {
  return CSharpParser::RulePrimary_expression;
}

void CSharpParser::Primary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_expression(this);
}

void CSharpParser::Primary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_expression(this);
}

CSharpParser::Primary_expressionContext* CSharpParser::primary_expression() {
  Primary_expressionContext *_localctx = _tracker.createInstance<Primary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 70, CSharpParser::RulePrimary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(757);
    dynamic_cast<Primary_expressionContext *>(_localctx)->pe = primary_expression_start();
    setState(759);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      setState(758);
      match(CSharpParser::BANG);
      break;
    }

    default:
      break;
    }
    setState(764);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(761);
        bracket_expression(); 
      }
      setState(766);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    }
    setState(768);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(767);
      match(CSharpParser::BANG);
      break;
    }

    default:
      break;
    }
    setState(792);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(776);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::DOT:
          case CSharpParser::INTERR: {
            setState(770);
            member_access();
            break;
          }

          case CSharpParser::OPEN_PARENS: {
            setState(771);
            method_invocation();
            break;
          }

          case CSharpParser::OP_INC: {
            setState(772);
            match(CSharpParser::OP_INC);
            break;
          }

          case CSharpParser::OP_DEC: {
            setState(773);
            match(CSharpParser::OP_DEC);
            break;
          }

          case CSharpParser::OP_PTR: {
            setState(774);
            match(CSharpParser::OP_PTR);
            setState(775);
            identifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(779);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
        case 1: {
          setState(778);
          match(CSharpParser::BANG);
          break;
        }

        default:
          break;
        }
        setState(784);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(781);
            bracket_expression(); 
          }
          setState(786);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
        }
        setState(788);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
        case 1: {
          setState(787);
          match(CSharpParser::BANG);
          break;
        }

        default:
          break;
        } 
      }
      setState(794);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expression_startContext ------------------------------------------------------------------

CSharpParser::Primary_expression_startContext::Primary_expression_startContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CSharpParser::Primary_expression_startContext::getRuleIndex() const {
  return CSharpParser::RulePrimary_expression_start;
}

void CSharpParser::Primary_expression_startContext::copyFrom(Primary_expression_startContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LiteralAccessExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::LiteralAccessExpressionContext::LITERAL_ACCESS() {
  return getToken(CSharpParser::LITERAL_ACCESS, 0);
}

CSharpParser::LiteralAccessExpressionContext::LiteralAccessExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::LiteralAccessExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralAccessExpression(this);
}
void CSharpParser::LiteralAccessExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralAccessExpression(this);
}
//----------------- DefaultValueExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::DefaultValueExpressionContext::DEFAULT() {
  return getToken(CSharpParser::DEFAULT, 0);
}

tree::TerminalNode* CSharpParser::DefaultValueExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Type_Context* CSharpParser::DefaultValueExpressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::DefaultValueExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::DefaultValueExpressionContext::DefaultValueExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::DefaultValueExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultValueExpression(this);
}
void CSharpParser::DefaultValueExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultValueExpression(this);
}
//----------------- BaseAccessExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::BaseAccessExpressionContext::BASE() {
  return getToken(CSharpParser::BASE, 0);
}

tree::TerminalNode* CSharpParser::BaseAccessExpressionContext::DOT() {
  return getToken(CSharpParser::DOT, 0);
}

CSharpParser::IdentifierContext* CSharpParser::BaseAccessExpressionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::BaseAccessExpressionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Expression_listContext* CSharpParser::BaseAccessExpressionContext::expression_list() {
  return getRuleContext<CSharpParser::Expression_listContext>(0);
}

tree::TerminalNode* CSharpParser::BaseAccessExpressionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

CSharpParser::Type_argument_listContext* CSharpParser::BaseAccessExpressionContext::type_argument_list() {
  return getRuleContext<CSharpParser::Type_argument_listContext>(0);
}

CSharpParser::BaseAccessExpressionContext::BaseAccessExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::BaseAccessExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBaseAccessExpression(this);
}
void CSharpParser::BaseAccessExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBaseAccessExpression(this);
}
//----------------- SizeofExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::SizeofExpressionContext::SIZEOF() {
  return getToken(CSharpParser::SIZEOF, 0);
}

tree::TerminalNode* CSharpParser::SizeofExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Type_Context* CSharpParser::SizeofExpressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::SizeofExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::SizeofExpressionContext::SizeofExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::SizeofExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSizeofExpression(this);
}
void CSharpParser::SizeofExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSizeofExpression(this);
}
//----------------- ParenthesisExpressionsContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ParenthesisExpressionsContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::ParenthesisExpressionsContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::ParenthesisExpressionsContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::ParenthesisExpressionsContext::ParenthesisExpressionsContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::ParenthesisExpressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesisExpressions(this);
}
void CSharpParser::ParenthesisExpressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesisExpressions(this);
}
//----------------- ThisReferenceExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ThisReferenceExpressionContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

CSharpParser::ThisReferenceExpressionContext::ThisReferenceExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::ThisReferenceExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThisReferenceExpression(this);
}
void CSharpParser::ThisReferenceExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThisReferenceExpression(this);
}
//----------------- ObjectCreationExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ObjectCreationExpressionContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

CSharpParser::Type_Context* CSharpParser::ObjectCreationExpressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Anonymous_object_initializerContext* CSharpParser::ObjectCreationExpressionContext::anonymous_object_initializer() {
  return getRuleContext<CSharpParser::Anonymous_object_initializerContext>(0);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::ObjectCreationExpressionContext::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::ObjectCreationExpressionContext::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

CSharpParser::Array_initializerContext* CSharpParser::ObjectCreationExpressionContext::array_initializer() {
  return getRuleContext<CSharpParser::Array_initializerContext>(0);
}

CSharpParser::Object_creation_expressionContext* CSharpParser::ObjectCreationExpressionContext::object_creation_expression() {
  return getRuleContext<CSharpParser::Object_creation_expressionContext>(0);
}

CSharpParser::Object_or_collection_initializerContext* CSharpParser::ObjectCreationExpressionContext::object_or_collection_initializer() {
  return getRuleContext<CSharpParser::Object_or_collection_initializerContext>(0);
}

tree::TerminalNode* CSharpParser::ObjectCreationExpressionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Expression_listContext* CSharpParser::ObjectCreationExpressionContext::expression_list() {
  return getRuleContext<CSharpParser::Expression_listContext>(0);
}

tree::TerminalNode* CSharpParser::ObjectCreationExpressionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

CSharpParser::ObjectCreationExpressionContext::ObjectCreationExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::ObjectCreationExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectCreationExpression(this);
}
void CSharpParser::ObjectCreationExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectCreationExpression(this);
}
//----------------- AnonymousMethodExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::AnonymousMethodExpressionContext::DELEGATE() {
  return getToken(CSharpParser::DELEGATE, 0);
}

CSharpParser::BlockContext* CSharpParser::AnonymousMethodExpressionContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

tree::TerminalNode* CSharpParser::AnonymousMethodExpressionContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}

tree::TerminalNode* CSharpParser::AnonymousMethodExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::AnonymousMethodExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Explicit_anonymous_function_parameter_listContext* CSharpParser::AnonymousMethodExpressionContext::explicit_anonymous_function_parameter_list() {
  return getRuleContext<CSharpParser::Explicit_anonymous_function_parameter_listContext>(0);
}

CSharpParser::AnonymousMethodExpressionContext::AnonymousMethodExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::AnonymousMethodExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymousMethodExpression(this);
}
void CSharpParser::AnonymousMethodExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymousMethodExpression(this);
}
//----------------- TypeofExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::TypeofExpressionContext::TYPEOF() {
  return getToken(CSharpParser::TYPEOF, 0);
}

tree::TerminalNode* CSharpParser::TypeofExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::TypeofExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Unbound_type_nameContext* CSharpParser::TypeofExpressionContext::unbound_type_name() {
  return getRuleContext<CSharpParser::Unbound_type_nameContext>(0);
}

CSharpParser::Type_Context* CSharpParser::TypeofExpressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::TypeofExpressionContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

CSharpParser::TypeofExpressionContext::TypeofExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::TypeofExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeofExpression(this);
}
void CSharpParser::TypeofExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeofExpression(this);
}
//----------------- TupleExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::TupleExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<CSharpParser::ArgumentContext *> CSharpParser::TupleExpressionContext::argument() {
  return getRuleContexts<CSharpParser::ArgumentContext>();
}

CSharpParser::ArgumentContext* CSharpParser::TupleExpressionContext::argument(size_t i) {
  return getRuleContext<CSharpParser::ArgumentContext>(i);
}

tree::TerminalNode* CSharpParser::TupleExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::TupleExpressionContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::TupleExpressionContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

CSharpParser::TupleExpressionContext::TupleExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::TupleExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTupleExpression(this);
}
void CSharpParser::TupleExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTupleExpression(this);
}
//----------------- UncheckedExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UncheckedExpressionContext::UNCHECKED() {
  return getToken(CSharpParser::UNCHECKED, 0);
}

tree::TerminalNode* CSharpParser::UncheckedExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::UncheckedExpressionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::UncheckedExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::UncheckedExpressionContext::UncheckedExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::UncheckedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUncheckedExpression(this);
}
void CSharpParser::UncheckedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUncheckedExpression(this);
}
//----------------- SimpleNameExpressionContext ------------------------------------------------------------------

CSharpParser::IdentifierContext* CSharpParser::SimpleNameExpressionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Type_argument_listContext* CSharpParser::SimpleNameExpressionContext::type_argument_list() {
  return getRuleContext<CSharpParser::Type_argument_listContext>(0);
}

CSharpParser::SimpleNameExpressionContext::SimpleNameExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::SimpleNameExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleNameExpression(this);
}
void CSharpParser::SimpleNameExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleNameExpression(this);
}
//----------------- MemberAccessExpressionContext ------------------------------------------------------------------

CSharpParser::Predefined_typeContext* CSharpParser::MemberAccessExpressionContext::predefined_type() {
  return getRuleContext<CSharpParser::Predefined_typeContext>(0);
}

CSharpParser::Qualified_alias_memberContext* CSharpParser::MemberAccessExpressionContext::qualified_alias_member() {
  return getRuleContext<CSharpParser::Qualified_alias_memberContext>(0);
}

CSharpParser::MemberAccessExpressionContext::MemberAccessExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::MemberAccessExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberAccessExpression(this);
}
void CSharpParser::MemberAccessExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberAccessExpression(this);
}
//----------------- CheckedExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::CheckedExpressionContext::CHECKED() {
  return getToken(CSharpParser::CHECKED, 0);
}

tree::TerminalNode* CSharpParser::CheckedExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::CheckedExpressionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::CheckedExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::CheckedExpressionContext::CheckedExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::CheckedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheckedExpression(this);
}
void CSharpParser::CheckedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheckedExpression(this);
}
//----------------- LiteralExpressionContext ------------------------------------------------------------------

CSharpParser::LiteralContext* CSharpParser::LiteralExpressionContext::literal() {
  return getRuleContext<CSharpParser::LiteralContext>(0);
}

CSharpParser::LiteralExpressionContext::LiteralExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::LiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralExpression(this);
}
void CSharpParser::LiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralExpression(this);
}
//----------------- NameofExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::NameofExpressionContext::NAMEOF() {
  return getToken(CSharpParser::NAMEOF, 0);
}

tree::TerminalNode* CSharpParser::NameofExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::NameofExpressionContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::NameofExpressionContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::NameofExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::NameofExpressionContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::NameofExpressionContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}

CSharpParser::NameofExpressionContext::NameofExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::NameofExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNameofExpression(this);
}
void CSharpParser::NameofExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNameofExpression(this);
}
CSharpParser::Primary_expression_startContext* CSharpParser::primary_expression_start() {
  Primary_expression_startContext *_localctx = _tracker.createInstance<Primary_expression_startContext>(_ctx, getState());
  enterRule(_localctx, 72, CSharpParser::RulePrimary_expression_start);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(916);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::LiteralExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(795);
      literal();
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::SimpleNameExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(796);
      identifier();
      setState(798);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
      case 1: {
        setState(797);
        type_argument_list();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::ParenthesisExpressionsContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(800);
      match(CSharpParser::OPEN_PARENS);
      setState(801);
      expression();
      setState(802);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::MemberAccessExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(804);
      predefined_type();
      break;
    }

    case 5: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::MemberAccessExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(805);
      qualified_alias_member();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::LiteralAccessExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(806);
      match(CSharpParser::LITERAL_ACCESS);
      break;
    }

    case 7: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::ThisReferenceExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(807);
      match(CSharpParser::THIS);
      break;
    }

    case 8: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::BaseAccessExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(808);
      match(CSharpParser::BASE);
      setState(818);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::DOT: {
          setState(809);
          match(CSharpParser::DOT);
          setState(810);
          identifier();
          setState(812);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
          case 1: {
            setState(811);
            type_argument_list();
            break;
          }

          default:
            break;
          }
          break;
        }

        case CSharpParser::OPEN_BRACKET: {
          setState(814);
          match(CSharpParser::OPEN_BRACKET);
          setState(815);
          expression_list();
          setState(816);
          match(CSharpParser::CLOSE_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 9: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::ObjectCreationExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(820);
      match(CSharpParser::NEW);
      setState(849);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::ADD:
        case CSharpParser::ALIAS:
        case CSharpParser::ARGLIST:
        case CSharpParser::ASCENDING:
        case CSharpParser::ASYNC:
        case CSharpParser::AWAIT:
        case CSharpParser::BOOL:
        case CSharpParser::BY:
        case CSharpParser::BYTE:
        case CSharpParser::CHAR:
        case CSharpParser::DECIMAL:
        case CSharpParser::DESCENDING:
        case CSharpParser::DOUBLE:
        case CSharpParser::DYNAMIC:
        case CSharpParser::EQUALS:
        case CSharpParser::FLOAT:
        case CSharpParser::FROM:
        case CSharpParser::GET:
        case CSharpParser::GROUP:
        case CSharpParser::INT:
        case CSharpParser::INTO:
        case CSharpParser::JOIN:
        case CSharpParser::LET:
        case CSharpParser::LONG:
        case CSharpParser::NAMEOF:
        case CSharpParser::OBJECT:
        case CSharpParser::ON:
        case CSharpParser::ORDERBY:
        case CSharpParser::PARTIAL:
        case CSharpParser::REMOVE:
        case CSharpParser::SBYTE:
        case CSharpParser::SELECT:
        case CSharpParser::SET:
        case CSharpParser::SHORT:
        case CSharpParser::STRING:
        case CSharpParser::UINT:
        case CSharpParser::ULONG:
        case CSharpParser::UNMANAGED:
        case CSharpParser::USHORT:
        case CSharpParser::VAR:
        case CSharpParser::VOID:
        case CSharpParser::WHEN:
        case CSharpParser::WHERE:
        case CSharpParser::YIELD:
        case CSharpParser::IDENTIFIER:
        case CSharpParser::OPEN_PARENS: {
          setState(821);
          type_();
          setState(843);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
          case 1: {
            setState(822);
            object_creation_expression();
            break;
          }

          case 2: {
            setState(823);
            object_or_collection_initializer();
            break;
          }

          case 3: {
            setState(824);
            match(CSharpParser::OPEN_BRACKET);
            setState(825);
            expression_list();
            setState(826);
            match(CSharpParser::CLOSE_BRACKET);
            setState(830);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
              if (alt == 1) {
                setState(827);
                rank_specifier(); 
              }
              setState(832);
              _errHandler->sync(this);
              alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
            }
            setState(834);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CSharpParser::OPEN_BRACE) {
              setState(833);
              array_initializer();
            }
            break;
          }

          case 4: {
            setState(837); 
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
              setState(836);
              rank_specifier();
              setState(839); 
              _errHandler->sync(this);
              _la = _input->LA(1);
            } while (_la == CSharpParser::OPEN_BRACKET);
            setState(841);
            array_initializer();
            break;
          }

          default:
            break;
          }
          break;
        }

        case CSharpParser::OPEN_BRACE: {
          setState(845);
          anonymous_object_initializer();
          break;
        }

        case CSharpParser::OPEN_BRACKET: {
          setState(846);
          rank_specifier();
          setState(847);
          array_initializer();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 10: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::TupleExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(851);
      match(CSharpParser::OPEN_PARENS);
      setState(852);
      argument();
      setState(855); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(853);
        match(CSharpParser::COMMA);
        setState(854);
        argument();
        setState(857); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == CSharpParser::COMMA);
      setState(859);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 11: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::TypeofExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(861);
      match(CSharpParser::TYPEOF);
      setState(862);
      match(CSharpParser::OPEN_PARENS);
      setState(866);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
      case 1: {
        setState(863);
        unbound_type_name();
        break;
      }

      case 2: {
        setState(864);
        type_();
        break;
      }

      case 3: {
        setState(865);
        match(CSharpParser::VOID);
        break;
      }

      default:
        break;
      }
      setState(868);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 12: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::CheckedExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(869);
      match(CSharpParser::CHECKED);
      setState(870);
      match(CSharpParser::OPEN_PARENS);
      setState(871);
      expression();
      setState(872);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 13: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::UncheckedExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(874);
      match(CSharpParser::UNCHECKED);
      setState(875);
      match(CSharpParser::OPEN_PARENS);
      setState(876);
      expression();
      setState(877);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 14: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::DefaultValueExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(879);
      match(CSharpParser::DEFAULT);
      setState(884);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
      case 1: {
        setState(880);
        match(CSharpParser::OPEN_PARENS);
        setState(881);
        type_();
        setState(882);
        match(CSharpParser::CLOSE_PARENS);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::AnonymousMethodExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(887);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::ASYNC) {
        setState(886);
        match(CSharpParser::ASYNC);
      }
      setState(889);
      match(CSharpParser::DELEGATE);
      setState(895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::OPEN_PARENS) {
        setState(890);
        match(CSharpParser::OPEN_PARENS);
        setState(892);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 10) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
          | (1ULL << (CSharpParser::ALIAS - 10))
          | (1ULL << (CSharpParser::ARGLIST - 10))
          | (1ULL << (CSharpParser::ASCENDING - 10))
          | (1ULL << (CSharpParser::ASYNC - 10))
          | (1ULL << (CSharpParser::AWAIT - 10))
          | (1ULL << (CSharpParser::BOOL - 10))
          | (1ULL << (CSharpParser::BY - 10))
          | (1ULL << (CSharpParser::BYTE - 10))
          | (1ULL << (CSharpParser::CHAR - 10))
          | (1ULL << (CSharpParser::DECIMAL - 10))
          | (1ULL << (CSharpParser::DESCENDING - 10))
          | (1ULL << (CSharpParser::DOUBLE - 10))
          | (1ULL << (CSharpParser::DYNAMIC - 10))
          | (1ULL << (CSharpParser::EQUALS - 10))
          | (1ULL << (CSharpParser::FLOAT - 10))
          | (1ULL << (CSharpParser::FROM - 10))
          | (1ULL << (CSharpParser::GET - 10))
          | (1ULL << (CSharpParser::GROUP - 10))
          | (1ULL << (CSharpParser::IN - 10))
          | (1ULL << (CSharpParser::INT - 10))
          | (1ULL << (CSharpParser::INTO - 10))
          | (1ULL << (CSharpParser::JOIN - 10))
          | (1ULL << (CSharpParser::LET - 10))
          | (1ULL << (CSharpParser::LONG - 10))
          | (1ULL << (CSharpParser::NAMEOF - 10))
          | (1ULL << (CSharpParser::OBJECT - 10))
          | (1ULL << (CSharpParser::ON - 10))
          | (1ULL << (CSharpParser::ORDERBY - 10))
          | (1ULL << (CSharpParser::OUT - 10)))) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 75)) & ((1ULL << (CSharpParser::PARTIAL - 75))
          | (1ULL << (CSharpParser::REF - 75))
          | (1ULL << (CSharpParser::REMOVE - 75))
          | (1ULL << (CSharpParser::SBYTE - 75))
          | (1ULL << (CSharpParser::SELECT - 75))
          | (1ULL << (CSharpParser::SET - 75))
          | (1ULL << (CSharpParser::SHORT - 75))
          | (1ULL << (CSharpParser::STRING - 75))
          | (1ULL << (CSharpParser::UINT - 75))
          | (1ULL << (CSharpParser::ULONG - 75))
          | (1ULL << (CSharpParser::UNMANAGED - 75))
          | (1ULL << (CSharpParser::USHORT - 75))
          | (1ULL << (CSharpParser::VAR - 75))
          | (1ULL << (CSharpParser::VOID - 75))
          | (1ULL << (CSharpParser::WHEN - 75))
          | (1ULL << (CSharpParser::WHERE - 75))
          | (1ULL << (CSharpParser::YIELD - 75))
          | (1ULL << (CSharpParser::IDENTIFIER - 75))
          | (1ULL << (CSharpParser::OPEN_PARENS - 75)))) != 0)) {
          setState(891);
          explicit_anonymous_function_parameter_list();
        }
        setState(894);
        match(CSharpParser::CLOSE_PARENS);
      }
      setState(897);
      block();
      break;
    }

    case 16: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::SizeofExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(898);
      match(CSharpParser::SIZEOF);
      setState(899);
      match(CSharpParser::OPEN_PARENS);
      setState(900);
      type_();
      setState(901);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 17: {
      _localctx = dynamic_cast<Primary_expression_startContext *>(_tracker.createInstance<CSharpParser::NameofExpressionContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(903);
      match(CSharpParser::NAMEOF);
      setState(904);
      match(CSharpParser::OPEN_PARENS);
      setState(910);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(905);
          identifier();
          setState(906);
          match(CSharpParser::DOT); 
        }
        setState(912);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
      }
      setState(913);
      identifier();
      setState(914);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throwable_expressionContext ------------------------------------------------------------------

CSharpParser::Throwable_expressionContext::Throwable_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Throwable_expressionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Throw_expressionContext* CSharpParser::Throwable_expressionContext::throw_expression() {
  return getRuleContext<CSharpParser::Throw_expressionContext>(0);
}


size_t CSharpParser::Throwable_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleThrowable_expression;
}

void CSharpParser::Throwable_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowable_expression(this);
}

void CSharpParser::Throwable_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowable_expression(this);
}

CSharpParser::Throwable_expressionContext* CSharpParser::throwable_expression() {
  Throwable_expressionContext *_localctx = _tracker.createInstance<Throwable_expressionContext>(_ctx, getState());
  enterRule(_localctx, 74, CSharpParser::RuleThrowable_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(920);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(918);
        expression();
        break;
      }

      case CSharpParser::THROW: {
        enterOuterAlt(_localctx, 2);
        setState(919);
        throw_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throw_expressionContext ------------------------------------------------------------------

CSharpParser::Throw_expressionContext::Throw_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Throw_expressionContext::THROW() {
  return getToken(CSharpParser::THROW, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Throw_expressionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Throw_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleThrow_expression;
}

void CSharpParser::Throw_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow_expression(this);
}

void CSharpParser::Throw_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow_expression(this);
}

CSharpParser::Throw_expressionContext* CSharpParser::throw_expression() {
  Throw_expressionContext *_localctx = _tracker.createInstance<Throw_expressionContext>(_ctx, getState());
  enterRule(_localctx, 76, CSharpParser::RuleThrow_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(922);
    match(CSharpParser::THROW);
    setState(923);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_accessContext ------------------------------------------------------------------

CSharpParser::Member_accessContext::Member_accessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Member_accessContext::DOT() {
  return getToken(CSharpParser::DOT, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Member_accessContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Member_accessContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

CSharpParser::Type_argument_listContext* CSharpParser::Member_accessContext::type_argument_list() {
  return getRuleContext<CSharpParser::Type_argument_listContext>(0);
}


size_t CSharpParser::Member_accessContext::getRuleIndex() const {
  return CSharpParser::RuleMember_access;
}

void CSharpParser::Member_accessContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_access(this);
}

void CSharpParser::Member_accessContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_access(this);
}

CSharpParser::Member_accessContext* CSharpParser::member_access() {
  Member_accessContext *_localctx = _tracker.createInstance<Member_accessContext>(_ctx, getState());
  enterRule(_localctx, 78, CSharpParser::RuleMember_access);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(926);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::INTERR) {
      setState(925);
      match(CSharpParser::INTERR);
    }
    setState(928);
    match(CSharpParser::DOT);
    setState(929);
    identifier();
    setState(931);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(930);
      type_argument_list();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bracket_expressionContext ------------------------------------------------------------------

CSharpParser::Bracket_expressionContext::Bracket_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Bracket_expressionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

std::vector<CSharpParser::Indexer_argumentContext *> CSharpParser::Bracket_expressionContext::indexer_argument() {
  return getRuleContexts<CSharpParser::Indexer_argumentContext>();
}

CSharpParser::Indexer_argumentContext* CSharpParser::Bracket_expressionContext::indexer_argument(size_t i) {
  return getRuleContext<CSharpParser::Indexer_argumentContext>(i);
}

tree::TerminalNode* CSharpParser::Bracket_expressionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Bracket_expressionContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Bracket_expressionContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Bracket_expressionContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Bracket_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleBracket_expression;
}

void CSharpParser::Bracket_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBracket_expression(this);
}

void CSharpParser::Bracket_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBracket_expression(this);
}

CSharpParser::Bracket_expressionContext* CSharpParser::bracket_expression() {
  Bracket_expressionContext *_localctx = _tracker.createInstance<Bracket_expressionContext>(_ctx, getState());
  enterRule(_localctx, 80, CSharpParser::RuleBracket_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::INTERR) {
      setState(933);
      match(CSharpParser::INTERR);
    }
    setState(936);
    match(CSharpParser::OPEN_BRACKET);
    setState(937);
    indexer_argument();
    setState(942);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(938);
      match(CSharpParser::COMMA);
      setState(939);
      indexer_argument();
      setState(944);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(945);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Indexer_argumentContext ------------------------------------------------------------------

CSharpParser::Indexer_argumentContext::Indexer_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Indexer_argumentContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Indexer_argumentContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Indexer_argumentContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}


size_t CSharpParser::Indexer_argumentContext::getRuleIndex() const {
  return CSharpParser::RuleIndexer_argument;
}

void CSharpParser::Indexer_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexer_argument(this);
}

void CSharpParser::Indexer_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexer_argument(this);
}

CSharpParser::Indexer_argumentContext* CSharpParser::indexer_argument() {
  Indexer_argumentContext *_localctx = _tracker.createInstance<Indexer_argumentContext>(_ctx, getState());
  enterRule(_localctx, 82, CSharpParser::RuleIndexer_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(950);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      setState(947);
      identifier();
      setState(948);
      match(CSharpParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(952);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Predefined_typeContext ------------------------------------------------------------------

CSharpParser::Predefined_typeContext::Predefined_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::BOOL() {
  return getToken(CSharpParser::BOOL, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::BYTE() {
  return getToken(CSharpParser::BYTE, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::CHAR() {
  return getToken(CSharpParser::CHAR, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::DECIMAL() {
  return getToken(CSharpParser::DECIMAL, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::DOUBLE() {
  return getToken(CSharpParser::DOUBLE, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::FLOAT() {
  return getToken(CSharpParser::FLOAT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::INT() {
  return getToken(CSharpParser::INT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::LONG() {
  return getToken(CSharpParser::LONG, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::OBJECT() {
  return getToken(CSharpParser::OBJECT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::SBYTE() {
  return getToken(CSharpParser::SBYTE, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::SHORT() {
  return getToken(CSharpParser::SHORT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::STRING() {
  return getToken(CSharpParser::STRING, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::UINT() {
  return getToken(CSharpParser::UINT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::ULONG() {
  return getToken(CSharpParser::ULONG, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::USHORT() {
  return getToken(CSharpParser::USHORT, 0);
}


size_t CSharpParser::Predefined_typeContext::getRuleIndex() const {
  return CSharpParser::RulePredefined_type;
}

void CSharpParser::Predefined_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredefined_type(this);
}

void CSharpParser::Predefined_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredefined_type(this);
}

CSharpParser::Predefined_typeContext* CSharpParser::predefined_type() {
  Predefined_typeContext *_localctx = _tracker.createInstance<Predefined_typeContext>(_ctx, getState());
  enterRule(_localctx, 84, CSharpParser::RulePredefined_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(954);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & ((1ULL << (CSharpParser::OBJECT - 68))
      | (1ULL << (CSharpParser::SBYTE - 68))
      | (1ULL << (CSharpParser::SHORT - 68))
      | (1ULL << (CSharpParser::STRING - 68))
      | (1ULL << (CSharpParser::UINT - 68))
      | (1ULL << (CSharpParser::ULONG - 68))
      | (1ULL << (CSharpParser::USHORT - 68)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_listContext ------------------------------------------------------------------

CSharpParser::Expression_listContext::Expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Expression_listContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Expression_listContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Expression_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Expression_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Expression_listContext::getRuleIndex() const {
  return CSharpParser::RuleExpression_list;
}

void CSharpParser::Expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_list(this);
}

void CSharpParser::Expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_list(this);
}

CSharpParser::Expression_listContext* CSharpParser::expression_list() {
  Expression_listContext *_localctx = _tracker.createInstance<Expression_listContext>(_ctx, getState());
  enterRule(_localctx, 86, CSharpParser::RuleExpression_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(956);
    expression();
    setState(961);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(957);
      match(CSharpParser::COMMA);
      setState(958);
      expression();
      setState(963);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_or_collection_initializerContext ------------------------------------------------------------------

CSharpParser::Object_or_collection_initializerContext::Object_or_collection_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Object_initializerContext* CSharpParser::Object_or_collection_initializerContext::object_initializer() {
  return getRuleContext<CSharpParser::Object_initializerContext>(0);
}

CSharpParser::Collection_initializerContext* CSharpParser::Object_or_collection_initializerContext::collection_initializer() {
  return getRuleContext<CSharpParser::Collection_initializerContext>(0);
}


size_t CSharpParser::Object_or_collection_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleObject_or_collection_initializer;
}

void CSharpParser::Object_or_collection_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_or_collection_initializer(this);
}

void CSharpParser::Object_or_collection_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_or_collection_initializer(this);
}

CSharpParser::Object_or_collection_initializerContext* CSharpParser::object_or_collection_initializer() {
  Object_or_collection_initializerContext *_localctx = _tracker.createInstance<Object_or_collection_initializerContext>(_ctx, getState());
  enterRule(_localctx, 88, CSharpParser::RuleObject_or_collection_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(966);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(964);
      object_initializer();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(965);
      collection_initializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_initializerContext ------------------------------------------------------------------

CSharpParser::Object_initializerContext::Object_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Object_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Object_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Member_initializer_listContext* CSharpParser::Object_initializerContext::member_initializer_list() {
  return getRuleContext<CSharpParser::Member_initializer_listContext>(0);
}

tree::TerminalNode* CSharpParser::Object_initializerContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Object_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleObject_initializer;
}

void CSharpParser::Object_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_initializer(this);
}

void CSharpParser::Object_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_initializer(this);
}

CSharpParser::Object_initializerContext* CSharpParser::object_initializer() {
  Object_initializerContext *_localctx = _tracker.createInstance<Object_initializerContext>(_ctx, getState());
  enterRule(_localctx, 90, CSharpParser::RuleObject_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968);
    match(CSharpParser::OPEN_BRACE);
    setState(973);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 64)))) != 0)) {
      setState(969);
      member_initializer_list();
      setState(971);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(970);
        match(CSharpParser::COMMA);
      }
    }
    setState(975);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_initializer_listContext ------------------------------------------------------------------

CSharpParser::Member_initializer_listContext::Member_initializer_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Member_initializerContext *> CSharpParser::Member_initializer_listContext::member_initializer() {
  return getRuleContexts<CSharpParser::Member_initializerContext>();
}

CSharpParser::Member_initializerContext* CSharpParser::Member_initializer_listContext::member_initializer(size_t i) {
  return getRuleContext<CSharpParser::Member_initializerContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Member_initializer_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Member_initializer_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Member_initializer_listContext::getRuleIndex() const {
  return CSharpParser::RuleMember_initializer_list;
}

void CSharpParser::Member_initializer_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_initializer_list(this);
}

void CSharpParser::Member_initializer_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_initializer_list(this);
}

CSharpParser::Member_initializer_listContext* CSharpParser::member_initializer_list() {
  Member_initializer_listContext *_localctx = _tracker.createInstance<Member_initializer_listContext>(_ctx, getState());
  enterRule(_localctx, 92, CSharpParser::RuleMember_initializer_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(977);
    member_initializer();
    setState(982);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(978);
        match(CSharpParser::COMMA);
        setState(979);
        member_initializer(); 
      }
      setState(984);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_initializerContext ------------------------------------------------------------------

CSharpParser::Member_initializerContext::Member_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Member_initializerContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Initializer_valueContext* CSharpParser::Member_initializerContext::initializer_value() {
  return getRuleContext<CSharpParser::Initializer_valueContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Member_initializerContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Member_initializerContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Member_initializerContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Member_initializerContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}


size_t CSharpParser::Member_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleMember_initializer;
}

void CSharpParser::Member_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_initializer(this);
}

void CSharpParser::Member_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_initializer(this);
}

CSharpParser::Member_initializerContext* CSharpParser::member_initializer() {
  Member_initializerContext *_localctx = _tracker.createInstance<Member_initializerContext>(_ctx, getState());
  enterRule(_localctx, 94, CSharpParser::RuleMember_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BY:
      case CSharpParser::DESCENDING:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::NAMEOF:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::UNMANAGED:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER: {
        setState(985);
        identifier();
        break;
      }

      case CSharpParser::OPEN_BRACKET: {
        setState(986);
        match(CSharpParser::OPEN_BRACKET);
        setState(987);
        expression();
        setState(988);
        match(CSharpParser::CLOSE_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(992);
    match(CSharpParser::ASSIGNMENT);
    setState(993);
    initializer_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initializer_valueContext ------------------------------------------------------------------

CSharpParser::Initializer_valueContext::Initializer_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Initializer_valueContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Object_or_collection_initializerContext* CSharpParser::Initializer_valueContext::object_or_collection_initializer() {
  return getRuleContext<CSharpParser::Object_or_collection_initializerContext>(0);
}


size_t CSharpParser::Initializer_valueContext::getRuleIndex() const {
  return CSharpParser::RuleInitializer_value;
}

void CSharpParser::Initializer_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer_value(this);
}

void CSharpParser::Initializer_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer_value(this);
}

CSharpParser::Initializer_valueContext* CSharpParser::initializer_value() {
  Initializer_valueContext *_localctx = _tracker.createInstance<Initializer_valueContext>(_ctx, getState());
  enterRule(_localctx, 96, CSharpParser::RuleInitializer_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(997);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(995);
        expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(996);
        object_or_collection_initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collection_initializerContext ------------------------------------------------------------------

CSharpParser::Collection_initializerContext::Collection_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Collection_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

std::vector<CSharpParser::Element_initializerContext *> CSharpParser::Collection_initializerContext::element_initializer() {
  return getRuleContexts<CSharpParser::Element_initializerContext>();
}

CSharpParser::Element_initializerContext* CSharpParser::Collection_initializerContext::element_initializer(size_t i) {
  return getRuleContext<CSharpParser::Element_initializerContext>(i);
}

tree::TerminalNode* CSharpParser::Collection_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Collection_initializerContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Collection_initializerContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Collection_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleCollection_initializer;
}

void CSharpParser::Collection_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollection_initializer(this);
}

void CSharpParser::Collection_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollection_initializer(this);
}

CSharpParser::Collection_initializerContext* CSharpParser::collection_initializer() {
  Collection_initializerContext *_localctx = _tracker.createInstance<Collection_initializerContext>(_ctx, getState());
  enterRule(_localctx, 98, CSharpParser::RuleCollection_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(999);
    match(CSharpParser::OPEN_BRACE);
    setState(1000);
    element_initializer();
    setState(1005);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1001);
        match(CSharpParser::COMMA);
        setState(1002);
        element_initializer(); 
      }
      setState(1007);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    }
    setState(1009);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COMMA) {
      setState(1008);
      match(CSharpParser::COMMA);
    }
    setState(1011);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_initializerContext ------------------------------------------------------------------

CSharpParser::Element_initializerContext::Element_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Non_assignment_expressionContext* CSharpParser::Element_initializerContext::non_assignment_expression() {
  return getRuleContext<CSharpParser::Non_assignment_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Element_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Expression_listContext* CSharpParser::Element_initializerContext::expression_list() {
  return getRuleContext<CSharpParser::Expression_listContext>(0);
}

tree::TerminalNode* CSharpParser::Element_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}


size_t CSharpParser::Element_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleElement_initializer;
}

void CSharpParser::Element_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_initializer(this);
}

void CSharpParser::Element_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_initializer(this);
}

CSharpParser::Element_initializerContext* CSharpParser::element_initializer() {
  Element_initializerContext *_localctx = _tracker.createInstance<Element_initializerContext>(_ctx, getState());
  enterRule(_localctx, 100, CSharpParser::RuleElement_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1018);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(1013);
        non_assignment_expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1014);
        match(CSharpParser::OPEN_BRACE);
        setState(1015);
        expression_list();
        setState(1016);
        match(CSharpParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Anonymous_object_initializerContext ------------------------------------------------------------------

CSharpParser::Anonymous_object_initializerContext::Anonymous_object_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Anonymous_object_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Anonymous_object_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Member_declarator_listContext* CSharpParser::Anonymous_object_initializerContext::member_declarator_list() {
  return getRuleContext<CSharpParser::Member_declarator_listContext>(0);
}

tree::TerminalNode* CSharpParser::Anonymous_object_initializerContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Anonymous_object_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleAnonymous_object_initializer;
}

void CSharpParser::Anonymous_object_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_object_initializer(this);
}

void CSharpParser::Anonymous_object_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_object_initializer(this);
}

CSharpParser::Anonymous_object_initializerContext* CSharpParser::anonymous_object_initializer() {
  Anonymous_object_initializerContext *_localctx = _tracker.createInstance<Anonymous_object_initializerContext>(_ctx, getState());
  enterRule(_localctx, 102, CSharpParser::RuleAnonymous_object_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1020);
    match(CSharpParser::OPEN_BRACE);
    setState(1025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
      | (1ULL << (CSharpParser::ALIAS - 10))
      | (1ULL << (CSharpParser::ARGLIST - 10))
      | (1ULL << (CSharpParser::ASCENDING - 10))
      | (1ULL << (CSharpParser::ASYNC - 10))
      | (1ULL << (CSharpParser::AWAIT - 10))
      | (1ULL << (CSharpParser::BASE - 10))
      | (1ULL << (CSharpParser::BOOL - 10))
      | (1ULL << (CSharpParser::BY - 10))
      | (1ULL << (CSharpParser::BYTE - 10))
      | (1ULL << (CSharpParser::CHAR - 10))
      | (1ULL << (CSharpParser::CHECKED - 10))
      | (1ULL << (CSharpParser::DECIMAL - 10))
      | (1ULL << (CSharpParser::DEFAULT - 10))
      | (1ULL << (CSharpParser::DELEGATE - 10))
      | (1ULL << (CSharpParser::DESCENDING - 10))
      | (1ULL << (CSharpParser::DOUBLE - 10))
      | (1ULL << (CSharpParser::DYNAMIC - 10))
      | (1ULL << (CSharpParser::EQUALS - 10))
      | (1ULL << (CSharpParser::FALSE - 10))
      | (1ULL << (CSharpParser::FLOAT - 10))
      | (1ULL << (CSharpParser::FROM - 10))
      | (1ULL << (CSharpParser::GET - 10))
      | (1ULL << (CSharpParser::GROUP - 10))
      | (1ULL << (CSharpParser::INT - 10))
      | (1ULL << (CSharpParser::INTO - 10))
      | (1ULL << (CSharpParser::JOIN - 10))
      | (1ULL << (CSharpParser::LET - 10))
      | (1ULL << (CSharpParser::LONG - 10))
      | (1ULL << (CSharpParser::NAMEOF - 10))
      | (1ULL << (CSharpParser::NEW - 10))
      | (1ULL << (CSharpParser::NULL - 10))
      | (1ULL << (CSharpParser::OBJECT - 10))
      | (1ULL << (CSharpParser::ON - 10))
      | (1ULL << (CSharpParser::ORDERBY - 10)))) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & ((1ULL << (CSharpParser::PARTIAL - 75))
      | (1ULL << (CSharpParser::REMOVE - 75))
      | (1ULL << (CSharpParser::SBYTE - 75))
      | (1ULL << (CSharpParser::SELECT - 75))
      | (1ULL << (CSharpParser::SET - 75))
      | (1ULL << (CSharpParser::SHORT - 75))
      | (1ULL << (CSharpParser::SIZEOF - 75))
      | (1ULL << (CSharpParser::STRING - 75))
      | (1ULL << (CSharpParser::THIS - 75))
      | (1ULL << (CSharpParser::TRUE - 75))
      | (1ULL << (CSharpParser::TYPEOF - 75))
      | (1ULL << (CSharpParser::UINT - 75))
      | (1ULL << (CSharpParser::ULONG - 75))
      | (1ULL << (CSharpParser::UNCHECKED - 75))
      | (1ULL << (CSharpParser::UNMANAGED - 75))
      | (1ULL << (CSharpParser::USHORT - 75))
      | (1ULL << (CSharpParser::VAR - 75))
      | (1ULL << (CSharpParser::WHEN - 75))
      | (1ULL << (CSharpParser::WHERE - 75))
      | (1ULL << (CSharpParser::YIELD - 75))
      | (1ULL << (CSharpParser::IDENTIFIER - 75))
      | (1ULL << (CSharpParser::LITERAL_ACCESS - 75))
      | (1ULL << (CSharpParser::INTEGER_LITERAL - 75))
      | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 75))
      | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 75))
      | (1ULL << (CSharpParser::REAL_LITERAL - 75))
      | (1ULL << (CSharpParser::CHARACTER_LITERAL - 75))
      | (1ULL << (CSharpParser::REGULAR_STRING - 75))
      | (1ULL << (CSharpParser::VERBATIUM_STRING - 75))
      | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 75))
      | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 75))
      | (1ULL << (CSharpParser::OPEN_PARENS - 75)))) != 0)) {
      setState(1021);
      member_declarator_list();
      setState(1023);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(1022);
        match(CSharpParser::COMMA);
      }
    }
    setState(1027);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_declarator_listContext ------------------------------------------------------------------

CSharpParser::Member_declarator_listContext::Member_declarator_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Member_declaratorContext *> CSharpParser::Member_declarator_listContext::member_declarator() {
  return getRuleContexts<CSharpParser::Member_declaratorContext>();
}

CSharpParser::Member_declaratorContext* CSharpParser::Member_declarator_listContext::member_declarator(size_t i) {
  return getRuleContext<CSharpParser::Member_declaratorContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Member_declarator_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Member_declarator_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Member_declarator_listContext::getRuleIndex() const {
  return CSharpParser::RuleMember_declarator_list;
}

void CSharpParser::Member_declarator_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_declarator_list(this);
}

void CSharpParser::Member_declarator_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_declarator_list(this);
}

CSharpParser::Member_declarator_listContext* CSharpParser::member_declarator_list() {
  Member_declarator_listContext *_localctx = _tracker.createInstance<Member_declarator_listContext>(_ctx, getState());
  enterRule(_localctx, 104, CSharpParser::RuleMember_declarator_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1029);
    member_declarator();
    setState(1034);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1030);
        match(CSharpParser::COMMA);
        setState(1031);
        member_declarator(); 
      }
      setState(1036);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_declaratorContext ------------------------------------------------------------------

CSharpParser::Member_declaratorContext::Member_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Primary_expressionContext* CSharpParser::Member_declaratorContext::primary_expression() {
  return getRuleContext<CSharpParser::Primary_expressionContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Member_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Member_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Member_declaratorContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Member_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleMember_declarator;
}

void CSharpParser::Member_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_declarator(this);
}

void CSharpParser::Member_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_declarator(this);
}

CSharpParser::Member_declaratorContext* CSharpParser::member_declarator() {
  Member_declaratorContext *_localctx = _tracker.createInstance<Member_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 106, CSharpParser::RuleMember_declarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1042);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1037);
      primary_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1038);
      identifier();
      setState(1039);
      match(CSharpParser::ASSIGNMENT);
      setState(1040);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unbound_type_nameContext ------------------------------------------------------------------

CSharpParser::Unbound_type_nameContext::Unbound_type_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Unbound_type_nameContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Unbound_type_nameContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::Unbound_type_nameContext::DOUBLE_COLON() {
  return getToken(CSharpParser::DOUBLE_COLON, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Unbound_type_nameContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::Unbound_type_nameContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}

std::vector<CSharpParser::Generic_dimension_specifierContext *> CSharpParser::Unbound_type_nameContext::generic_dimension_specifier() {
  return getRuleContexts<CSharpParser::Generic_dimension_specifierContext>();
}

CSharpParser::Generic_dimension_specifierContext* CSharpParser::Unbound_type_nameContext::generic_dimension_specifier(size_t i) {
  return getRuleContext<CSharpParser::Generic_dimension_specifierContext>(i);
}


size_t CSharpParser::Unbound_type_nameContext::getRuleIndex() const {
  return CSharpParser::RuleUnbound_type_name;
}

void CSharpParser::Unbound_type_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnbound_type_name(this);
}

void CSharpParser::Unbound_type_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnbound_type_name(this);
}

CSharpParser::Unbound_type_nameContext* CSharpParser::unbound_type_name() {
  Unbound_type_nameContext *_localctx = _tracker.createInstance<Unbound_type_nameContext>(_ctx, getState());
  enterRule(_localctx, 108, CSharpParser::RuleUnbound_type_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1044);
    identifier();
    setState(1053);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::CLOSE_PARENS:
      case CSharpParser::DOT:
      case CSharpParser::LT: {
        setState(1046);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::LT) {
          setState(1045);
          generic_dimension_specifier();
        }
        break;
      }

      case CSharpParser::DOUBLE_COLON: {
        setState(1048);
        match(CSharpParser::DOUBLE_COLON);
        setState(1049);
        identifier();
        setState(1051);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::LT) {
          setState(1050);
          generic_dimension_specifier();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1062);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::DOT) {
      setState(1055);
      match(CSharpParser::DOT);
      setState(1056);
      identifier();
      setState(1058);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::LT) {
        setState(1057);
        generic_dimension_specifier();
      }
      setState(1064);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_dimension_specifierContext ------------------------------------------------------------------

CSharpParser::Generic_dimension_specifierContext::Generic_dimension_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Generic_dimension_specifierContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

tree::TerminalNode* CSharpParser::Generic_dimension_specifierContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Generic_dimension_specifierContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Generic_dimension_specifierContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Generic_dimension_specifierContext::getRuleIndex() const {
  return CSharpParser::RuleGeneric_dimension_specifier;
}

void CSharpParser::Generic_dimension_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_dimension_specifier(this);
}

void CSharpParser::Generic_dimension_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_dimension_specifier(this);
}

CSharpParser::Generic_dimension_specifierContext* CSharpParser::generic_dimension_specifier() {
  Generic_dimension_specifierContext *_localctx = _tracker.createInstance<Generic_dimension_specifierContext>(_ctx, getState());
  enterRule(_localctx, 110, CSharpParser::RuleGeneric_dimension_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1065);
    match(CSharpParser::LT);
    setState(1069);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1066);
      match(CSharpParser::COMMA);
      setState(1071);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1072);
    match(CSharpParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsTypeContext ------------------------------------------------------------------

CSharpParser::IsTypeContext::IsTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Base_typeContext* CSharpParser::IsTypeContext::base_type() {
  return getRuleContext<CSharpParser::Base_typeContext>(0);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::IsTypeContext::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::IsTypeContext::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::IsTypeContext::STAR() {
  return getTokens(CSharpParser::STAR);
}

tree::TerminalNode* CSharpParser::IsTypeContext::STAR(size_t i) {
  return getToken(CSharpParser::STAR, i);
}

tree::TerminalNode* CSharpParser::IsTypeContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

CSharpParser::IsTypePatternArmsContext* CSharpParser::IsTypeContext::isTypePatternArms() {
  return getRuleContext<CSharpParser::IsTypePatternArmsContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::IsTypeContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::IsTypeContext::getRuleIndex() const {
  return CSharpParser::RuleIsType;
}

void CSharpParser::IsTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsType(this);
}

void CSharpParser::IsTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsType(this);
}

CSharpParser::IsTypeContext* CSharpParser::isType() {
  IsTypeContext *_localctx = _tracker.createInstance<IsTypeContext>(_ctx, getState());
  enterRule(_localctx, 112, CSharpParser::RuleIsType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1074);
    base_type();
    setState(1079);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1077);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::OPEN_BRACKET: {
            setState(1075);
            rank_specifier();
            break;
          }

          case CSharpParser::STAR: {
            setState(1076);
            match(CSharpParser::STAR);
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(1081);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    }
    setState(1083);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(1082);
      match(CSharpParser::INTERR);
      break;
    }

    default:
      break;
    }
    setState(1086);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACE) {
      setState(1085);
      isTypePatternArms();
    }
    setState(1089);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      setState(1088);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsTypePatternArmsContext ------------------------------------------------------------------

CSharpParser::IsTypePatternArmsContext::IsTypePatternArmsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::IsTypePatternArmsContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

std::vector<CSharpParser::IsTypePatternArmContext *> CSharpParser::IsTypePatternArmsContext::isTypePatternArm() {
  return getRuleContexts<CSharpParser::IsTypePatternArmContext>();
}

CSharpParser::IsTypePatternArmContext* CSharpParser::IsTypePatternArmsContext::isTypePatternArm(size_t i) {
  return getRuleContext<CSharpParser::IsTypePatternArmContext>(i);
}

tree::TerminalNode* CSharpParser::IsTypePatternArmsContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::IsTypePatternArmsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::IsTypePatternArmsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::IsTypePatternArmsContext::getRuleIndex() const {
  return CSharpParser::RuleIsTypePatternArms;
}

void CSharpParser::IsTypePatternArmsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsTypePatternArms(this);
}

void CSharpParser::IsTypePatternArmsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsTypePatternArms(this);
}

CSharpParser::IsTypePatternArmsContext* CSharpParser::isTypePatternArms() {
  IsTypePatternArmsContext *_localctx = _tracker.createInstance<IsTypePatternArmsContext>(_ctx, getState());
  enterRule(_localctx, 114, CSharpParser::RuleIsTypePatternArms);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1091);
    match(CSharpParser::OPEN_BRACE);
    setState(1092);
    isTypePatternArm();
    setState(1097);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1093);
      match(CSharpParser::COMMA);
      setState(1094);
      isTypePatternArm();
      setState(1099);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1100);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsTypePatternArmContext ------------------------------------------------------------------

CSharpParser::IsTypePatternArmContext::IsTypePatternArmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::IsTypePatternArmContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::IsTypePatternArmContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::ExpressionContext* CSharpParser::IsTypePatternArmContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::IsTypePatternArmContext::getRuleIndex() const {
  return CSharpParser::RuleIsTypePatternArm;
}

void CSharpParser::IsTypePatternArmContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsTypePatternArm(this);
}

void CSharpParser::IsTypePatternArmContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsTypePatternArm(this);
}

CSharpParser::IsTypePatternArmContext* CSharpParser::isTypePatternArm() {
  IsTypePatternArmContext *_localctx = _tracker.createInstance<IsTypePatternArmContext>(_ctx, getState());
  enterRule(_localctx, 116, CSharpParser::RuleIsTypePatternArm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1102);
    identifier();
    setState(1103);
    match(CSharpParser::COLON);
    setState(1104);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_expressionContext ------------------------------------------------------------------

CSharpParser::Lambda_expressionContext::Lambda_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Anonymous_function_signatureContext* CSharpParser::Lambda_expressionContext::anonymous_function_signature() {
  return getRuleContext<CSharpParser::Anonymous_function_signatureContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Lambda_expressionContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Anonymous_function_bodyContext* CSharpParser::Lambda_expressionContext::anonymous_function_body() {
  return getRuleContext<CSharpParser::Anonymous_function_bodyContext>(0);
}

tree::TerminalNode* CSharpParser::Lambda_expressionContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}


size_t CSharpParser::Lambda_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleLambda_expression;
}

void CSharpParser::Lambda_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambda_expression(this);
}

void CSharpParser::Lambda_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambda_expression(this);
}

CSharpParser::Lambda_expressionContext* CSharpParser::lambda_expression() {
  Lambda_expressionContext *_localctx = _tracker.createInstance<Lambda_expressionContext>(_ctx, getState());
  enterRule(_localctx, 118, CSharpParser::RuleLambda_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1107);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      setState(1106);
      match(CSharpParser::ASYNC);
      break;
    }

    default:
      break;
    }
    setState(1109);
    anonymous_function_signature();
    setState(1110);
    right_arrow();
    setState(1111);
    anonymous_function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Anonymous_function_signatureContext ------------------------------------------------------------------

CSharpParser::Anonymous_function_signatureContext::Anonymous_function_signatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Anonymous_function_signatureContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Anonymous_function_signatureContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Explicit_anonymous_function_parameter_listContext* CSharpParser::Anonymous_function_signatureContext::explicit_anonymous_function_parameter_list() {
  return getRuleContext<CSharpParser::Explicit_anonymous_function_parameter_listContext>(0);
}

CSharpParser::Implicit_anonymous_function_parameter_listContext* CSharpParser::Anonymous_function_signatureContext::implicit_anonymous_function_parameter_list() {
  return getRuleContext<CSharpParser::Implicit_anonymous_function_parameter_listContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Anonymous_function_signatureContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::Anonymous_function_signatureContext::getRuleIndex() const {
  return CSharpParser::RuleAnonymous_function_signature;
}

void CSharpParser::Anonymous_function_signatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_function_signature(this);
}

void CSharpParser::Anonymous_function_signatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_function_signature(this);
}

CSharpParser::Anonymous_function_signatureContext* CSharpParser::anonymous_function_signature() {
  Anonymous_function_signatureContext *_localctx = _tracker.createInstance<Anonymous_function_signatureContext>(_ctx, getState());
  enterRule(_localctx, 120, CSharpParser::RuleAnonymous_function_signature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1124);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1113);
      match(CSharpParser::OPEN_PARENS);
      setState(1114);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1115);
      match(CSharpParser::OPEN_PARENS);
      setState(1116);
      explicit_anonymous_function_parameter_list();
      setState(1117);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1119);
      match(CSharpParser::OPEN_PARENS);
      setState(1120);
      implicit_anonymous_function_parameter_list();
      setState(1121);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1123);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explicit_anonymous_function_parameter_listContext ------------------------------------------------------------------

CSharpParser::Explicit_anonymous_function_parameter_listContext::Explicit_anonymous_function_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Explicit_anonymous_function_parameterContext *> CSharpParser::Explicit_anonymous_function_parameter_listContext::explicit_anonymous_function_parameter() {
  return getRuleContexts<CSharpParser::Explicit_anonymous_function_parameterContext>();
}

CSharpParser::Explicit_anonymous_function_parameterContext* CSharpParser::Explicit_anonymous_function_parameter_listContext::explicit_anonymous_function_parameter(size_t i) {
  return getRuleContext<CSharpParser::Explicit_anonymous_function_parameterContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Explicit_anonymous_function_parameter_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Explicit_anonymous_function_parameter_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Explicit_anonymous_function_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleExplicit_anonymous_function_parameter_list;
}

void CSharpParser::Explicit_anonymous_function_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicit_anonymous_function_parameter_list(this);
}

void CSharpParser::Explicit_anonymous_function_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicit_anonymous_function_parameter_list(this);
}

CSharpParser::Explicit_anonymous_function_parameter_listContext* CSharpParser::explicit_anonymous_function_parameter_list() {
  Explicit_anonymous_function_parameter_listContext *_localctx = _tracker.createInstance<Explicit_anonymous_function_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 122, CSharpParser::RuleExplicit_anonymous_function_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1126);
    explicit_anonymous_function_parameter();
    setState(1131);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1127);
      match(CSharpParser::COMMA);
      setState(1128);
      explicit_anonymous_function_parameter();
      setState(1133);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explicit_anonymous_function_parameterContext ------------------------------------------------------------------

CSharpParser::Explicit_anonymous_function_parameterContext::Explicit_anonymous_function_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Explicit_anonymous_function_parameterContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Explicit_anonymous_function_parameterContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Explicit_anonymous_function_parameterContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Explicit_anonymous_function_parameterContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}

tree::TerminalNode* CSharpParser::Explicit_anonymous_function_parameterContext::IN() {
  return getToken(CSharpParser::IN, 0);
}


size_t CSharpParser::Explicit_anonymous_function_parameterContext::getRuleIndex() const {
  return CSharpParser::RuleExplicit_anonymous_function_parameter;
}

void CSharpParser::Explicit_anonymous_function_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicit_anonymous_function_parameter(this);
}

void CSharpParser::Explicit_anonymous_function_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicit_anonymous_function_parameter(this);
}

CSharpParser::Explicit_anonymous_function_parameterContext* CSharpParser::explicit_anonymous_function_parameter() {
  Explicit_anonymous_function_parameterContext *_localctx = _tracker.createInstance<Explicit_anonymous_function_parameterContext>(_ctx, getState());
  enterRule(_localctx, 124, CSharpParser::RuleExplicit_anonymous_function_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 54) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 54)) & ((1ULL << (CSharpParser::IN - 54))
      | (1ULL << (CSharpParser::OUT - 54))
      | (1ULL << (CSharpParser::REF - 54)))) != 0)) {
      setState(1134);
      dynamic_cast<Explicit_anonymous_function_parameterContext *>(_localctx)->refout = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 54) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 54)) & ((1ULL << (CSharpParser::IN - 54))
        | (1ULL << (CSharpParser::OUT - 54))
        | (1ULL << (CSharpParser::REF - 54)))) != 0))) {
        dynamic_cast<Explicit_anonymous_function_parameterContext *>(_localctx)->refout = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1137);
    type_();
    setState(1138);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Implicit_anonymous_function_parameter_listContext ------------------------------------------------------------------

CSharpParser::Implicit_anonymous_function_parameter_listContext::Implicit_anonymous_function_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Implicit_anonymous_function_parameter_listContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Implicit_anonymous_function_parameter_listContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Implicit_anonymous_function_parameter_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Implicit_anonymous_function_parameter_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Implicit_anonymous_function_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleImplicit_anonymous_function_parameter_list;
}

void CSharpParser::Implicit_anonymous_function_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplicit_anonymous_function_parameter_list(this);
}

void CSharpParser::Implicit_anonymous_function_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplicit_anonymous_function_parameter_list(this);
}

CSharpParser::Implicit_anonymous_function_parameter_listContext* CSharpParser::implicit_anonymous_function_parameter_list() {
  Implicit_anonymous_function_parameter_listContext *_localctx = _tracker.createInstance<Implicit_anonymous_function_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 126, CSharpParser::RuleImplicit_anonymous_function_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1140);
    identifier();
    setState(1145);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1141);
      match(CSharpParser::COMMA);
      setState(1142);
      identifier();
      setState(1147);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Anonymous_function_bodyContext ------------------------------------------------------------------

CSharpParser::Anonymous_function_bodyContext::Anonymous_function_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Throwable_expressionContext* CSharpParser::Anonymous_function_bodyContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

CSharpParser::BlockContext* CSharpParser::Anonymous_function_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}


size_t CSharpParser::Anonymous_function_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleAnonymous_function_body;
}

void CSharpParser::Anonymous_function_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_function_body(this);
}

void CSharpParser::Anonymous_function_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_function_body(this);
}

CSharpParser::Anonymous_function_bodyContext* CSharpParser::anonymous_function_body() {
  Anonymous_function_bodyContext *_localctx = _tracker.createInstance<Anonymous_function_bodyContext>(_ctx, getState());
  enterRule(_localctx, 128, CSharpParser::RuleAnonymous_function_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1150);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::THROW:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(1148);
        throwable_expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1149);
        block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_expressionContext ------------------------------------------------------------------

CSharpParser::Query_expressionContext::Query_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::From_clauseContext* CSharpParser::Query_expressionContext::from_clause() {
  return getRuleContext<CSharpParser::From_clauseContext>(0);
}

CSharpParser::Query_bodyContext* CSharpParser::Query_expressionContext::query_body() {
  return getRuleContext<CSharpParser::Query_bodyContext>(0);
}


size_t CSharpParser::Query_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleQuery_expression;
}

void CSharpParser::Query_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_expression(this);
}

void CSharpParser::Query_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_expression(this);
}

CSharpParser::Query_expressionContext* CSharpParser::query_expression() {
  Query_expressionContext *_localctx = _tracker.createInstance<Query_expressionContext>(_ctx, getState());
  enterRule(_localctx, 130, CSharpParser::RuleQuery_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1152);
    from_clause();
    setState(1153);
    query_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_clauseContext ------------------------------------------------------------------

CSharpParser::From_clauseContext::From_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::From_clauseContext::FROM() {
  return getToken(CSharpParser::FROM, 0);
}

CSharpParser::IdentifierContext* CSharpParser::From_clauseContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::From_clauseContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

CSharpParser::ExpressionContext* CSharpParser::From_clauseContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Type_Context* CSharpParser::From_clauseContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}


size_t CSharpParser::From_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleFrom_clause;
}

void CSharpParser::From_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_clause(this);
}

void CSharpParser::From_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_clause(this);
}

CSharpParser::From_clauseContext* CSharpParser::from_clause() {
  From_clauseContext *_localctx = _tracker.createInstance<From_clauseContext>(_ctx, getState());
  enterRule(_localctx, 132, CSharpParser::RuleFrom_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1155);
    match(CSharpParser::FROM);
    setState(1157);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      setState(1156);
      type_();
      break;
    }

    default:
      break;
    }
    setState(1159);
    identifier();
    setState(1160);
    match(CSharpParser::IN);
    setState(1161);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_bodyContext ------------------------------------------------------------------

CSharpParser::Query_bodyContext::Query_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Select_or_group_clauseContext* CSharpParser::Query_bodyContext::select_or_group_clause() {
  return getRuleContext<CSharpParser::Select_or_group_clauseContext>(0);
}

std::vector<CSharpParser::Query_body_clauseContext *> CSharpParser::Query_bodyContext::query_body_clause() {
  return getRuleContexts<CSharpParser::Query_body_clauseContext>();
}

CSharpParser::Query_body_clauseContext* CSharpParser::Query_bodyContext::query_body_clause(size_t i) {
  return getRuleContext<CSharpParser::Query_body_clauseContext>(i);
}

CSharpParser::Query_continuationContext* CSharpParser::Query_bodyContext::query_continuation() {
  return getRuleContext<CSharpParser::Query_continuationContext>(0);
}


size_t CSharpParser::Query_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleQuery_body;
}

void CSharpParser::Query_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_body(this);
}

void CSharpParser::Query_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_body(this);
}

CSharpParser::Query_bodyContext* CSharpParser::query_body() {
  Query_bodyContext *_localctx = _tracker.createInstance<Query_bodyContext>(_ctx, getState());
  enterRule(_localctx, 134, CSharpParser::RuleQuery_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1166);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & ((1ULL << (CSharpParser::FROM - 48))
      | (1ULL << (CSharpParser::JOIN - 48))
      | (1ULL << (CSharpParser::LET - 48))
      | (1ULL << (CSharpParser::ORDERBY - 48))
      | (1ULL << (CSharpParser::WHERE - 48)))) != 0)) {
      setState(1163);
      query_body_clause();
      setState(1168);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1169);
    select_or_group_clause();
    setState(1171);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(1170);
      query_continuation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_body_clauseContext ------------------------------------------------------------------

CSharpParser::Query_body_clauseContext::Query_body_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::From_clauseContext* CSharpParser::Query_body_clauseContext::from_clause() {
  return getRuleContext<CSharpParser::From_clauseContext>(0);
}

CSharpParser::Let_clauseContext* CSharpParser::Query_body_clauseContext::let_clause() {
  return getRuleContext<CSharpParser::Let_clauseContext>(0);
}

CSharpParser::Where_clauseContext* CSharpParser::Query_body_clauseContext::where_clause() {
  return getRuleContext<CSharpParser::Where_clauseContext>(0);
}

CSharpParser::Combined_join_clauseContext* CSharpParser::Query_body_clauseContext::combined_join_clause() {
  return getRuleContext<CSharpParser::Combined_join_clauseContext>(0);
}

CSharpParser::Orderby_clauseContext* CSharpParser::Query_body_clauseContext::orderby_clause() {
  return getRuleContext<CSharpParser::Orderby_clauseContext>(0);
}


size_t CSharpParser::Query_body_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleQuery_body_clause;
}

void CSharpParser::Query_body_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_body_clause(this);
}

void CSharpParser::Query_body_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_body_clause(this);
}

CSharpParser::Query_body_clauseContext* CSharpParser::query_body_clause() {
  Query_body_clauseContext *_localctx = _tracker.createInstance<Query_body_clauseContext>(_ctx, getState());
  enterRule(_localctx, 136, CSharpParser::RuleQuery_body_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1178);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::FROM: {
        enterOuterAlt(_localctx, 1);
        setState(1173);
        from_clause();
        break;
      }

      case CSharpParser::LET: {
        enterOuterAlt(_localctx, 2);
        setState(1174);
        let_clause();
        break;
      }

      case CSharpParser::WHERE: {
        enterOuterAlt(_localctx, 3);
        setState(1175);
        where_clause();
        break;
      }

      case CSharpParser::JOIN: {
        enterOuterAlt(_localctx, 4);
        setState(1176);
        combined_join_clause();
        break;
      }

      case CSharpParser::ORDERBY: {
        enterOuterAlt(_localctx, 5);
        setState(1177);
        orderby_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Let_clauseContext ------------------------------------------------------------------

CSharpParser::Let_clauseContext::Let_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Let_clauseContext::LET() {
  return getToken(CSharpParser::LET, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Let_clauseContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Let_clauseContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Let_clauseContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Let_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleLet_clause;
}

void CSharpParser::Let_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLet_clause(this);
}

void CSharpParser::Let_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLet_clause(this);
}

CSharpParser::Let_clauseContext* CSharpParser::let_clause() {
  Let_clauseContext *_localctx = _tracker.createInstance<Let_clauseContext>(_ctx, getState());
  enterRule(_localctx, 138, CSharpParser::RuleLet_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1180);
    match(CSharpParser::LET);
    setState(1181);
    identifier();
    setState(1182);
    match(CSharpParser::ASSIGNMENT);
    setState(1183);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Where_clauseContext ------------------------------------------------------------------

CSharpParser::Where_clauseContext::Where_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Where_clauseContext::WHERE() {
  return getToken(CSharpParser::WHERE, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Where_clauseContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Where_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleWhere_clause;
}

void CSharpParser::Where_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhere_clause(this);
}

void CSharpParser::Where_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhere_clause(this);
}

CSharpParser::Where_clauseContext* CSharpParser::where_clause() {
  Where_clauseContext *_localctx = _tracker.createInstance<Where_clauseContext>(_ctx, getState());
  enterRule(_localctx, 140, CSharpParser::RuleWhere_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1185);
    match(CSharpParser::WHERE);
    setState(1186);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Combined_join_clauseContext ------------------------------------------------------------------

CSharpParser::Combined_join_clauseContext::Combined_join_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::JOIN() {
  return getToken(CSharpParser::JOIN, 0);
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Combined_join_clauseContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Combined_join_clauseContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Combined_join_clauseContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Combined_join_clauseContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::ON() {
  return getToken(CSharpParser::ON, 0);
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::EQUALS() {
  return getToken(CSharpParser::EQUALS, 0);
}

CSharpParser::Type_Context* CSharpParser::Combined_join_clauseContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::INTO() {
  return getToken(CSharpParser::INTO, 0);
}


size_t CSharpParser::Combined_join_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleCombined_join_clause;
}

void CSharpParser::Combined_join_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCombined_join_clause(this);
}

void CSharpParser::Combined_join_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCombined_join_clause(this);
}

CSharpParser::Combined_join_clauseContext* CSharpParser::combined_join_clause() {
  Combined_join_clauseContext *_localctx = _tracker.createInstance<Combined_join_clauseContext>(_ctx, getState());
  enterRule(_localctx, 142, CSharpParser::RuleCombined_join_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1188);
    match(CSharpParser::JOIN);
    setState(1190);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      setState(1189);
      type_();
      break;
    }

    default:
      break;
    }
    setState(1192);
    identifier();
    setState(1193);
    match(CSharpParser::IN);
    setState(1194);
    expression();
    setState(1195);
    match(CSharpParser::ON);
    setState(1196);
    expression();
    setState(1197);
    match(CSharpParser::EQUALS);
    setState(1198);
    expression();
    setState(1201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::INTO) {
      setState(1199);
      match(CSharpParser::INTO);
      setState(1200);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Orderby_clauseContext ------------------------------------------------------------------

CSharpParser::Orderby_clauseContext::Orderby_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Orderby_clauseContext::ORDERBY() {
  return getToken(CSharpParser::ORDERBY, 0);
}

std::vector<CSharpParser::OrderingContext *> CSharpParser::Orderby_clauseContext::ordering() {
  return getRuleContexts<CSharpParser::OrderingContext>();
}

CSharpParser::OrderingContext* CSharpParser::Orderby_clauseContext::ordering(size_t i) {
  return getRuleContext<CSharpParser::OrderingContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Orderby_clauseContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Orderby_clauseContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Orderby_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleOrderby_clause;
}

void CSharpParser::Orderby_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrderby_clause(this);
}

void CSharpParser::Orderby_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrderby_clause(this);
}

CSharpParser::Orderby_clauseContext* CSharpParser::orderby_clause() {
  Orderby_clauseContext *_localctx = _tracker.createInstance<Orderby_clauseContext>(_ctx, getState());
  enterRule(_localctx, 144, CSharpParser::RuleOrderby_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1203);
    match(CSharpParser::ORDERBY);
    setState(1204);
    ordering();
    setState(1209);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1205);
      match(CSharpParser::COMMA);
      setState(1206);
      ordering();
      setState(1211);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderingContext ------------------------------------------------------------------

CSharpParser::OrderingContext::OrderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::OrderingContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::OrderingContext::ASCENDING() {
  return getToken(CSharpParser::ASCENDING, 0);
}

tree::TerminalNode* CSharpParser::OrderingContext::DESCENDING() {
  return getToken(CSharpParser::DESCENDING, 0);
}


size_t CSharpParser::OrderingContext::getRuleIndex() const {
  return CSharpParser::RuleOrdering;
}

void CSharpParser::OrderingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrdering(this);
}

void CSharpParser::OrderingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrdering(this);
}

CSharpParser::OrderingContext* CSharpParser::ordering() {
  OrderingContext *_localctx = _tracker.createInstance<OrderingContext>(_ctx, getState());
  enterRule(_localctx, 146, CSharpParser::RuleOrdering);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1212);
    expression();
    setState(1214);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::ASCENDING

    || _la == CSharpParser::DESCENDING) {
      setState(1213);
      dynamic_cast<OrderingContext *>(_localctx)->dir = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == CSharpParser::ASCENDING

      || _la == CSharpParser::DESCENDING)) {
        dynamic_cast<OrderingContext *>(_localctx)->dir = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_or_group_clauseContext ------------------------------------------------------------------

CSharpParser::Select_or_group_clauseContext::Select_or_group_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Select_or_group_clauseContext::SELECT() {
  return getToken(CSharpParser::SELECT, 0);
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Select_or_group_clauseContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Select_or_group_clauseContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

tree::TerminalNode* CSharpParser::Select_or_group_clauseContext::GROUP() {
  return getToken(CSharpParser::GROUP, 0);
}

tree::TerminalNode* CSharpParser::Select_or_group_clauseContext::BY() {
  return getToken(CSharpParser::BY, 0);
}


size_t CSharpParser::Select_or_group_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleSelect_or_group_clause;
}

void CSharpParser::Select_or_group_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_or_group_clause(this);
}

void CSharpParser::Select_or_group_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_or_group_clause(this);
}

CSharpParser::Select_or_group_clauseContext* CSharpParser::select_or_group_clause() {
  Select_or_group_clauseContext *_localctx = _tracker.createInstance<Select_or_group_clauseContext>(_ctx, getState());
  enterRule(_localctx, 148, CSharpParser::RuleSelect_or_group_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1223);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::SELECT: {
        enterOuterAlt(_localctx, 1);
        setState(1216);
        match(CSharpParser::SELECT);
        setState(1217);
        expression();
        break;
      }

      case CSharpParser::GROUP: {
        enterOuterAlt(_localctx, 2);
        setState(1218);
        match(CSharpParser::GROUP);
        setState(1219);
        expression();
        setState(1220);
        match(CSharpParser::BY);
        setState(1221);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_continuationContext ------------------------------------------------------------------

CSharpParser::Query_continuationContext::Query_continuationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Query_continuationContext::INTO() {
  return getToken(CSharpParser::INTO, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Query_continuationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Query_bodyContext* CSharpParser::Query_continuationContext::query_body() {
  return getRuleContext<CSharpParser::Query_bodyContext>(0);
}


size_t CSharpParser::Query_continuationContext::getRuleIndex() const {
  return CSharpParser::RuleQuery_continuation;
}

void CSharpParser::Query_continuationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_continuation(this);
}

void CSharpParser::Query_continuationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_continuation(this);
}

CSharpParser::Query_continuationContext* CSharpParser::query_continuation() {
  Query_continuationContext *_localctx = _tracker.createInstance<Query_continuationContext>(_ctx, getState());
  enterRule(_localctx, 150, CSharpParser::RuleQuery_continuation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1225);
    match(CSharpParser::INTO);
    setState(1226);
    identifier();
    setState(1227);
    query_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

CSharpParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Labeled_StatementContext* CSharpParser::StatementContext::labeled_Statement() {
  return getRuleContext<CSharpParser::Labeled_StatementContext>(0);
}

CSharpParser::DeclarationStatementContext* CSharpParser::StatementContext::declarationStatement() {
  return getRuleContext<CSharpParser::DeclarationStatementContext>(0);
}

CSharpParser::Embedded_statementContext* CSharpParser::StatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}


size_t CSharpParser::StatementContext::getRuleIndex() const {
  return CSharpParser::RuleStatement;
}

void CSharpParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void CSharpParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

CSharpParser::StatementContext* CSharpParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 152, CSharpParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1232);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1229);
      labeled_Statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1230);
      declarationStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1231);
      embedded_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationStatementContext ------------------------------------------------------------------

CSharpParser::DeclarationStatementContext::DeclarationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_variable_declarationContext* CSharpParser::DeclarationStatementContext::local_variable_declaration() {
  return getRuleContext<CSharpParser::Local_variable_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::DeclarationStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Local_constant_declarationContext* CSharpParser::DeclarationStatementContext::local_constant_declaration() {
  return getRuleContext<CSharpParser::Local_constant_declarationContext>(0);
}

CSharpParser::Local_function_declarationContext* CSharpParser::DeclarationStatementContext::local_function_declaration() {
  return getRuleContext<CSharpParser::Local_function_declarationContext>(0);
}


size_t CSharpParser::DeclarationStatementContext::getRuleIndex() const {
  return CSharpParser::RuleDeclarationStatement;
}

void CSharpParser::DeclarationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationStatement(this);
}

void CSharpParser::DeclarationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationStatement(this);
}

CSharpParser::DeclarationStatementContext* CSharpParser::declarationStatement() {
  DeclarationStatementContext *_localctx = _tracker.createInstance<DeclarationStatementContext>(_ctx, getState());
  enterRule(_localctx, 154, CSharpParser::RuleDeclarationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1241);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1234);
      local_variable_declaration();
      setState(1235);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1237);
      local_constant_declaration();
      setState(1238);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1240);
      local_function_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_function_declarationContext ------------------------------------------------------------------

CSharpParser::Local_function_declarationContext::Local_function_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_function_headerContext* CSharpParser::Local_function_declarationContext::local_function_header() {
  return getRuleContext<CSharpParser::Local_function_headerContext>(0);
}

CSharpParser::Local_function_bodyContext* CSharpParser::Local_function_declarationContext::local_function_body() {
  return getRuleContext<CSharpParser::Local_function_bodyContext>(0);
}


size_t CSharpParser::Local_function_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_function_declaration;
}

void CSharpParser::Local_function_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_function_declaration(this);
}

void CSharpParser::Local_function_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_function_declaration(this);
}

CSharpParser::Local_function_declarationContext* CSharpParser::local_function_declaration() {
  Local_function_declarationContext *_localctx = _tracker.createInstance<Local_function_declarationContext>(_ctx, getState());
  enterRule(_localctx, 156, CSharpParser::RuleLocal_function_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1243);
    local_function_header();
    setState(1244);
    local_function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_function_headerContext ------------------------------------------------------------------

CSharpParser::Local_function_headerContext::Local_function_headerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Return_typeContext* CSharpParser::Local_function_headerContext::return_type() {
  return getRuleContext<CSharpParser::Return_typeContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Local_function_headerContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Local_function_headerContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Local_function_headerContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Local_function_modifiersContext* CSharpParser::Local_function_headerContext::local_function_modifiers() {
  return getRuleContext<CSharpParser::Local_function_modifiersContext>(0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Local_function_headerContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Local_function_headerContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Local_function_headerContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}


size_t CSharpParser::Local_function_headerContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_function_header;
}

void CSharpParser::Local_function_headerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_function_header(this);
}

void CSharpParser::Local_function_headerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_function_header(this);
}

CSharpParser::Local_function_headerContext* CSharpParser::local_function_header() {
  Local_function_headerContext *_localctx = _tracker.createInstance<Local_function_headerContext>(_ctx, getState());
  enterRule(_localctx, 158, CSharpParser::RuleLocal_function_header);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1247);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      setState(1246);
      local_function_modifiers();
      break;
    }

    default:
      break;
    }
    setState(1249);
    return_type();
    setState(1250);
    identifier();
    setState(1252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(1251);
      type_parameter_list();
    }
    setState(1254);
    match(CSharpParser::OPEN_PARENS);
    setState(1256);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
      | (1ULL << (CSharpParser::ALIAS - 10))
      | (1ULL << (CSharpParser::ARGLIST - 10))
      | (1ULL << (CSharpParser::ASCENDING - 10))
      | (1ULL << (CSharpParser::ASYNC - 10))
      | (1ULL << (CSharpParser::AWAIT - 10))
      | (1ULL << (CSharpParser::BOOL - 10))
      | (1ULL << (CSharpParser::BY - 10))
      | (1ULL << (CSharpParser::BYTE - 10))
      | (1ULL << (CSharpParser::CHAR - 10))
      | (1ULL << (CSharpParser::DECIMAL - 10))
      | (1ULL << (CSharpParser::DESCENDING - 10))
      | (1ULL << (CSharpParser::DOUBLE - 10))
      | (1ULL << (CSharpParser::DYNAMIC - 10))
      | (1ULL << (CSharpParser::EQUALS - 10))
      | (1ULL << (CSharpParser::FLOAT - 10))
      | (1ULL << (CSharpParser::FROM - 10))
      | (1ULL << (CSharpParser::GET - 10))
      | (1ULL << (CSharpParser::GROUP - 10))
      | (1ULL << (CSharpParser::IN - 10))
      | (1ULL << (CSharpParser::INT - 10))
      | (1ULL << (CSharpParser::INTO - 10))
      | (1ULL << (CSharpParser::JOIN - 10))
      | (1ULL << (CSharpParser::LET - 10))
      | (1ULL << (CSharpParser::LONG - 10))
      | (1ULL << (CSharpParser::NAMEOF - 10))
      | (1ULL << (CSharpParser::OBJECT - 10))
      | (1ULL << (CSharpParser::ON - 10))
      | (1ULL << (CSharpParser::ORDERBY - 10))
      | (1ULL << (CSharpParser::OUT - 10)))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (CSharpParser::PARAMS - 74))
      | (1ULL << (CSharpParser::PARTIAL - 74))
      | (1ULL << (CSharpParser::REF - 74))
      | (1ULL << (CSharpParser::REMOVE - 74))
      | (1ULL << (CSharpParser::SBYTE - 74))
      | (1ULL << (CSharpParser::SELECT - 74))
      | (1ULL << (CSharpParser::SET - 74))
      | (1ULL << (CSharpParser::SHORT - 74))
      | (1ULL << (CSharpParser::STRING - 74))
      | (1ULL << (CSharpParser::THIS - 74))
      | (1ULL << (CSharpParser::UINT - 74))
      | (1ULL << (CSharpParser::ULONG - 74))
      | (1ULL << (CSharpParser::UNMANAGED - 74))
      | (1ULL << (CSharpParser::USHORT - 74))
      | (1ULL << (CSharpParser::VAR - 74))
      | (1ULL << (CSharpParser::VOID - 74))
      | (1ULL << (CSharpParser::WHEN - 74))
      | (1ULL << (CSharpParser::WHERE - 74))
      | (1ULL << (CSharpParser::YIELD - 74))
      | (1ULL << (CSharpParser::IDENTIFIER - 74))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 74))
      | (1ULL << (CSharpParser::OPEN_PARENS - 74)))) != 0)) {
      setState(1255);
      formal_parameter_list();
    }
    setState(1258);
    match(CSharpParser::CLOSE_PARENS);
    setState(1260);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(1259);
      type_parameter_constraints_clauses();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_function_modifiersContext ------------------------------------------------------------------

CSharpParser::Local_function_modifiersContext::Local_function_modifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Local_function_modifiersContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}

tree::TerminalNode* CSharpParser::Local_function_modifiersContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

tree::TerminalNode* CSharpParser::Local_function_modifiersContext::STATIC() {
  return getToken(CSharpParser::STATIC, 0);
}


size_t CSharpParser::Local_function_modifiersContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_function_modifiers;
}

void CSharpParser::Local_function_modifiersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_function_modifiers(this);
}

void CSharpParser::Local_function_modifiersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_function_modifiers(this);
}

CSharpParser::Local_function_modifiersContext* CSharpParser::local_function_modifiers() {
  Local_function_modifiersContext *_localctx = _tracker.createInstance<Local_function_modifiersContext>(_ctx, getState());
  enterRule(_localctx, 160, CSharpParser::RuleLocal_function_modifiers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1268);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ASYNC:
      case CSharpParser::UNSAFE: {
        enterOuterAlt(_localctx, 1);
        setState(1262);
        _la = _input->LA(1);
        if (!(_la == CSharpParser::ASYNC || _la == CSharpParser::UNSAFE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1264);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::STATIC) {
          setState(1263);
          match(CSharpParser::STATIC);
        }
        break;
      }

      case CSharpParser::STATIC: {
        enterOuterAlt(_localctx, 2);
        setState(1266);
        match(CSharpParser::STATIC);
        setState(1267);
        _la = _input->LA(1);
        if (!(_la == CSharpParser::ASYNC || _la == CSharpParser::UNSAFE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_function_bodyContext ------------------------------------------------------------------

CSharpParser::Local_function_bodyContext::Local_function_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::Local_function_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Local_function_bodyContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Local_function_bodyContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Local_function_bodyContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Local_function_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_function_body;
}

void CSharpParser::Local_function_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_function_body(this);
}

void CSharpParser::Local_function_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_function_body(this);
}

CSharpParser::Local_function_bodyContext* CSharpParser::local_function_body() {
  Local_function_bodyContext *_localctx = _tracker.createInstance<Local_function_bodyContext>(_ctx, getState());
  enterRule(_localctx, 162, CSharpParser::RuleLocal_function_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1275);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1270);
        block();
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        enterOuterAlt(_localctx, 2);
        setState(1271);
        right_arrow();
        setState(1272);
        throwable_expression();
        setState(1273);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Labeled_StatementContext ------------------------------------------------------------------

CSharpParser::Labeled_StatementContext::Labeled_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Labeled_StatementContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Labeled_StatementContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::StatementContext* CSharpParser::Labeled_StatementContext::statement() {
  return getRuleContext<CSharpParser::StatementContext>(0);
}


size_t CSharpParser::Labeled_StatementContext::getRuleIndex() const {
  return CSharpParser::RuleLabeled_Statement;
}

void CSharpParser::Labeled_StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeled_Statement(this);
}

void CSharpParser::Labeled_StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeled_Statement(this);
}

CSharpParser::Labeled_StatementContext* CSharpParser::labeled_Statement() {
  Labeled_StatementContext *_localctx = _tracker.createInstance<Labeled_StatementContext>(_ctx, getState());
  enterRule(_localctx, 164, CSharpParser::RuleLabeled_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1277);
    identifier();
    setState(1278);
    match(CSharpParser::COLON);
    setState(1279);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Embedded_statementContext ------------------------------------------------------------------

CSharpParser::Embedded_statementContext::Embedded_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::Embedded_statementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Simple_embedded_statementContext* CSharpParser::Embedded_statementContext::simple_embedded_statement() {
  return getRuleContext<CSharpParser::Simple_embedded_statementContext>(0);
}


size_t CSharpParser::Embedded_statementContext::getRuleIndex() const {
  return CSharpParser::RuleEmbedded_statement;
}

void CSharpParser::Embedded_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmbedded_statement(this);
}

void CSharpParser::Embedded_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmbedded_statement(this);
}

CSharpParser::Embedded_statementContext* CSharpParser::embedded_statement() {
  Embedded_statementContext *_localctx = _tracker.createInstance<Embedded_statementContext>(_ctx, getState());
  enterRule(_localctx, 166, CSharpParser::RuleEmbedded_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1283);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1281);
        block();
        break;
      }

      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BREAK:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::CONTINUE:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DO:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FIXED:
      case CSharpParser::FLOAT:
      case CSharpParser::FOR:
      case CSharpParser::FOREACH:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GOTO:
      case CSharpParser::GROUP:
      case CSharpParser::IF:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LOCK:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::RETURN:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::SWITCH:
      case CSharpParser::THIS:
      case CSharpParser::THROW:
      case CSharpParser::TRUE:
      case CSharpParser::TRY:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::UNSAFE:
      case CSharpParser::USHORT:
      case CSharpParser::USING:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::WHILE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::SEMICOLON:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 2);
        setState(1282);
        simple_embedded_statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_embedded_statementContext ------------------------------------------------------------------

CSharpParser::Simple_embedded_statementContext::Simple_embedded_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CSharpParser::Simple_embedded_statementContext::getRuleIndex() const {
  return CSharpParser::RuleSimple_embedded_statement;
}

void CSharpParser::Simple_embedded_statementContext::copyFrom(Simple_embedded_statementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TryStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::TryStatementContext::TRY() {
  return getToken(CSharpParser::TRY, 0);
}

CSharpParser::BlockContext* CSharpParser::TryStatementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Catch_clausesContext* CSharpParser::TryStatementContext::catch_clauses() {
  return getRuleContext<CSharpParser::Catch_clausesContext>(0);
}

CSharpParser::Finally_clauseContext* CSharpParser::TryStatementContext::finally_clause() {
  return getRuleContext<CSharpParser::Finally_clauseContext>(0);
}

CSharpParser::TryStatementContext::TryStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::TryStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement(this);
}
void CSharpParser::TryStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement(this);
}
//----------------- CheckedStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::CheckedStatementContext::CHECKED() {
  return getToken(CSharpParser::CHECKED, 0);
}

CSharpParser::BlockContext* CSharpParser::CheckedStatementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::CheckedStatementContext::CheckedStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::CheckedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheckedStatement(this);
}
void CSharpParser::CheckedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheckedStatement(this);
}
//----------------- ThrowStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ThrowStatementContext::THROW() {
  return getToken(CSharpParser::THROW, 0);
}

tree::TerminalNode* CSharpParser::ThrowStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::ExpressionContext* CSharpParser::ThrowStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::ThrowStatementContext::ThrowStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ThrowStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowStatement(this);
}
void CSharpParser::ThrowStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowStatement(this);
}
//----------------- TheEmptyStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::TheEmptyStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::TheEmptyStatementContext::TheEmptyStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::TheEmptyStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTheEmptyStatement(this);
}
void CSharpParser::TheEmptyStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTheEmptyStatement(this);
}
//----------------- UnsafeStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UnsafeStatementContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

CSharpParser::BlockContext* CSharpParser::UnsafeStatementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::UnsafeStatementContext::UnsafeStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::UnsafeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnsafeStatement(this);
}
void CSharpParser::UnsafeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnsafeStatement(this);
}
//----------------- ForStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ForStatementContext::FOR() {
  return getToken(CSharpParser::FOR, 0);
}

tree::TerminalNode* CSharpParser::ForStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::ForStatementContext::SEMICOLON() {
  return getTokens(CSharpParser::SEMICOLON);
}

tree::TerminalNode* CSharpParser::ForStatementContext::SEMICOLON(size_t i) {
  return getToken(CSharpParser::SEMICOLON, i);
}

tree::TerminalNode* CSharpParser::ForStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::ForStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::For_initializerContext* CSharpParser::ForStatementContext::for_initializer() {
  return getRuleContext<CSharpParser::For_initializerContext>(0);
}

CSharpParser::ExpressionContext* CSharpParser::ForStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::For_iteratorContext* CSharpParser::ForStatementContext::for_iterator() {
  return getRuleContext<CSharpParser::For_iteratorContext>(0);
}

CSharpParser::ForStatementContext::ForStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}
void CSharpParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}
//----------------- BreakStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::BreakStatementContext::BREAK() {
  return getToken(CSharpParser::BREAK, 0);
}

tree::TerminalNode* CSharpParser::BreakStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::BreakStatementContext::BreakStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}
void CSharpParser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}
//----------------- IfStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::IfStatementContext::IF() {
  return getToken(CSharpParser::IF, 0);
}

tree::TerminalNode* CSharpParser::IfStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::IfStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::IfStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<CSharpParser::If_bodyContext *> CSharpParser::IfStatementContext::if_body() {
  return getRuleContexts<CSharpParser::If_bodyContext>();
}

CSharpParser::If_bodyContext* CSharpParser::IfStatementContext::if_body(size_t i) {
  return getRuleContext<CSharpParser::If_bodyContext>(i);
}

tree::TerminalNode* CSharpParser::IfStatementContext::ELSE() {
  return getToken(CSharpParser::ELSE, 0);
}

CSharpParser::IfStatementContext::IfStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}
void CSharpParser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}
//----------------- ReturnStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ReturnStatementContext::RETURN() {
  return getToken(CSharpParser::RETURN, 0);
}

tree::TerminalNode* CSharpParser::ReturnStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::ExpressionContext* CSharpParser::ReturnStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::ReturnStatementContext::ReturnStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}
void CSharpParser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}
//----------------- GotoStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::GotoStatementContext::GOTO() {
  return getToken(CSharpParser::GOTO, 0);
}

tree::TerminalNode* CSharpParser::GotoStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::IdentifierContext* CSharpParser::GotoStatementContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::GotoStatementContext::CASE() {
  return getToken(CSharpParser::CASE, 0);
}

CSharpParser::ExpressionContext* CSharpParser::GotoStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::GotoStatementContext::DEFAULT() {
  return getToken(CSharpParser::DEFAULT, 0);
}

CSharpParser::GotoStatementContext::GotoStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::GotoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGotoStatement(this);
}
void CSharpParser::GotoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGotoStatement(this);
}
//----------------- SwitchStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::SwitchStatementContext::SWITCH() {
  return getToken(CSharpParser::SWITCH, 0);
}

tree::TerminalNode* CSharpParser::SwitchStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::SwitchStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::SwitchStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::SwitchStatementContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::SwitchStatementContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Switch_sectionContext *> CSharpParser::SwitchStatementContext::switch_section() {
  return getRuleContexts<CSharpParser::Switch_sectionContext>();
}

CSharpParser::Switch_sectionContext* CSharpParser::SwitchStatementContext::switch_section(size_t i) {
  return getRuleContext<CSharpParser::Switch_sectionContext>(i);
}

CSharpParser::SwitchStatementContext::SwitchStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}
void CSharpParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}
//----------------- FixedStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::FixedStatementContext::FIXED() {
  return getToken(CSharpParser::FIXED, 0);
}

tree::TerminalNode* CSharpParser::FixedStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Pointer_typeContext* CSharpParser::FixedStatementContext::pointer_type() {
  return getRuleContext<CSharpParser::Pointer_typeContext>(0);
}

CSharpParser::Fixed_pointer_declaratorsContext* CSharpParser::FixedStatementContext::fixed_pointer_declarators() {
  return getRuleContext<CSharpParser::Fixed_pointer_declaratorsContext>(0);
}

tree::TerminalNode* CSharpParser::FixedStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::FixedStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::FixedStatementContext::FixedStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::FixedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixedStatement(this);
}
void CSharpParser::FixedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixedStatement(this);
}
//----------------- WhileStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::WhileStatementContext::WHILE() {
  return getToken(CSharpParser::WHILE, 0);
}

tree::TerminalNode* CSharpParser::WhileStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::WhileStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::WhileStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::WhileStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::WhileStatementContext::WhileStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}
void CSharpParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}
//----------------- DoStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::DoStatementContext::DO() {
  return getToken(CSharpParser::DO, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::DoStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

tree::TerminalNode* CSharpParser::DoStatementContext::WHILE() {
  return getToken(CSharpParser::WHILE, 0);
}

tree::TerminalNode* CSharpParser::DoStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::DoStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::DoStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::DoStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::DoStatementContext::DoStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::DoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoStatement(this);
}
void CSharpParser::DoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoStatement(this);
}
//----------------- ForeachStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ForeachStatementContext::FOREACH() {
  return getToken(CSharpParser::FOREACH, 0);
}

tree::TerminalNode* CSharpParser::ForeachStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Local_variable_typeContext* CSharpParser::ForeachStatementContext::local_variable_type() {
  return getRuleContext<CSharpParser::Local_variable_typeContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::ForeachStatementContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::ForeachStatementContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

CSharpParser::ExpressionContext* CSharpParser::ForeachStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::ForeachStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::ForeachStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

tree::TerminalNode* CSharpParser::ForeachStatementContext::AWAIT() {
  return getToken(CSharpParser::AWAIT, 0);
}

CSharpParser::ForeachStatementContext::ForeachStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ForeachStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForeachStatement(this);
}
void CSharpParser::ForeachStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForeachStatement(this);
}
//----------------- UncheckedStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UncheckedStatementContext::UNCHECKED() {
  return getToken(CSharpParser::UNCHECKED, 0);
}

CSharpParser::BlockContext* CSharpParser::UncheckedStatementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::UncheckedStatementContext::UncheckedStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::UncheckedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUncheckedStatement(this);
}
void CSharpParser::UncheckedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUncheckedStatement(this);
}
//----------------- ExpressionStatementContext ------------------------------------------------------------------

CSharpParser::ExpressionContext* CSharpParser::ExpressionStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::ExpressionStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::ExpressionStatementContext::ExpressionStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}
void CSharpParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}
//----------------- ContinueStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ContinueStatementContext::CONTINUE() {
  return getToken(CSharpParser::CONTINUE, 0);
}

tree::TerminalNode* CSharpParser::ContinueStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::ContinueStatementContext::ContinueStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}
void CSharpParser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}
//----------------- UsingStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UsingStatementContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

tree::TerminalNode* CSharpParser::UsingStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Resource_acquisitionContext* CSharpParser::UsingStatementContext::resource_acquisition() {
  return getRuleContext<CSharpParser::Resource_acquisitionContext>(0);
}

tree::TerminalNode* CSharpParser::UsingStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::UsingStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::UsingStatementContext::UsingStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::UsingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingStatement(this);
}
void CSharpParser::UsingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingStatement(this);
}
//----------------- LockStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::LockStatementContext::LOCK() {
  return getToken(CSharpParser::LOCK, 0);
}

tree::TerminalNode* CSharpParser::LockStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::LockStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::LockStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::LockStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::LockStatementContext::LockStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::LockStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLockStatement(this);
}
void CSharpParser::LockStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLockStatement(this);
}
//----------------- YieldStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::YieldStatementContext::YIELD() {
  return getToken(CSharpParser::YIELD, 0);
}

tree::TerminalNode* CSharpParser::YieldStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

tree::TerminalNode* CSharpParser::YieldStatementContext::RETURN() {
  return getToken(CSharpParser::RETURN, 0);
}

CSharpParser::ExpressionContext* CSharpParser::YieldStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::YieldStatementContext::BREAK() {
  return getToken(CSharpParser::BREAK, 0);
}

CSharpParser::YieldStatementContext::YieldStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::YieldStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYieldStatement(this);
}
void CSharpParser::YieldStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYieldStatement(this);
}
CSharpParser::Simple_embedded_statementContext* CSharpParser::simple_embedded_statement() {
  Simple_embedded_statementContext *_localctx = _tracker.createInstance<Simple_embedded_statementContext>(_ctx, getState());
  enterRule(_localctx, 168, CSharpParser::RuleSimple_embedded_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1415);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::TheEmptyStatementContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1285);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::ExpressionStatementContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1286);
      expression();
      setState(1287);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::IfStatementContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1289);
      match(CSharpParser::IF);
      setState(1290);
      match(CSharpParser::OPEN_PARENS);
      setState(1291);
      expression();
      setState(1292);
      match(CSharpParser::CLOSE_PARENS);
      setState(1293);
      if_body();
      setState(1296);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
      case 1: {
        setState(1294);
        match(CSharpParser::ELSE);
        setState(1295);
        if_body();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::SwitchStatementContext>(_localctx));
      enterOuterAlt(_localctx, 4);
      setState(1298);
      match(CSharpParser::SWITCH);
      setState(1299);
      match(CSharpParser::OPEN_PARENS);
      setState(1300);
      expression();
      setState(1301);
      match(CSharpParser::CLOSE_PARENS);
      setState(1302);
      match(CSharpParser::OPEN_BRACE);
      setState(1306);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CSharpParser::CASE

      || _la == CSharpParser::DEFAULT) {
        setState(1303);
        switch_section();
        setState(1308);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1309);
      match(CSharpParser::CLOSE_BRACE);
      break;
    }

    case 5: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::WhileStatementContext>(_localctx));
      enterOuterAlt(_localctx, 5);
      setState(1311);
      match(CSharpParser::WHILE);
      setState(1312);
      match(CSharpParser::OPEN_PARENS);
      setState(1313);
      expression();
      setState(1314);
      match(CSharpParser::CLOSE_PARENS);
      setState(1315);
      embedded_statement();
      break;
    }

    case 6: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::DoStatementContext>(_localctx));
      enterOuterAlt(_localctx, 6);
      setState(1317);
      match(CSharpParser::DO);
      setState(1318);
      embedded_statement();
      setState(1319);
      match(CSharpParser::WHILE);
      setState(1320);
      match(CSharpParser::OPEN_PARENS);
      setState(1321);
      expression();
      setState(1322);
      match(CSharpParser::CLOSE_PARENS);
      setState(1323);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 7: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::ForStatementContext>(_localctx));
      enterOuterAlt(_localctx, 7);
      setState(1325);
      match(CSharpParser::FOR);
      setState(1326);
      match(CSharpParser::OPEN_PARENS);
      setState(1328);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
        | (1ULL << CSharpParser::ALIAS)
        | (1ULL << CSharpParser::ARGLIST)
        | (1ULL << CSharpParser::ASCENDING)
        | (1ULL << CSharpParser::ASYNC)
        | (1ULL << CSharpParser::AWAIT)
        | (1ULL << CSharpParser::BASE)
        | (1ULL << CSharpParser::BOOL)
        | (1ULL << CSharpParser::BY)
        | (1ULL << CSharpParser::BYTE)
        | (1ULL << CSharpParser::CHAR)
        | (1ULL << CSharpParser::CHECKED)
        | (1ULL << CSharpParser::DECIMAL)
        | (1ULL << CSharpParser::DEFAULT)
        | (1ULL << CSharpParser::DELEGATE)
        | (1ULL << CSharpParser::DESCENDING)
        | (1ULL << CSharpParser::DOUBLE)
        | (1ULL << CSharpParser::DYNAMIC)
        | (1ULL << CSharpParser::EQUALS)
        | (1ULL << CSharpParser::FALSE)
        | (1ULL << CSharpParser::FIXED)
        | (1ULL << CSharpParser::FLOAT)
        | (1ULL << CSharpParser::FROM)
        | (1ULL << CSharpParser::GET)
        | (1ULL << CSharpParser::GROUP)
        | (1ULL << CSharpParser::INT)
        | (1ULL << CSharpParser::INTO)
        | (1ULL << CSharpParser::JOIN)
        | (1ULL << CSharpParser::LET)
        | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
        | (1ULL << (CSharpParser::NEW - 64))
        | (1ULL << (CSharpParser::NULL - 64))
        | (1ULL << (CSharpParser::OBJECT - 64))
        | (1ULL << (CSharpParser::ON - 64))
        | (1ULL << (CSharpParser::ORDERBY - 64))
        | (1ULL << (CSharpParser::PARTIAL - 64))
        | (1ULL << (CSharpParser::REF - 64))
        | (1ULL << (CSharpParser::REMOVE - 64))
        | (1ULL << (CSharpParser::SBYTE - 64))
        | (1ULL << (CSharpParser::SELECT - 64))
        | (1ULL << (CSharpParser::SET - 64))
        | (1ULL << (CSharpParser::SHORT - 64))
        | (1ULL << (CSharpParser::SIZEOF - 64))
        | (1ULL << (CSharpParser::STRING - 64))
        | (1ULL << (CSharpParser::THIS - 64))
        | (1ULL << (CSharpParser::TRUE - 64))
        | (1ULL << (CSharpParser::TYPEOF - 64))
        | (1ULL << (CSharpParser::UINT - 64))
        | (1ULL << (CSharpParser::ULONG - 64))
        | (1ULL << (CSharpParser::UNCHECKED - 64))
        | (1ULL << (CSharpParser::UNMANAGED - 64))
        | (1ULL << (CSharpParser::USHORT - 64))
        | (1ULL << (CSharpParser::USING - 64))
        | (1ULL << (CSharpParser::VAR - 64))
        | (1ULL << (CSharpParser::VOID - 64))
        | (1ULL << (CSharpParser::WHEN - 64))
        | (1ULL << (CSharpParser::WHERE - 64))
        | (1ULL << (CSharpParser::YIELD - 64))
        | (1ULL << (CSharpParser::IDENTIFIER - 64))
        | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
        | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::REAL_LITERAL - 64))
        | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
        | (1ULL << (CSharpParser::REGULAR_STRING - 64))
        | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
        | (1ULL << (CSharpParser::PLUS - 129))
        | (1ULL << (CSharpParser::MINUS - 129))
        | (1ULL << (CSharpParser::STAR - 129))
        | (1ULL << (CSharpParser::AMP - 129))
        | (1ULL << (CSharpParser::CARET - 129))
        | (1ULL << (CSharpParser::BANG - 129))
        | (1ULL << (CSharpParser::TILDE - 129))
        | (1ULL << (CSharpParser::OP_INC - 129))
        | (1ULL << (CSharpParser::OP_DEC - 129))
        | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
        setState(1327);
        for_initializer();
      }
      setState(1330);
      match(CSharpParser::SEMICOLON);
      setState(1332);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
        | (1ULL << CSharpParser::ALIAS)
        | (1ULL << CSharpParser::ARGLIST)
        | (1ULL << CSharpParser::ASCENDING)
        | (1ULL << CSharpParser::ASYNC)
        | (1ULL << CSharpParser::AWAIT)
        | (1ULL << CSharpParser::BASE)
        | (1ULL << CSharpParser::BOOL)
        | (1ULL << CSharpParser::BY)
        | (1ULL << CSharpParser::BYTE)
        | (1ULL << CSharpParser::CHAR)
        | (1ULL << CSharpParser::CHECKED)
        | (1ULL << CSharpParser::DECIMAL)
        | (1ULL << CSharpParser::DEFAULT)
        | (1ULL << CSharpParser::DELEGATE)
        | (1ULL << CSharpParser::DESCENDING)
        | (1ULL << CSharpParser::DOUBLE)
        | (1ULL << CSharpParser::DYNAMIC)
        | (1ULL << CSharpParser::EQUALS)
        | (1ULL << CSharpParser::FALSE)
        | (1ULL << CSharpParser::FLOAT)
        | (1ULL << CSharpParser::FROM)
        | (1ULL << CSharpParser::GET)
        | (1ULL << CSharpParser::GROUP)
        | (1ULL << CSharpParser::INT)
        | (1ULL << CSharpParser::INTO)
        | (1ULL << CSharpParser::JOIN)
        | (1ULL << CSharpParser::LET)
        | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
        | (1ULL << (CSharpParser::NEW - 64))
        | (1ULL << (CSharpParser::NULL - 64))
        | (1ULL << (CSharpParser::OBJECT - 64))
        | (1ULL << (CSharpParser::ON - 64))
        | (1ULL << (CSharpParser::ORDERBY - 64))
        | (1ULL << (CSharpParser::PARTIAL - 64))
        | (1ULL << (CSharpParser::REF - 64))
        | (1ULL << (CSharpParser::REMOVE - 64))
        | (1ULL << (CSharpParser::SBYTE - 64))
        | (1ULL << (CSharpParser::SELECT - 64))
        | (1ULL << (CSharpParser::SET - 64))
        | (1ULL << (CSharpParser::SHORT - 64))
        | (1ULL << (CSharpParser::SIZEOF - 64))
        | (1ULL << (CSharpParser::STRING - 64))
        | (1ULL << (CSharpParser::THIS - 64))
        | (1ULL << (CSharpParser::TRUE - 64))
        | (1ULL << (CSharpParser::TYPEOF - 64))
        | (1ULL << (CSharpParser::UINT - 64))
        | (1ULL << (CSharpParser::ULONG - 64))
        | (1ULL << (CSharpParser::UNCHECKED - 64))
        | (1ULL << (CSharpParser::UNMANAGED - 64))
        | (1ULL << (CSharpParser::USHORT - 64))
        | (1ULL << (CSharpParser::VAR - 64))
        | (1ULL << (CSharpParser::WHEN - 64))
        | (1ULL << (CSharpParser::WHERE - 64))
        | (1ULL << (CSharpParser::YIELD - 64))
        | (1ULL << (CSharpParser::IDENTIFIER - 64))
        | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
        | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::REAL_LITERAL - 64))
        | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
        | (1ULL << (CSharpParser::REGULAR_STRING - 64))
        | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
        | (1ULL << (CSharpParser::PLUS - 129))
        | (1ULL << (CSharpParser::MINUS - 129))
        | (1ULL << (CSharpParser::STAR - 129))
        | (1ULL << (CSharpParser::AMP - 129))
        | (1ULL << (CSharpParser::CARET - 129))
        | (1ULL << (CSharpParser::BANG - 129))
        | (1ULL << (CSharpParser::TILDE - 129))
        | (1ULL << (CSharpParser::OP_INC - 129))
        | (1ULL << (CSharpParser::OP_DEC - 129))
        | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
        setState(1331);
        expression();
      }
      setState(1334);
      match(CSharpParser::SEMICOLON);
      setState(1336);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
        | (1ULL << CSharpParser::ALIAS)
        | (1ULL << CSharpParser::ARGLIST)
        | (1ULL << CSharpParser::ASCENDING)
        | (1ULL << CSharpParser::ASYNC)
        | (1ULL << CSharpParser::AWAIT)
        | (1ULL << CSharpParser::BASE)
        | (1ULL << CSharpParser::BOOL)
        | (1ULL << CSharpParser::BY)
        | (1ULL << CSharpParser::BYTE)
        | (1ULL << CSharpParser::CHAR)
        | (1ULL << CSharpParser::CHECKED)
        | (1ULL << CSharpParser::DECIMAL)
        | (1ULL << CSharpParser::DEFAULT)
        | (1ULL << CSharpParser::DELEGATE)
        | (1ULL << CSharpParser::DESCENDING)
        | (1ULL << CSharpParser::DOUBLE)
        | (1ULL << CSharpParser::DYNAMIC)
        | (1ULL << CSharpParser::EQUALS)
        | (1ULL << CSharpParser::FALSE)
        | (1ULL << CSharpParser::FLOAT)
        | (1ULL << CSharpParser::FROM)
        | (1ULL << CSharpParser::GET)
        | (1ULL << CSharpParser::GROUP)
        | (1ULL << CSharpParser::INT)
        | (1ULL << CSharpParser::INTO)
        | (1ULL << CSharpParser::JOIN)
        | (1ULL << CSharpParser::LET)
        | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
        | (1ULL << (CSharpParser::NEW - 64))
        | (1ULL << (CSharpParser::NULL - 64))
        | (1ULL << (CSharpParser::OBJECT - 64))
        | (1ULL << (CSharpParser::ON - 64))
        | (1ULL << (CSharpParser::ORDERBY - 64))
        | (1ULL << (CSharpParser::PARTIAL - 64))
        | (1ULL << (CSharpParser::REF - 64))
        | (1ULL << (CSharpParser::REMOVE - 64))
        | (1ULL << (CSharpParser::SBYTE - 64))
        | (1ULL << (CSharpParser::SELECT - 64))
        | (1ULL << (CSharpParser::SET - 64))
        | (1ULL << (CSharpParser::SHORT - 64))
        | (1ULL << (CSharpParser::SIZEOF - 64))
        | (1ULL << (CSharpParser::STRING - 64))
        | (1ULL << (CSharpParser::THIS - 64))
        | (1ULL << (CSharpParser::TRUE - 64))
        | (1ULL << (CSharpParser::TYPEOF - 64))
        | (1ULL << (CSharpParser::UINT - 64))
        | (1ULL << (CSharpParser::ULONG - 64))
        | (1ULL << (CSharpParser::UNCHECKED - 64))
        | (1ULL << (CSharpParser::UNMANAGED - 64))
        | (1ULL << (CSharpParser::USHORT - 64))
        | (1ULL << (CSharpParser::VAR - 64))
        | (1ULL << (CSharpParser::WHEN - 64))
        | (1ULL << (CSharpParser::WHERE - 64))
        | (1ULL << (CSharpParser::YIELD - 64))
        | (1ULL << (CSharpParser::IDENTIFIER - 64))
        | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
        | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::REAL_LITERAL - 64))
        | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
        | (1ULL << (CSharpParser::REGULAR_STRING - 64))
        | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
        | (1ULL << (CSharpParser::PLUS - 129))
        | (1ULL << (CSharpParser::MINUS - 129))
        | (1ULL << (CSharpParser::STAR - 129))
        | (1ULL << (CSharpParser::AMP - 129))
        | (1ULL << (CSharpParser::CARET - 129))
        | (1ULL << (CSharpParser::BANG - 129))
        | (1ULL << (CSharpParser::TILDE - 129))
        | (1ULL << (CSharpParser::OP_INC - 129))
        | (1ULL << (CSharpParser::OP_DEC - 129))
        | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
        setState(1335);
        for_iterator();
      }
      setState(1338);
      match(CSharpParser::CLOSE_PARENS);
      setState(1339);
      embedded_statement();
      break;
    }

    case 8: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::ForeachStatementContext>(_localctx));
      enterOuterAlt(_localctx, 8);
      setState(1341);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::AWAIT) {
        setState(1340);
        match(CSharpParser::AWAIT);
      }
      setState(1343);
      match(CSharpParser::FOREACH);
      setState(1344);
      match(CSharpParser::OPEN_PARENS);
      setState(1345);
      local_variable_type();
      setState(1346);
      identifier();
      setState(1347);
      match(CSharpParser::IN);
      setState(1348);
      expression();
      setState(1349);
      match(CSharpParser::CLOSE_PARENS);
      setState(1350);
      embedded_statement();
      break;
    }

    case 9: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::BreakStatementContext>(_localctx));
      enterOuterAlt(_localctx, 9);
      setState(1352);
      match(CSharpParser::BREAK);
      setState(1353);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 10: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::ContinueStatementContext>(_localctx));
      enterOuterAlt(_localctx, 10);
      setState(1354);
      match(CSharpParser::CONTINUE);
      setState(1355);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 11: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::GotoStatementContext>(_localctx));
      enterOuterAlt(_localctx, 11);
      setState(1356);
      match(CSharpParser::GOTO);
      setState(1361);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::ADD:
        case CSharpParser::ALIAS:
        case CSharpParser::ARGLIST:
        case CSharpParser::ASCENDING:
        case CSharpParser::ASYNC:
        case CSharpParser::AWAIT:
        case CSharpParser::BY:
        case CSharpParser::DESCENDING:
        case CSharpParser::DYNAMIC:
        case CSharpParser::EQUALS:
        case CSharpParser::FROM:
        case CSharpParser::GET:
        case CSharpParser::GROUP:
        case CSharpParser::INTO:
        case CSharpParser::JOIN:
        case CSharpParser::LET:
        case CSharpParser::NAMEOF:
        case CSharpParser::ON:
        case CSharpParser::ORDERBY:
        case CSharpParser::PARTIAL:
        case CSharpParser::REMOVE:
        case CSharpParser::SELECT:
        case CSharpParser::SET:
        case CSharpParser::UNMANAGED:
        case CSharpParser::VAR:
        case CSharpParser::WHEN:
        case CSharpParser::WHERE:
        case CSharpParser::YIELD:
        case CSharpParser::IDENTIFIER: {
          setState(1357);
          identifier();
          break;
        }

        case CSharpParser::CASE: {
          setState(1358);
          match(CSharpParser::CASE);
          setState(1359);
          expression();
          break;
        }

        case CSharpParser::DEFAULT: {
          setState(1360);
          match(CSharpParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1363);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 12: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::ReturnStatementContext>(_localctx));
      enterOuterAlt(_localctx, 12);
      setState(1364);
      match(CSharpParser::RETURN);
      setState(1366);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
        | (1ULL << CSharpParser::ALIAS)
        | (1ULL << CSharpParser::ARGLIST)
        | (1ULL << CSharpParser::ASCENDING)
        | (1ULL << CSharpParser::ASYNC)
        | (1ULL << CSharpParser::AWAIT)
        | (1ULL << CSharpParser::BASE)
        | (1ULL << CSharpParser::BOOL)
        | (1ULL << CSharpParser::BY)
        | (1ULL << CSharpParser::BYTE)
        | (1ULL << CSharpParser::CHAR)
        | (1ULL << CSharpParser::CHECKED)
        | (1ULL << CSharpParser::DECIMAL)
        | (1ULL << CSharpParser::DEFAULT)
        | (1ULL << CSharpParser::DELEGATE)
        | (1ULL << CSharpParser::DESCENDING)
        | (1ULL << CSharpParser::DOUBLE)
        | (1ULL << CSharpParser::DYNAMIC)
        | (1ULL << CSharpParser::EQUALS)
        | (1ULL << CSharpParser::FALSE)
        | (1ULL << CSharpParser::FLOAT)
        | (1ULL << CSharpParser::FROM)
        | (1ULL << CSharpParser::GET)
        | (1ULL << CSharpParser::GROUP)
        | (1ULL << CSharpParser::INT)
        | (1ULL << CSharpParser::INTO)
        | (1ULL << CSharpParser::JOIN)
        | (1ULL << CSharpParser::LET)
        | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
        | (1ULL << (CSharpParser::NEW - 64))
        | (1ULL << (CSharpParser::NULL - 64))
        | (1ULL << (CSharpParser::OBJECT - 64))
        | (1ULL << (CSharpParser::ON - 64))
        | (1ULL << (CSharpParser::ORDERBY - 64))
        | (1ULL << (CSharpParser::PARTIAL - 64))
        | (1ULL << (CSharpParser::REF - 64))
        | (1ULL << (CSharpParser::REMOVE - 64))
        | (1ULL << (CSharpParser::SBYTE - 64))
        | (1ULL << (CSharpParser::SELECT - 64))
        | (1ULL << (CSharpParser::SET - 64))
        | (1ULL << (CSharpParser::SHORT - 64))
        | (1ULL << (CSharpParser::SIZEOF - 64))
        | (1ULL << (CSharpParser::STRING - 64))
        | (1ULL << (CSharpParser::THIS - 64))
        | (1ULL << (CSharpParser::TRUE - 64))
        | (1ULL << (CSharpParser::TYPEOF - 64))
        | (1ULL << (CSharpParser::UINT - 64))
        | (1ULL << (CSharpParser::ULONG - 64))
        | (1ULL << (CSharpParser::UNCHECKED - 64))
        | (1ULL << (CSharpParser::UNMANAGED - 64))
        | (1ULL << (CSharpParser::USHORT - 64))
        | (1ULL << (CSharpParser::VAR - 64))
        | (1ULL << (CSharpParser::WHEN - 64))
        | (1ULL << (CSharpParser::WHERE - 64))
        | (1ULL << (CSharpParser::YIELD - 64))
        | (1ULL << (CSharpParser::IDENTIFIER - 64))
        | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
        | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::REAL_LITERAL - 64))
        | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
        | (1ULL << (CSharpParser::REGULAR_STRING - 64))
        | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
        | (1ULL << (CSharpParser::PLUS - 129))
        | (1ULL << (CSharpParser::MINUS - 129))
        | (1ULL << (CSharpParser::STAR - 129))
        | (1ULL << (CSharpParser::AMP - 129))
        | (1ULL << (CSharpParser::CARET - 129))
        | (1ULL << (CSharpParser::BANG - 129))
        | (1ULL << (CSharpParser::TILDE - 129))
        | (1ULL << (CSharpParser::OP_INC - 129))
        | (1ULL << (CSharpParser::OP_DEC - 129))
        | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
        setState(1365);
        expression();
      }
      setState(1368);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 13: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::ThrowStatementContext>(_localctx));
      enterOuterAlt(_localctx, 13);
      setState(1369);
      match(CSharpParser::THROW);
      setState(1371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
        | (1ULL << CSharpParser::ALIAS)
        | (1ULL << CSharpParser::ARGLIST)
        | (1ULL << CSharpParser::ASCENDING)
        | (1ULL << CSharpParser::ASYNC)
        | (1ULL << CSharpParser::AWAIT)
        | (1ULL << CSharpParser::BASE)
        | (1ULL << CSharpParser::BOOL)
        | (1ULL << CSharpParser::BY)
        | (1ULL << CSharpParser::BYTE)
        | (1ULL << CSharpParser::CHAR)
        | (1ULL << CSharpParser::CHECKED)
        | (1ULL << CSharpParser::DECIMAL)
        | (1ULL << CSharpParser::DEFAULT)
        | (1ULL << CSharpParser::DELEGATE)
        | (1ULL << CSharpParser::DESCENDING)
        | (1ULL << CSharpParser::DOUBLE)
        | (1ULL << CSharpParser::DYNAMIC)
        | (1ULL << CSharpParser::EQUALS)
        | (1ULL << CSharpParser::FALSE)
        | (1ULL << CSharpParser::FLOAT)
        | (1ULL << CSharpParser::FROM)
        | (1ULL << CSharpParser::GET)
        | (1ULL << CSharpParser::GROUP)
        | (1ULL << CSharpParser::INT)
        | (1ULL << CSharpParser::INTO)
        | (1ULL << CSharpParser::JOIN)
        | (1ULL << CSharpParser::LET)
        | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
        | (1ULL << (CSharpParser::NEW - 64))
        | (1ULL << (CSharpParser::NULL - 64))
        | (1ULL << (CSharpParser::OBJECT - 64))
        | (1ULL << (CSharpParser::ON - 64))
        | (1ULL << (CSharpParser::ORDERBY - 64))
        | (1ULL << (CSharpParser::PARTIAL - 64))
        | (1ULL << (CSharpParser::REF - 64))
        | (1ULL << (CSharpParser::REMOVE - 64))
        | (1ULL << (CSharpParser::SBYTE - 64))
        | (1ULL << (CSharpParser::SELECT - 64))
        | (1ULL << (CSharpParser::SET - 64))
        | (1ULL << (CSharpParser::SHORT - 64))
        | (1ULL << (CSharpParser::SIZEOF - 64))
        | (1ULL << (CSharpParser::STRING - 64))
        | (1ULL << (CSharpParser::THIS - 64))
        | (1ULL << (CSharpParser::TRUE - 64))
        | (1ULL << (CSharpParser::TYPEOF - 64))
        | (1ULL << (CSharpParser::UINT - 64))
        | (1ULL << (CSharpParser::ULONG - 64))
        | (1ULL << (CSharpParser::UNCHECKED - 64))
        | (1ULL << (CSharpParser::UNMANAGED - 64))
        | (1ULL << (CSharpParser::USHORT - 64))
        | (1ULL << (CSharpParser::VAR - 64))
        | (1ULL << (CSharpParser::WHEN - 64))
        | (1ULL << (CSharpParser::WHERE - 64))
        | (1ULL << (CSharpParser::YIELD - 64))
        | (1ULL << (CSharpParser::IDENTIFIER - 64))
        | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
        | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::REAL_LITERAL - 64))
        | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
        | (1ULL << (CSharpParser::REGULAR_STRING - 64))
        | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
        | (1ULL << (CSharpParser::PLUS - 129))
        | (1ULL << (CSharpParser::MINUS - 129))
        | (1ULL << (CSharpParser::STAR - 129))
        | (1ULL << (CSharpParser::AMP - 129))
        | (1ULL << (CSharpParser::CARET - 129))
        | (1ULL << (CSharpParser::BANG - 129))
        | (1ULL << (CSharpParser::TILDE - 129))
        | (1ULL << (CSharpParser::OP_INC - 129))
        | (1ULL << (CSharpParser::OP_DEC - 129))
        | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
        setState(1370);
        expression();
      }
      setState(1373);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 14: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::TryStatementContext>(_localctx));
      enterOuterAlt(_localctx, 14);
      setState(1374);
      match(CSharpParser::TRY);
      setState(1375);
      block();
      setState(1381);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::CATCH: {
          setState(1376);
          catch_clauses();
          setState(1378);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CSharpParser::FINALLY) {
            setState(1377);
            finally_clause();
          }
          break;
        }

        case CSharpParser::FINALLY: {
          setState(1380);
          finally_clause();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 15: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::CheckedStatementContext>(_localctx));
      enterOuterAlt(_localctx, 15);
      setState(1383);
      match(CSharpParser::CHECKED);
      setState(1384);
      block();
      break;
    }

    case 16: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::UncheckedStatementContext>(_localctx));
      enterOuterAlt(_localctx, 16);
      setState(1385);
      match(CSharpParser::UNCHECKED);
      setState(1386);
      block();
      break;
    }

    case 17: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::LockStatementContext>(_localctx));
      enterOuterAlt(_localctx, 17);
      setState(1387);
      match(CSharpParser::LOCK);
      setState(1388);
      match(CSharpParser::OPEN_PARENS);
      setState(1389);
      expression();
      setState(1390);
      match(CSharpParser::CLOSE_PARENS);
      setState(1391);
      embedded_statement();
      break;
    }

    case 18: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::UsingStatementContext>(_localctx));
      enterOuterAlt(_localctx, 18);
      setState(1393);
      match(CSharpParser::USING);
      setState(1394);
      match(CSharpParser::OPEN_PARENS);
      setState(1395);
      resource_acquisition();
      setState(1396);
      match(CSharpParser::CLOSE_PARENS);
      setState(1397);
      embedded_statement();
      break;
    }

    case 19: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::YieldStatementContext>(_localctx));
      enterOuterAlt(_localctx, 19);
      setState(1399);
      match(CSharpParser::YIELD);
      setState(1403);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::RETURN: {
          setState(1400);
          match(CSharpParser::RETURN);
          setState(1401);
          expression();
          break;
        }

        case CSharpParser::BREAK: {
          setState(1402);
          match(CSharpParser::BREAK);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1405);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 20: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::UnsafeStatementContext>(_localctx));
      enterOuterAlt(_localctx, 20);
      setState(1406);
      match(CSharpParser::UNSAFE);
      setState(1407);
      block();
      break;
    }

    case 21: {
      _localctx = dynamic_cast<Simple_embedded_statementContext *>(_tracker.createInstance<CSharpParser::FixedStatementContext>(_localctx));
      enterOuterAlt(_localctx, 21);
      setState(1408);
      match(CSharpParser::FIXED);
      setState(1409);
      match(CSharpParser::OPEN_PARENS);
      setState(1410);
      pointer_type();
      setState(1411);
      fixed_pointer_declarators();
      setState(1412);
      match(CSharpParser::CLOSE_PARENS);
      setState(1413);
      embedded_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

CSharpParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::BlockContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::BlockContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Statement_listContext* CSharpParser::BlockContext::statement_list() {
  return getRuleContext<CSharpParser::Statement_listContext>(0);
}


size_t CSharpParser::BlockContext::getRuleIndex() const {
  return CSharpParser::RuleBlock;
}

void CSharpParser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void CSharpParser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}

CSharpParser::BlockContext* CSharpParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 170, CSharpParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1417);
    match(CSharpParser::OPEN_BRACE);
    setState(1419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BASE)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BREAK)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CHECKED)
      | (1ULL << CSharpParser::CONST)
      | (1ULL << CSharpParser::CONTINUE)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DEFAULT)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DO)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FALSE)
      | (1ULL << CSharpParser::FIXED)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FOR)
      | (1ULL << CSharpParser::FOREACH)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GOTO)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::IF)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET)
      | (1ULL << CSharpParser::LOCK)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::NEW - 64))
      | (1ULL << (CSharpParser::NULL - 64))
      | (1ULL << (CSharpParser::OBJECT - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REF - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::RETURN - 64))
      | (1ULL << (CSharpParser::SBYTE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::SHORT - 64))
      | (1ULL << (CSharpParser::SIZEOF - 64))
      | (1ULL << (CSharpParser::STATIC - 64))
      | (1ULL << (CSharpParser::STRING - 64))
      | (1ULL << (CSharpParser::SWITCH - 64))
      | (1ULL << (CSharpParser::THIS - 64))
      | (1ULL << (CSharpParser::THROW - 64))
      | (1ULL << (CSharpParser::TRUE - 64))
      | (1ULL << (CSharpParser::TRY - 64))
      | (1ULL << (CSharpParser::TYPEOF - 64))
      | (1ULL << (CSharpParser::UINT - 64))
      | (1ULL << (CSharpParser::ULONG - 64))
      | (1ULL << (CSharpParser::UNCHECKED - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::UNSAFE - 64))
      | (1ULL << (CSharpParser::USHORT - 64))
      | (1ULL << (CSharpParser::USING - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::VOID - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::WHILE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
      | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::REAL_LITERAL - 64))
      | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
      | (1ULL << (CSharpParser::REGULAR_STRING - 64))
      | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64))
      | (1ULL << (CSharpParser::OPEN_BRACE - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
      | (1ULL << (CSharpParser::SEMICOLON - 129))
      | (1ULL << (CSharpParser::PLUS - 129))
      | (1ULL << (CSharpParser::MINUS - 129))
      | (1ULL << (CSharpParser::STAR - 129))
      | (1ULL << (CSharpParser::AMP - 129))
      | (1ULL << (CSharpParser::CARET - 129))
      | (1ULL << (CSharpParser::BANG - 129))
      | (1ULL << (CSharpParser::TILDE - 129))
      | (1ULL << (CSharpParser::OP_INC - 129))
      | (1ULL << (CSharpParser::OP_DEC - 129))
      | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
      setState(1418);
      statement_list();
    }
    setState(1421);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_variable_declarationContext ------------------------------------------------------------------

CSharpParser::Local_variable_declarationContext::Local_variable_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_variable_typeContext* CSharpParser::Local_variable_declarationContext::local_variable_type() {
  return getRuleContext<CSharpParser::Local_variable_typeContext>(0);
}

std::vector<CSharpParser::Local_variable_declaratorContext *> CSharpParser::Local_variable_declarationContext::local_variable_declarator() {
  return getRuleContexts<CSharpParser::Local_variable_declaratorContext>();
}

CSharpParser::Local_variable_declaratorContext* CSharpParser::Local_variable_declarationContext::local_variable_declarator(size_t i) {
  return getRuleContext<CSharpParser::Local_variable_declaratorContext>(i);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Local_variable_declarationContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::FIXED() {
  return getToken(CSharpParser::FIXED, 0);
}

CSharpParser::Pointer_typeContext* CSharpParser::Local_variable_declarationContext::pointer_type() {
  return getRuleContext<CSharpParser::Pointer_typeContext>(0);
}

CSharpParser::Fixed_pointer_declaratorsContext* CSharpParser::Local_variable_declarationContext::fixed_pointer_declarators() {
  return getRuleContext<CSharpParser::Fixed_pointer_declaratorsContext>(0);
}


size_t CSharpParser::Local_variable_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_variable_declaration;
}

void CSharpParser::Local_variable_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_variable_declaration(this);
}

void CSharpParser::Local_variable_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_variable_declaration(this);
}

CSharpParser::Local_variable_declarationContext* CSharpParser::local_variable_declaration() {
  Local_variable_declarationContext *_localctx = _tracker.createInstance<Local_variable_declarationContext>(_ctx, getState());
  enterRule(_localctx, 172, CSharpParser::RuleLocal_variable_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1442);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::DECIMAL:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::STRING:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::USING:
      case CSharpParser::VAR:
      case CSharpParser::VOID:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::OPEN_PARENS: {
        enterOuterAlt(_localctx, 1);
        setState(1427);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
        case 1: {
          setState(1423);
          match(CSharpParser::USING);
          break;
        }

        case 2: {
          setState(1424);
          match(CSharpParser::REF);
          break;
        }

        case 3: {
          setState(1425);
          match(CSharpParser::REF);
          setState(1426);
          match(CSharpParser::READONLY);
          break;
        }

        default:
          break;
        }
        setState(1429);
        local_variable_type();
        setState(1430);
        local_variable_declarator();
        setState(1435);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CSharpParser::COMMA) {
          setState(1431);
          match(CSharpParser::COMMA);
          setState(1432);
          local_variable_declarator();
          setState(1437);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case CSharpParser::FIXED: {
        enterOuterAlt(_localctx, 2);
        setState(1438);
        match(CSharpParser::FIXED);
        setState(1439);
        pointer_type();
        setState(1440);
        fixed_pointer_declarators();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_variable_typeContext ------------------------------------------------------------------

CSharpParser::Local_variable_typeContext::Local_variable_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Local_variable_typeContext::VAR() {
  return getToken(CSharpParser::VAR, 0);
}

CSharpParser::Type_Context* CSharpParser::Local_variable_typeContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}


size_t CSharpParser::Local_variable_typeContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_variable_type;
}

void CSharpParser::Local_variable_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_variable_type(this);
}

void CSharpParser::Local_variable_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_variable_type(this);
}

CSharpParser::Local_variable_typeContext* CSharpParser::local_variable_type() {
  Local_variable_typeContext *_localctx = _tracker.createInstance<Local_variable_typeContext>(_ctx, getState());
  enterRule(_localctx, 174, CSharpParser::RuleLocal_variable_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1446);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1444);
      match(CSharpParser::VAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1445);
      type_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_variable_declaratorContext ------------------------------------------------------------------

CSharpParser::Local_variable_declaratorContext::Local_variable_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Local_variable_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Local_variable_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Local_variable_initializerContext* CSharpParser::Local_variable_declaratorContext::local_variable_initializer() {
  return getRuleContext<CSharpParser::Local_variable_initializerContext>(0);
}

tree::TerminalNode* CSharpParser::Local_variable_declaratorContext::REF() {
  return getToken(CSharpParser::REF, 0);
}


size_t CSharpParser::Local_variable_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_variable_declarator;
}

void CSharpParser::Local_variable_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_variable_declarator(this);
}

void CSharpParser::Local_variable_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_variable_declarator(this);
}

CSharpParser::Local_variable_declaratorContext* CSharpParser::local_variable_declarator() {
  Local_variable_declaratorContext *_localctx = _tracker.createInstance<Local_variable_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 176, CSharpParser::RuleLocal_variable_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1448);
    identifier();
    setState(1454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::ASSIGNMENT) {
      setState(1449);
      match(CSharpParser::ASSIGNMENT);
      setState(1451);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx)) {
      case 1: {
        setState(1450);
        match(CSharpParser::REF);
        break;
      }

      default:
        break;
      }
      setState(1453);
      local_variable_initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_variable_initializerContext ------------------------------------------------------------------

CSharpParser::Local_variable_initializerContext::Local_variable_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Local_variable_initializerContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Array_initializerContext* CSharpParser::Local_variable_initializerContext::array_initializer() {
  return getRuleContext<CSharpParser::Array_initializerContext>(0);
}

CSharpParser::Stackalloc_initializerContext* CSharpParser::Local_variable_initializerContext::stackalloc_initializer() {
  return getRuleContext<CSharpParser::Stackalloc_initializerContext>(0);
}


size_t CSharpParser::Local_variable_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_variable_initializer;
}

void CSharpParser::Local_variable_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_variable_initializer(this);
}

void CSharpParser::Local_variable_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_variable_initializer(this);
}

CSharpParser::Local_variable_initializerContext* CSharpParser::local_variable_initializer() {
  Local_variable_initializerContext *_localctx = _tracker.createInstance<Local_variable_initializerContext>(_ctx, getState());
  enterRule(_localctx, 178, CSharpParser::RuleLocal_variable_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1459);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(1456);
        expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1457);
        array_initializer();
        break;
      }

      case CSharpParser::STACKALLOC: {
        enterOuterAlt(_localctx, 3);
        setState(1458);
        stackalloc_initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_constant_declarationContext ------------------------------------------------------------------

CSharpParser::Local_constant_declarationContext::Local_constant_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Local_constant_declarationContext::CONST() {
  return getToken(CSharpParser::CONST, 0);
}

CSharpParser::Type_Context* CSharpParser::Local_constant_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Constant_declaratorsContext* CSharpParser::Local_constant_declarationContext::constant_declarators() {
  return getRuleContext<CSharpParser::Constant_declaratorsContext>(0);
}


size_t CSharpParser::Local_constant_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_constant_declaration;
}

void CSharpParser::Local_constant_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_constant_declaration(this);
}

void CSharpParser::Local_constant_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_constant_declaration(this);
}

CSharpParser::Local_constant_declarationContext* CSharpParser::local_constant_declaration() {
  Local_constant_declarationContext *_localctx = _tracker.createInstance<Local_constant_declarationContext>(_ctx, getState());
  enterRule(_localctx, 180, CSharpParser::RuleLocal_constant_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1461);
    match(CSharpParser::CONST);
    setState(1462);
    type_();
    setState(1463);
    constant_declarators();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_bodyContext ------------------------------------------------------------------

CSharpParser::If_bodyContext::If_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::If_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Simple_embedded_statementContext* CSharpParser::If_bodyContext::simple_embedded_statement() {
  return getRuleContext<CSharpParser::Simple_embedded_statementContext>(0);
}


size_t CSharpParser::If_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleIf_body;
}

void CSharpParser::If_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_body(this);
}

void CSharpParser::If_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_body(this);
}

CSharpParser::If_bodyContext* CSharpParser::if_body() {
  If_bodyContext *_localctx = _tracker.createInstance<If_bodyContext>(_ctx, getState());
  enterRule(_localctx, 182, CSharpParser::RuleIf_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1467);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1465);
        block();
        break;
      }

      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BREAK:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::CONTINUE:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DO:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FIXED:
      case CSharpParser::FLOAT:
      case CSharpParser::FOR:
      case CSharpParser::FOREACH:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GOTO:
      case CSharpParser::GROUP:
      case CSharpParser::IF:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LOCK:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::RETURN:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::SWITCH:
      case CSharpParser::THIS:
      case CSharpParser::THROW:
      case CSharpParser::TRUE:
      case CSharpParser::TRY:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::UNSAFE:
      case CSharpParser::USHORT:
      case CSharpParser::USING:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::WHILE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::SEMICOLON:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 2);
        setState(1466);
        simple_embedded_statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_sectionContext ------------------------------------------------------------------

CSharpParser::Switch_sectionContext::Switch_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Statement_listContext* CSharpParser::Switch_sectionContext::statement_list() {
  return getRuleContext<CSharpParser::Statement_listContext>(0);
}

std::vector<CSharpParser::Switch_labelContext *> CSharpParser::Switch_sectionContext::switch_label() {
  return getRuleContexts<CSharpParser::Switch_labelContext>();
}

CSharpParser::Switch_labelContext* CSharpParser::Switch_sectionContext::switch_label(size_t i) {
  return getRuleContext<CSharpParser::Switch_labelContext>(i);
}


size_t CSharpParser::Switch_sectionContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_section;
}

void CSharpParser::Switch_sectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_section(this);
}

void CSharpParser::Switch_sectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_section(this);
}

CSharpParser::Switch_sectionContext* CSharpParser::switch_section() {
  Switch_sectionContext *_localctx = _tracker.createInstance<Switch_sectionContext>(_ctx, getState());
  enterRule(_localctx, 184, CSharpParser::RuleSwitch_section);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1470); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1469);
              switch_label();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1472); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1474);
    statement_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_labelContext ------------------------------------------------------------------

CSharpParser::Switch_labelContext::Switch_labelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Switch_labelContext::CASE() {
  return getToken(CSharpParser::CASE, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Switch_labelContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Switch_labelContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Case_guardContext* CSharpParser::Switch_labelContext::case_guard() {
  return getRuleContext<CSharpParser::Case_guardContext>(0);
}

tree::TerminalNode* CSharpParser::Switch_labelContext::DEFAULT() {
  return getToken(CSharpParser::DEFAULT, 0);
}


size_t CSharpParser::Switch_labelContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_label;
}

void CSharpParser::Switch_labelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_label(this);
}

void CSharpParser::Switch_labelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_label(this);
}

CSharpParser::Switch_labelContext* CSharpParser::switch_label() {
  Switch_labelContext *_localctx = _tracker.createInstance<Switch_labelContext>(_ctx, getState());
  enterRule(_localctx, 186, CSharpParser::RuleSwitch_label);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1485);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1476);
        match(CSharpParser::CASE);
        setState(1477);
        expression();
        setState(1479);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::WHEN) {
          setState(1478);
          case_guard();
        }
        setState(1481);
        match(CSharpParser::COLON);
        break;
      }

      case CSharpParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1483);
        match(CSharpParser::DEFAULT);
        setState(1484);
        match(CSharpParser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_guardContext ------------------------------------------------------------------

CSharpParser::Case_guardContext::Case_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Case_guardContext::WHEN() {
  return getToken(CSharpParser::WHEN, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Case_guardContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Case_guardContext::getRuleIndex() const {
  return CSharpParser::RuleCase_guard;
}

void CSharpParser::Case_guardContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_guard(this);
}

void CSharpParser::Case_guardContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_guard(this);
}

CSharpParser::Case_guardContext* CSharpParser::case_guard() {
  Case_guardContext *_localctx = _tracker.createInstance<Case_guardContext>(_ctx, getState());
  enterRule(_localctx, 188, CSharpParser::RuleCase_guard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1487);
    match(CSharpParser::WHEN);
    setState(1488);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_listContext ------------------------------------------------------------------

CSharpParser::Statement_listContext::Statement_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::StatementContext *> CSharpParser::Statement_listContext::statement() {
  return getRuleContexts<CSharpParser::StatementContext>();
}

CSharpParser::StatementContext* CSharpParser::Statement_listContext::statement(size_t i) {
  return getRuleContext<CSharpParser::StatementContext>(i);
}


size_t CSharpParser::Statement_listContext::getRuleIndex() const {
  return CSharpParser::RuleStatement_list;
}

void CSharpParser::Statement_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement_list(this);
}

void CSharpParser::Statement_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement_list(this);
}

CSharpParser::Statement_listContext* CSharpParser::statement_list() {
  Statement_listContext *_localctx = _tracker.createInstance<Statement_listContext>(_ctx, getState());
  enterRule(_localctx, 190, CSharpParser::RuleStatement_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1491); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1490);
              statement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1493); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_initializerContext ------------------------------------------------------------------

CSharpParser::For_initializerContext::For_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_variable_declarationContext* CSharpParser::For_initializerContext::local_variable_declaration() {
  return getRuleContext<CSharpParser::Local_variable_declarationContext>(0);
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::For_initializerContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::For_initializerContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::For_initializerContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::For_initializerContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::For_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleFor_initializer;
}

void CSharpParser::For_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_initializer(this);
}

void CSharpParser::For_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_initializer(this);
}

CSharpParser::For_initializerContext* CSharpParser::for_initializer() {
  For_initializerContext *_localctx = _tracker.createInstance<For_initializerContext>(_ctx, getState());
  enterRule(_localctx, 192, CSharpParser::RuleFor_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1504);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1495);
      local_variable_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1496);
      expression();
      setState(1501);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CSharpParser::COMMA) {
        setState(1497);
        match(CSharpParser::COMMA);
        setState(1498);
        expression();
        setState(1503);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_iteratorContext ------------------------------------------------------------------

CSharpParser::For_iteratorContext::For_iteratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::For_iteratorContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::For_iteratorContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::For_iteratorContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::For_iteratorContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::For_iteratorContext::getRuleIndex() const {
  return CSharpParser::RuleFor_iterator;
}

void CSharpParser::For_iteratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_iterator(this);
}

void CSharpParser::For_iteratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_iterator(this);
}

CSharpParser::For_iteratorContext* CSharpParser::for_iterator() {
  For_iteratorContext *_localctx = _tracker.createInstance<For_iteratorContext>(_ctx, getState());
  enterRule(_localctx, 194, CSharpParser::RuleFor_iterator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1506);
    expression();
    setState(1511);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1507);
      match(CSharpParser::COMMA);
      setState(1508);
      expression();
      setState(1513);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Catch_clausesContext ------------------------------------------------------------------

CSharpParser::Catch_clausesContext::Catch_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Specific_catch_clauseContext *> CSharpParser::Catch_clausesContext::specific_catch_clause() {
  return getRuleContexts<CSharpParser::Specific_catch_clauseContext>();
}

CSharpParser::Specific_catch_clauseContext* CSharpParser::Catch_clausesContext::specific_catch_clause(size_t i) {
  return getRuleContext<CSharpParser::Specific_catch_clauseContext>(i);
}

CSharpParser::General_catch_clauseContext* CSharpParser::Catch_clausesContext::general_catch_clause() {
  return getRuleContext<CSharpParser::General_catch_clauseContext>(0);
}


size_t CSharpParser::Catch_clausesContext::getRuleIndex() const {
  return CSharpParser::RuleCatch_clauses;
}

void CSharpParser::Catch_clausesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatch_clauses(this);
}

void CSharpParser::Catch_clausesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatch_clauses(this);
}

CSharpParser::Catch_clausesContext* CSharpParser::catch_clauses() {
  Catch_clausesContext *_localctx = _tracker.createInstance<Catch_clausesContext>(_ctx, getState());
  enterRule(_localctx, 196, CSharpParser::RuleCatch_clauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1525);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1514);
      specific_catch_clause();
      setState(1518);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1515);
          specific_catch_clause(); 
        }
        setState(1520);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
      }
      setState(1522);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::CATCH) {
        setState(1521);
        general_catch_clause();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1524);
      general_catch_clause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specific_catch_clauseContext ------------------------------------------------------------------

CSharpParser::Specific_catch_clauseContext::Specific_catch_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Specific_catch_clauseContext::CATCH() {
  return getToken(CSharpParser::CATCH, 0);
}

tree::TerminalNode* CSharpParser::Specific_catch_clauseContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Class_typeContext* CSharpParser::Specific_catch_clauseContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Specific_catch_clauseContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::BlockContext* CSharpParser::Specific_catch_clauseContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Specific_catch_clauseContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Exception_filterContext* CSharpParser::Specific_catch_clauseContext::exception_filter() {
  return getRuleContext<CSharpParser::Exception_filterContext>(0);
}


size_t CSharpParser::Specific_catch_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleSpecific_catch_clause;
}

void CSharpParser::Specific_catch_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecific_catch_clause(this);
}

void CSharpParser::Specific_catch_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecific_catch_clause(this);
}

CSharpParser::Specific_catch_clauseContext* CSharpParser::specific_catch_clause() {
  Specific_catch_clauseContext *_localctx = _tracker.createInstance<Specific_catch_clauseContext>(_ctx, getState());
  enterRule(_localctx, 198, CSharpParser::RuleSpecific_catch_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1527);
    match(CSharpParser::CATCH);
    setState(1528);
    match(CSharpParser::OPEN_PARENS);
    setState(1529);
    class_type();
    setState(1531);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64)))) != 0)) {
      setState(1530);
      identifier();
    }
    setState(1533);
    match(CSharpParser::CLOSE_PARENS);
    setState(1535);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHEN) {
      setState(1534);
      exception_filter();
    }
    setState(1537);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- General_catch_clauseContext ------------------------------------------------------------------

CSharpParser::General_catch_clauseContext::General_catch_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::General_catch_clauseContext::CATCH() {
  return getToken(CSharpParser::CATCH, 0);
}

CSharpParser::BlockContext* CSharpParser::General_catch_clauseContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Exception_filterContext* CSharpParser::General_catch_clauseContext::exception_filter() {
  return getRuleContext<CSharpParser::Exception_filterContext>(0);
}


size_t CSharpParser::General_catch_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleGeneral_catch_clause;
}

void CSharpParser::General_catch_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneral_catch_clause(this);
}

void CSharpParser::General_catch_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneral_catch_clause(this);
}

CSharpParser::General_catch_clauseContext* CSharpParser::general_catch_clause() {
  General_catch_clauseContext *_localctx = _tracker.createInstance<General_catch_clauseContext>(_ctx, getState());
  enterRule(_localctx, 200, CSharpParser::RuleGeneral_catch_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1539);
    match(CSharpParser::CATCH);
    setState(1541);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHEN) {
      setState(1540);
      exception_filter();
    }
    setState(1543);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exception_filterContext ------------------------------------------------------------------

CSharpParser::Exception_filterContext::Exception_filterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Exception_filterContext::WHEN() {
  return getToken(CSharpParser::WHEN, 0);
}

tree::TerminalNode* CSharpParser::Exception_filterContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Exception_filterContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Exception_filterContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}


size_t CSharpParser::Exception_filterContext::getRuleIndex() const {
  return CSharpParser::RuleException_filter;
}

void CSharpParser::Exception_filterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterException_filter(this);
}

void CSharpParser::Exception_filterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitException_filter(this);
}

CSharpParser::Exception_filterContext* CSharpParser::exception_filter() {
  Exception_filterContext *_localctx = _tracker.createInstance<Exception_filterContext>(_ctx, getState());
  enterRule(_localctx, 202, CSharpParser::RuleException_filter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1545);
    match(CSharpParser::WHEN);
    setState(1546);
    match(CSharpParser::OPEN_PARENS);
    setState(1547);
    expression();
    setState(1548);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally_clauseContext ------------------------------------------------------------------

CSharpParser::Finally_clauseContext::Finally_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Finally_clauseContext::FINALLY() {
  return getToken(CSharpParser::FINALLY, 0);
}

CSharpParser::BlockContext* CSharpParser::Finally_clauseContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}


size_t CSharpParser::Finally_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleFinally_clause;
}

void CSharpParser::Finally_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinally_clause(this);
}

void CSharpParser::Finally_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinally_clause(this);
}

CSharpParser::Finally_clauseContext* CSharpParser::finally_clause() {
  Finally_clauseContext *_localctx = _tracker.createInstance<Finally_clauseContext>(_ctx, getState());
  enterRule(_localctx, 204, CSharpParser::RuleFinally_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1550);
    match(CSharpParser::FINALLY);
    setState(1551);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Resource_acquisitionContext ------------------------------------------------------------------

CSharpParser::Resource_acquisitionContext::Resource_acquisitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_variable_declarationContext* CSharpParser::Resource_acquisitionContext::local_variable_declaration() {
  return getRuleContext<CSharpParser::Local_variable_declarationContext>(0);
}

CSharpParser::ExpressionContext* CSharpParser::Resource_acquisitionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Resource_acquisitionContext::getRuleIndex() const {
  return CSharpParser::RuleResource_acquisition;
}

void CSharpParser::Resource_acquisitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResource_acquisition(this);
}

void CSharpParser::Resource_acquisitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResource_acquisition(this);
}

CSharpParser::Resource_acquisitionContext* CSharpParser::resource_acquisition() {
  Resource_acquisitionContext *_localctx = _tracker.createInstance<Resource_acquisitionContext>(_ctx, getState());
  enterRule(_localctx, 206, CSharpParser::RuleResource_acquisition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1555);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1553);
      local_variable_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1554);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_declarationContext ------------------------------------------------------------------

CSharpParser::Namespace_declarationContext::Namespace_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Namespace_declarationContext::NAMESPACE() {
  return getToken(CSharpParser::NAMESPACE, 0);
}

CSharpParser::Namespace_bodyContext* CSharpParser::Namespace_declarationContext::namespace_body() {
  return getRuleContext<CSharpParser::Namespace_bodyContext>(0);
}

CSharpParser::Qualified_identifierContext* CSharpParser::Namespace_declarationContext::qualified_identifier() {
  return getRuleContext<CSharpParser::Qualified_identifierContext>(0);
}

tree::TerminalNode* CSharpParser::Namespace_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Namespace_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_declaration;
}

void CSharpParser::Namespace_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_declaration(this);
}

void CSharpParser::Namespace_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_declaration(this);
}

CSharpParser::Namespace_declarationContext* CSharpParser::namespace_declaration() {
  Namespace_declarationContext *_localctx = _tracker.createInstance<Namespace_declarationContext>(_ctx, getState());
  enterRule(_localctx, 208, CSharpParser::RuleNamespace_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1557);
    match(CSharpParser::NAMESPACE);
    setState(1558);
    dynamic_cast<Namespace_declarationContext *>(_localctx)->qi = qualified_identifier();
    setState(1559);
    namespace_body();
    setState(1561);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(1560);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_identifierContext ------------------------------------------------------------------

CSharpParser::Qualified_identifierContext::Qualified_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Qualified_identifierContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Qualified_identifierContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Qualified_identifierContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::Qualified_identifierContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}


size_t CSharpParser::Qualified_identifierContext::getRuleIndex() const {
  return CSharpParser::RuleQualified_identifier;
}

void CSharpParser::Qualified_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_identifier(this);
}

void CSharpParser::Qualified_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_identifier(this);
}

CSharpParser::Qualified_identifierContext* CSharpParser::qualified_identifier() {
  Qualified_identifierContext *_localctx = _tracker.createInstance<Qualified_identifierContext>(_ctx, getState());
  enterRule(_localctx, 210, CSharpParser::RuleQualified_identifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1563);
    identifier();
    setState(1568);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::DOT) {
      setState(1564);
      match(CSharpParser::DOT);
      setState(1565);
      identifier();
      setState(1570);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_bodyContext ------------------------------------------------------------------

CSharpParser::Namespace_bodyContext::Namespace_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Namespace_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Namespace_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Extern_alias_directivesContext* CSharpParser::Namespace_bodyContext::extern_alias_directives() {
  return getRuleContext<CSharpParser::Extern_alias_directivesContext>(0);
}

CSharpParser::Using_directivesContext* CSharpParser::Namespace_bodyContext::using_directives() {
  return getRuleContext<CSharpParser::Using_directivesContext>(0);
}

CSharpParser::Namespace_member_declarationsContext* CSharpParser::Namespace_bodyContext::namespace_member_declarations() {
  return getRuleContext<CSharpParser::Namespace_member_declarationsContext>(0);
}


size_t CSharpParser::Namespace_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_body;
}

void CSharpParser::Namespace_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body(this);
}

void CSharpParser::Namespace_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body(this);
}

CSharpParser::Namespace_bodyContext* CSharpParser::namespace_body() {
  Namespace_bodyContext *_localctx = _tracker.createInstance<Namespace_bodyContext>(_ctx, getState());
  enterRule(_localctx, 212, CSharpParser::RuleNamespace_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1571);
    match(CSharpParser::OPEN_BRACE);
    setState(1573);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      setState(1572);
      extern_alias_directives();
      break;
    }

    default:
      break;
    }
    setState(1576);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::USING) {
      setState(1575);
      using_directives();
    }
    setState(1579);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ABSTRACT)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::CLASS)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::ENUM)
      | (1ULL << CSharpParser::EXTERN)
      | (1ULL << CSharpParser::INTERFACE)
      | (1ULL << CSharpParser::INTERNAL))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (CSharpParser::NAMESPACE - 65))
      | (1ULL << (CSharpParser::NEW - 65))
      | (1ULL << (CSharpParser::OVERRIDE - 65))
      | (1ULL << (CSharpParser::PARTIAL - 65))
      | (1ULL << (CSharpParser::PRIVATE - 65))
      | (1ULL << (CSharpParser::PROTECTED - 65))
      | (1ULL << (CSharpParser::PUBLIC - 65))
      | (1ULL << (CSharpParser::READONLY - 65))
      | (1ULL << (CSharpParser::REF - 65))
      | (1ULL << (CSharpParser::SEALED - 65))
      | (1ULL << (CSharpParser::STATIC - 65))
      | (1ULL << (CSharpParser::STRUCT - 65))
      | (1ULL << (CSharpParser::UNSAFE - 65))
      | (1ULL << (CSharpParser::VIRTUAL - 65))
      | (1ULL << (CSharpParser::VOLATILE - 65))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 65)))) != 0)) {
      setState(1578);
      namespace_member_declarations();
    }
    setState(1581);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extern_alias_directivesContext ------------------------------------------------------------------

CSharpParser::Extern_alias_directivesContext::Extern_alias_directivesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Extern_alias_directiveContext *> CSharpParser::Extern_alias_directivesContext::extern_alias_directive() {
  return getRuleContexts<CSharpParser::Extern_alias_directiveContext>();
}

CSharpParser::Extern_alias_directiveContext* CSharpParser::Extern_alias_directivesContext::extern_alias_directive(size_t i) {
  return getRuleContext<CSharpParser::Extern_alias_directiveContext>(i);
}


size_t CSharpParser::Extern_alias_directivesContext::getRuleIndex() const {
  return CSharpParser::RuleExtern_alias_directives;
}

void CSharpParser::Extern_alias_directivesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtern_alias_directives(this);
}

void CSharpParser::Extern_alias_directivesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtern_alias_directives(this);
}

CSharpParser::Extern_alias_directivesContext* CSharpParser::extern_alias_directives() {
  Extern_alias_directivesContext *_localctx = _tracker.createInstance<Extern_alias_directivesContext>(_ctx, getState());
  enterRule(_localctx, 214, CSharpParser::RuleExtern_alias_directives);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1584); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1583);
              extern_alias_directive();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1586); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extern_alias_directiveContext ------------------------------------------------------------------

CSharpParser::Extern_alias_directiveContext::Extern_alias_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Extern_alias_directiveContext::EXTERN() {
  return getToken(CSharpParser::EXTERN, 0);
}

tree::TerminalNode* CSharpParser::Extern_alias_directiveContext::ALIAS() {
  return getToken(CSharpParser::ALIAS, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Extern_alias_directiveContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Extern_alias_directiveContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Extern_alias_directiveContext::getRuleIndex() const {
  return CSharpParser::RuleExtern_alias_directive;
}

void CSharpParser::Extern_alias_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtern_alias_directive(this);
}

void CSharpParser::Extern_alias_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtern_alias_directive(this);
}

CSharpParser::Extern_alias_directiveContext* CSharpParser::extern_alias_directive() {
  Extern_alias_directiveContext *_localctx = _tracker.createInstance<Extern_alias_directiveContext>(_ctx, getState());
  enterRule(_localctx, 216, CSharpParser::RuleExtern_alias_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1588);
    match(CSharpParser::EXTERN);
    setState(1589);
    match(CSharpParser::ALIAS);
    setState(1590);
    identifier();
    setState(1591);
    match(CSharpParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Using_directivesContext ------------------------------------------------------------------

CSharpParser::Using_directivesContext::Using_directivesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Using_directiveContext *> CSharpParser::Using_directivesContext::using_directive() {
  return getRuleContexts<CSharpParser::Using_directiveContext>();
}

CSharpParser::Using_directiveContext* CSharpParser::Using_directivesContext::using_directive(size_t i) {
  return getRuleContext<CSharpParser::Using_directiveContext>(i);
}


size_t CSharpParser::Using_directivesContext::getRuleIndex() const {
  return CSharpParser::RuleUsing_directives;
}

void CSharpParser::Using_directivesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsing_directives(this);
}

void CSharpParser::Using_directivesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsing_directives(this);
}

CSharpParser::Using_directivesContext* CSharpParser::using_directives() {
  Using_directivesContext *_localctx = _tracker.createInstance<Using_directivesContext>(_ctx, getState());
  enterRule(_localctx, 218, CSharpParser::RuleUsing_directives);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1594); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1593);
      using_directive();
      setState(1596); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CSharpParser::USING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Using_directiveContext ------------------------------------------------------------------

CSharpParser::Using_directiveContext::Using_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CSharpParser::Using_directiveContext::getRuleIndex() const {
  return CSharpParser::RuleUsing_directive;
}

void CSharpParser::Using_directiveContext::copyFrom(Using_directiveContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UsingAliasDirectiveContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UsingAliasDirectiveContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

CSharpParser::IdentifierContext* CSharpParser::UsingAliasDirectiveContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::UsingAliasDirectiveContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::UsingAliasDirectiveContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::UsingAliasDirectiveContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::UsingAliasDirectiveContext::UsingAliasDirectiveContext(Using_directiveContext *ctx) { copyFrom(ctx); }

void CSharpParser::UsingAliasDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingAliasDirective(this);
}
void CSharpParser::UsingAliasDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingAliasDirective(this);
}
//----------------- UsingNamespaceDirectiveContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UsingNamespaceDirectiveContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::UsingNamespaceDirectiveContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::UsingNamespaceDirectiveContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::UsingNamespaceDirectiveContext::UsingNamespaceDirectiveContext(Using_directiveContext *ctx) { copyFrom(ctx); }

void CSharpParser::UsingNamespaceDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingNamespaceDirective(this);
}
void CSharpParser::UsingNamespaceDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingNamespaceDirective(this);
}
//----------------- UsingStaticDirectiveContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UsingStaticDirectiveContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

tree::TerminalNode* CSharpParser::UsingStaticDirectiveContext::STATIC() {
  return getToken(CSharpParser::STATIC, 0);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::UsingStaticDirectiveContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::UsingStaticDirectiveContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::UsingStaticDirectiveContext::UsingStaticDirectiveContext(Using_directiveContext *ctx) { copyFrom(ctx); }

void CSharpParser::UsingStaticDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingStaticDirective(this);
}
void CSharpParser::UsingStaticDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingStaticDirective(this);
}
CSharpParser::Using_directiveContext* CSharpParser::using_directive() {
  Using_directiveContext *_localctx = _tracker.createInstance<Using_directiveContext>(_ctx, getState());
  enterRule(_localctx, 220, CSharpParser::RuleUsing_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1613);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
      _localctx = dynamic_cast<Using_directiveContext *>(_tracker.createInstance<CSharpParser::UsingAliasDirectiveContext>(_localctx));
      enterOuterAlt(_localctx, 1);
      setState(1598);
      match(CSharpParser::USING);
      setState(1599);
      identifier();
      setState(1600);
      match(CSharpParser::ASSIGNMENT);
      setState(1601);
      namespace_or_type_name();
      setState(1602);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 2: {
      _localctx = dynamic_cast<Using_directiveContext *>(_tracker.createInstance<CSharpParser::UsingNamespaceDirectiveContext>(_localctx));
      enterOuterAlt(_localctx, 2);
      setState(1604);
      match(CSharpParser::USING);
      setState(1605);
      namespace_or_type_name();
      setState(1606);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 3: {
      _localctx = dynamic_cast<Using_directiveContext *>(_tracker.createInstance<CSharpParser::UsingStaticDirectiveContext>(_localctx));
      enterOuterAlt(_localctx, 3);
      setState(1608);
      match(CSharpParser::USING);
      setState(1609);
      match(CSharpParser::STATIC);
      setState(1610);
      namespace_or_type_name();
      setState(1611);
      match(CSharpParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_member_declarationsContext ------------------------------------------------------------------

CSharpParser::Namespace_member_declarationsContext::Namespace_member_declarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Namespace_member_declarationContext *> CSharpParser::Namespace_member_declarationsContext::namespace_member_declaration() {
  return getRuleContexts<CSharpParser::Namespace_member_declarationContext>();
}

CSharpParser::Namespace_member_declarationContext* CSharpParser::Namespace_member_declarationsContext::namespace_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Namespace_member_declarationContext>(i);
}


size_t CSharpParser::Namespace_member_declarationsContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_member_declarations;
}

void CSharpParser::Namespace_member_declarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_member_declarations(this);
}

void CSharpParser::Namespace_member_declarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_member_declarations(this);
}

CSharpParser::Namespace_member_declarationsContext* CSharpParser::namespace_member_declarations() {
  Namespace_member_declarationsContext *_localctx = _tracker.createInstance<Namespace_member_declarationsContext>(_ctx, getState());
  enterRule(_localctx, 222, CSharpParser::RuleNamespace_member_declarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1616); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1615);
      namespace_member_declaration();
      setState(1618); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ABSTRACT)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::CLASS)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::ENUM)
      | (1ULL << CSharpParser::EXTERN)
      | (1ULL << CSharpParser::INTERFACE)
      | (1ULL << CSharpParser::INTERNAL))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (CSharpParser::NAMESPACE - 65))
      | (1ULL << (CSharpParser::NEW - 65))
      | (1ULL << (CSharpParser::OVERRIDE - 65))
      | (1ULL << (CSharpParser::PARTIAL - 65))
      | (1ULL << (CSharpParser::PRIVATE - 65))
      | (1ULL << (CSharpParser::PROTECTED - 65))
      | (1ULL << (CSharpParser::PUBLIC - 65))
      | (1ULL << (CSharpParser::READONLY - 65))
      | (1ULL << (CSharpParser::REF - 65))
      | (1ULL << (CSharpParser::SEALED - 65))
      | (1ULL << (CSharpParser::STATIC - 65))
      | (1ULL << (CSharpParser::STRUCT - 65))
      | (1ULL << (CSharpParser::UNSAFE - 65))
      | (1ULL << (CSharpParser::VIRTUAL - 65))
      | (1ULL << (CSharpParser::VOLATILE - 65))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 65)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_member_declarationContext ------------------------------------------------------------------

CSharpParser::Namespace_member_declarationContext::Namespace_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Namespace_declarationContext* CSharpParser::Namespace_member_declarationContext::namespace_declaration() {
  return getRuleContext<CSharpParser::Namespace_declarationContext>(0);
}

CSharpParser::Type_declarationContext* CSharpParser::Namespace_member_declarationContext::type_declaration() {
  return getRuleContext<CSharpParser::Type_declarationContext>(0);
}


size_t CSharpParser::Namespace_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_member_declaration;
}

void CSharpParser::Namespace_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_member_declaration(this);
}

void CSharpParser::Namespace_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_member_declaration(this);
}

CSharpParser::Namespace_member_declarationContext* CSharpParser::namespace_member_declaration() {
  Namespace_member_declarationContext *_localctx = _tracker.createInstance<Namespace_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 224, CSharpParser::RuleNamespace_member_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1622);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::NAMESPACE: {
        enterOuterAlt(_localctx, 1);
        setState(1620);
        namespace_declaration();
        break;
      }

      case CSharpParser::ABSTRACT:
      case CSharpParser::ASYNC:
      case CSharpParser::CLASS:
      case CSharpParser::DELEGATE:
      case CSharpParser::ENUM:
      case CSharpParser::EXTERN:
      case CSharpParser::INTERFACE:
      case CSharpParser::INTERNAL:
      case CSharpParser::NEW:
      case CSharpParser::OVERRIDE:
      case CSharpParser::PARTIAL:
      case CSharpParser::PRIVATE:
      case CSharpParser::PROTECTED:
      case CSharpParser::PUBLIC:
      case CSharpParser::READONLY:
      case CSharpParser::REF:
      case CSharpParser::SEALED:
      case CSharpParser::STATIC:
      case CSharpParser::STRUCT:
      case CSharpParser::UNSAFE:
      case CSharpParser::VIRTUAL:
      case CSharpParser::VOLATILE:
      case CSharpParser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(1621);
        type_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_declarationContext ------------------------------------------------------------------

CSharpParser::Type_declarationContext::Type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Class_definitionContext* CSharpParser::Type_declarationContext::class_definition() {
  return getRuleContext<CSharpParser::Class_definitionContext>(0);
}

CSharpParser::Struct_definitionContext* CSharpParser::Type_declarationContext::struct_definition() {
  return getRuleContext<CSharpParser::Struct_definitionContext>(0);
}

CSharpParser::Interface_definitionContext* CSharpParser::Type_declarationContext::interface_definition() {
  return getRuleContext<CSharpParser::Interface_definitionContext>(0);
}

CSharpParser::Enum_definitionContext* CSharpParser::Type_declarationContext::enum_definition() {
  return getRuleContext<CSharpParser::Enum_definitionContext>(0);
}

CSharpParser::Delegate_definitionContext* CSharpParser::Type_declarationContext::delegate_definition() {
  return getRuleContext<CSharpParser::Delegate_definitionContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Type_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::All_member_modifiersContext* CSharpParser::Type_declarationContext::all_member_modifiers() {
  return getRuleContext<CSharpParser::All_member_modifiersContext>(0);
}


size_t CSharpParser::Type_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleType_declaration;
}

void CSharpParser::Type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_declaration(this);
}

void CSharpParser::Type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_declaration(this);
}

CSharpParser::Type_declarationContext* CSharpParser::type_declaration() {
  Type_declarationContext *_localctx = _tracker.createInstance<Type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 226, CSharpParser::RuleType_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1625);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1624);
      attributes();
    }
    setState(1628);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      setState(1627);
      all_member_modifiers();
      break;
    }

    default:
      break;
    }
    setState(1635);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::CLASS: {
        setState(1630);
        class_definition();
        break;
      }

      case CSharpParser::READONLY:
      case CSharpParser::REF:
      case CSharpParser::STRUCT: {
        setState(1631);
        struct_definition();
        break;
      }

      case CSharpParser::INTERFACE: {
        setState(1632);
        interface_definition();
        break;
      }

      case CSharpParser::ENUM: {
        setState(1633);
        enum_definition();
        break;
      }

      case CSharpParser::DELEGATE: {
        setState(1634);
        delegate_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_alias_memberContext ------------------------------------------------------------------

CSharpParser::Qualified_alias_memberContext::Qualified_alias_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Qualified_alias_memberContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Qualified_alias_memberContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::Qualified_alias_memberContext::DOUBLE_COLON() {
  return getToken(CSharpParser::DOUBLE_COLON, 0);
}

CSharpParser::Type_argument_listContext* CSharpParser::Qualified_alias_memberContext::type_argument_list() {
  return getRuleContext<CSharpParser::Type_argument_listContext>(0);
}


size_t CSharpParser::Qualified_alias_memberContext::getRuleIndex() const {
  return CSharpParser::RuleQualified_alias_member;
}

void CSharpParser::Qualified_alias_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_alias_member(this);
}

void CSharpParser::Qualified_alias_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_alias_member(this);
}

CSharpParser::Qualified_alias_memberContext* CSharpParser::qualified_alias_member() {
  Qualified_alias_memberContext *_localctx = _tracker.createInstance<Qualified_alias_memberContext>(_ctx, getState());
  enterRule(_localctx, 228, CSharpParser::RuleQualified_alias_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1637);
    identifier();
    setState(1638);
    match(CSharpParser::DOUBLE_COLON);
    setState(1639);
    identifier();
    setState(1641);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      setState(1640);
      type_argument_list();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameter_listContext ------------------------------------------------------------------

CSharpParser::Type_parameter_listContext::Type_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Type_parameter_listContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

std::vector<CSharpParser::Type_parameterContext *> CSharpParser::Type_parameter_listContext::type_parameter() {
  return getRuleContexts<CSharpParser::Type_parameterContext>();
}

CSharpParser::Type_parameterContext* CSharpParser::Type_parameter_listContext::type_parameter(size_t i) {
  return getRuleContext<CSharpParser::Type_parameterContext>(i);
}

tree::TerminalNode* CSharpParser::Type_parameter_listContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_parameter_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Type_parameter_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Type_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter_list;
}

void CSharpParser::Type_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter_list(this);
}

void CSharpParser::Type_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter_list(this);
}

CSharpParser::Type_parameter_listContext* CSharpParser::type_parameter_list() {
  Type_parameter_listContext *_localctx = _tracker.createInstance<Type_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 230, CSharpParser::RuleType_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1643);
    match(CSharpParser::LT);
    setState(1644);
    type_parameter();
    setState(1649);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1645);
      match(CSharpParser::COMMA);
      setState(1646);
      type_parameter();
      setState(1651);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1652);
    match(CSharpParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameterContext ------------------------------------------------------------------

CSharpParser::Type_parameterContext::Type_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Type_parameterContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Type_parameterContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Type_parameterContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter;
}

void CSharpParser::Type_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter(this);
}

void CSharpParser::Type_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter(this);
}

CSharpParser::Type_parameterContext* CSharpParser::type_parameter() {
  Type_parameterContext *_localctx = _tracker.createInstance<Type_parameterContext>(_ctx, getState());
  enterRule(_localctx, 232, CSharpParser::RuleType_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1655);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1654);
      attributes();
    }
    setState(1657);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_baseContext ------------------------------------------------------------------

CSharpParser::Class_baseContext::Class_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Class_baseContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Class_typeContext* CSharpParser::Class_baseContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Class_baseContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Class_baseContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

std::vector<CSharpParser::Namespace_or_type_nameContext *> CSharpParser::Class_baseContext::namespace_or_type_name() {
  return getRuleContexts<CSharpParser::Namespace_or_type_nameContext>();
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Class_baseContext::namespace_or_type_name(size_t i) {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(i);
}


size_t CSharpParser::Class_baseContext::getRuleIndex() const {
  return CSharpParser::RuleClass_base;
}

void CSharpParser::Class_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_base(this);
}

void CSharpParser::Class_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_base(this);
}

CSharpParser::Class_baseContext* CSharpParser::class_base() {
  Class_baseContext *_localctx = _tracker.createInstance<Class_baseContext>(_ctx, getState());
  enterRule(_localctx, 234, CSharpParser::RuleClass_base);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1659);
    match(CSharpParser::COLON);
    setState(1660);
    class_type();
    setState(1665);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1661);
      match(CSharpParser::COMMA);
      setState(1662);
      namespace_or_type_name();
      setState(1667);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_type_listContext ------------------------------------------------------------------

CSharpParser::Interface_type_listContext::Interface_type_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Namespace_or_type_nameContext *> CSharpParser::Interface_type_listContext::namespace_or_type_name() {
  return getRuleContexts<CSharpParser::Namespace_or_type_nameContext>();
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Interface_type_listContext::namespace_or_type_name(size_t i) {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Interface_type_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Interface_type_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Interface_type_listContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_type_list;
}

void CSharpParser::Interface_type_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_type_list(this);
}

void CSharpParser::Interface_type_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_type_list(this);
}

CSharpParser::Interface_type_listContext* CSharpParser::interface_type_list() {
  Interface_type_listContext *_localctx = _tracker.createInstance<Interface_type_listContext>(_ctx, getState());
  enterRule(_localctx, 236, CSharpParser::RuleInterface_type_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1668);
    namespace_or_type_name();
    setState(1673);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1669);
      match(CSharpParser::COMMA);
      setState(1670);
      namespace_or_type_name();
      setState(1675);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameter_constraints_clausesContext ------------------------------------------------------------------

CSharpParser::Type_parameter_constraints_clausesContext::Type_parameter_constraints_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Type_parameter_constraints_clauseContext *> CSharpParser::Type_parameter_constraints_clausesContext::type_parameter_constraints_clause() {
  return getRuleContexts<CSharpParser::Type_parameter_constraints_clauseContext>();
}

CSharpParser::Type_parameter_constraints_clauseContext* CSharpParser::Type_parameter_constraints_clausesContext::type_parameter_constraints_clause(size_t i) {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clauseContext>(i);
}


size_t CSharpParser::Type_parameter_constraints_clausesContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter_constraints_clauses;
}

void CSharpParser::Type_parameter_constraints_clausesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter_constraints_clauses(this);
}

void CSharpParser::Type_parameter_constraints_clausesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter_constraints_clauses(this);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::type_parameter_constraints_clauses() {
  Type_parameter_constraints_clausesContext *_localctx = _tracker.createInstance<Type_parameter_constraints_clausesContext>(_ctx, getState());
  enterRule(_localctx, 238, CSharpParser::RuleType_parameter_constraints_clauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1677); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1676);
      type_parameter_constraints_clause();
      setState(1679); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CSharpParser::WHERE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameter_constraints_clauseContext ------------------------------------------------------------------

CSharpParser::Type_parameter_constraints_clauseContext::Type_parameter_constraints_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Type_parameter_constraints_clauseContext::WHERE() {
  return getToken(CSharpParser::WHERE, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Type_parameter_constraints_clauseContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Type_parameter_constraints_clauseContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Type_parameter_constraintsContext* CSharpParser::Type_parameter_constraints_clauseContext::type_parameter_constraints() {
  return getRuleContext<CSharpParser::Type_parameter_constraintsContext>(0);
}


size_t CSharpParser::Type_parameter_constraints_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter_constraints_clause;
}

void CSharpParser::Type_parameter_constraints_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter_constraints_clause(this);
}

void CSharpParser::Type_parameter_constraints_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter_constraints_clause(this);
}

CSharpParser::Type_parameter_constraints_clauseContext* CSharpParser::type_parameter_constraints_clause() {
  Type_parameter_constraints_clauseContext *_localctx = _tracker.createInstance<Type_parameter_constraints_clauseContext>(_ctx, getState());
  enterRule(_localctx, 240, CSharpParser::RuleType_parameter_constraints_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1681);
    match(CSharpParser::WHERE);
    setState(1682);
    identifier();
    setState(1683);
    match(CSharpParser::COLON);
    setState(1684);
    type_parameter_constraints();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameter_constraintsContext ------------------------------------------------------------------

CSharpParser::Type_parameter_constraintsContext::Type_parameter_constraintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Constructor_constraintContext* CSharpParser::Type_parameter_constraintsContext::constructor_constraint() {
  return getRuleContext<CSharpParser::Constructor_constraintContext>(0);
}

CSharpParser::Primary_constraintContext* CSharpParser::Type_parameter_constraintsContext::primary_constraint() {
  return getRuleContext<CSharpParser::Primary_constraintContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_parameter_constraintsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Type_parameter_constraintsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

CSharpParser::Secondary_constraintsContext* CSharpParser::Type_parameter_constraintsContext::secondary_constraints() {
  return getRuleContext<CSharpParser::Secondary_constraintsContext>(0);
}


size_t CSharpParser::Type_parameter_constraintsContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter_constraints;
}

void CSharpParser::Type_parameter_constraintsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter_constraints(this);
}

void CSharpParser::Type_parameter_constraintsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter_constraints(this);
}

CSharpParser::Type_parameter_constraintsContext* CSharpParser::type_parameter_constraints() {
  Type_parameter_constraintsContext *_localctx = _tracker.createInstance<Type_parameter_constraintsContext>(_ctx, getState());
  enterRule(_localctx, 242, CSharpParser::RuleType_parameter_constraints);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1696);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::NEW: {
        enterOuterAlt(_localctx, 1);
        setState(1686);
        constructor_constraint();
        break;
      }

      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BY:
      case CSharpParser::CLASS:
      case CSharpParser::DESCENDING:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::STRING:
      case CSharpParser::STRUCT:
      case CSharpParser::UNMANAGED:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1687);
        primary_constraint();
        setState(1690);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
        case 1: {
          setState(1688);
          match(CSharpParser::COMMA);
          setState(1689);
          secondary_constraints();
          break;
        }

        default:
          break;
        }
        setState(1694);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::COMMA) {
          setState(1692);
          match(CSharpParser::COMMA);
          setState(1693);
          constructor_constraint();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_constraintContext ------------------------------------------------------------------

CSharpParser::Primary_constraintContext::Primary_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Class_typeContext* CSharpParser::Primary_constraintContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Primary_constraintContext::CLASS() {
  return getToken(CSharpParser::CLASS, 0);
}

tree::TerminalNode* CSharpParser::Primary_constraintContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

tree::TerminalNode* CSharpParser::Primary_constraintContext::STRUCT() {
  return getToken(CSharpParser::STRUCT, 0);
}

tree::TerminalNode* CSharpParser::Primary_constraintContext::UNMANAGED() {
  return getToken(CSharpParser::UNMANAGED, 0);
}


size_t CSharpParser::Primary_constraintContext::getRuleIndex() const {
  return CSharpParser::RulePrimary_constraint;
}

void CSharpParser::Primary_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_constraint(this);
}

void CSharpParser::Primary_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_constraint(this);
}

CSharpParser::Primary_constraintContext* CSharpParser::primary_constraint() {
  Primary_constraintContext *_localctx = _tracker.createInstance<Primary_constraintContext>(_ctx, getState());
  enterRule(_localctx, 244, CSharpParser::RulePrimary_constraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1705);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1698);
      class_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1699);
      match(CSharpParser::CLASS);
      setState(1701);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::INTERR) {
        setState(1700);
        match(CSharpParser::INTERR);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1703);
      match(CSharpParser::STRUCT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1704);
      match(CSharpParser::UNMANAGED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Secondary_constraintsContext ------------------------------------------------------------------

CSharpParser::Secondary_constraintsContext::Secondary_constraintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Namespace_or_type_nameContext *> CSharpParser::Secondary_constraintsContext::namespace_or_type_name() {
  return getRuleContexts<CSharpParser::Namespace_or_type_nameContext>();
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Secondary_constraintsContext::namespace_or_type_name(size_t i) {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Secondary_constraintsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Secondary_constraintsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Secondary_constraintsContext::getRuleIndex() const {
  return CSharpParser::RuleSecondary_constraints;
}

void CSharpParser::Secondary_constraintsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSecondary_constraints(this);
}

void CSharpParser::Secondary_constraintsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSecondary_constraints(this);
}

CSharpParser::Secondary_constraintsContext* CSharpParser::secondary_constraints() {
  Secondary_constraintsContext *_localctx = _tracker.createInstance<Secondary_constraintsContext>(_ctx, getState());
  enterRule(_localctx, 246, CSharpParser::RuleSecondary_constraints);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1707);
    namespace_or_type_name();
    setState(1712);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1708);
        match(CSharpParser::COMMA);
        setState(1709);
        namespace_or_type_name(); 
      }
      setState(1714);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constructor_constraintContext ------------------------------------------------------------------

CSharpParser::Constructor_constraintContext::Constructor_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Constructor_constraintContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

tree::TerminalNode* CSharpParser::Constructor_constraintContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Constructor_constraintContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}


size_t CSharpParser::Constructor_constraintContext::getRuleIndex() const {
  return CSharpParser::RuleConstructor_constraint;
}

void CSharpParser::Constructor_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructor_constraint(this);
}

void CSharpParser::Constructor_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructor_constraint(this);
}

CSharpParser::Constructor_constraintContext* CSharpParser::constructor_constraint() {
  Constructor_constraintContext *_localctx = _tracker.createInstance<Constructor_constraintContext>(_ctx, getState());
  enterRule(_localctx, 248, CSharpParser::RuleConstructor_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1715);
    match(CSharpParser::NEW);
    setState(1716);
    match(CSharpParser::OPEN_PARENS);
    setState(1717);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_bodyContext ------------------------------------------------------------------

CSharpParser::Class_bodyContext::Class_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Class_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Class_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Class_member_declarationsContext* CSharpParser::Class_bodyContext::class_member_declarations() {
  return getRuleContext<CSharpParser::Class_member_declarationsContext>(0);
}


size_t CSharpParser::Class_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleClass_body;
}

void CSharpParser::Class_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_body(this);
}

void CSharpParser::Class_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_body(this);
}

CSharpParser::Class_bodyContext* CSharpParser::class_body() {
  Class_bodyContext *_localctx = _tracker.createInstance<Class_bodyContext>(_ctx, getState());
  enterRule(_localctx, 250, CSharpParser::RuleClass_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1719);
    match(CSharpParser::OPEN_BRACE);
    setState(1721);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ABSTRACT)
      | (1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CLASS)
      | (1ULL << CSharpParser::CONST)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::ENUM)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::EVENT)
      | (1ULL << CSharpParser::EXPLICIT)
      | (1ULL << CSharpParser::EXTERN)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::IMPLICIT)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTERFACE)
      | (1ULL << CSharpParser::INTERNAL)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::NEW - 64))
      | (1ULL << (CSharpParser::OBJECT - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::OVERRIDE - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::PRIVATE - 64))
      | (1ULL << (CSharpParser::PROTECTED - 64))
      | (1ULL << (CSharpParser::PUBLIC - 64))
      | (1ULL << (CSharpParser::READONLY - 64))
      | (1ULL << (CSharpParser::REF - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SBYTE - 64))
      | (1ULL << (CSharpParser::SEALED - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::SHORT - 64))
      | (1ULL << (CSharpParser::STATIC - 64))
      | (1ULL << (CSharpParser::STRING - 64))
      | (1ULL << (CSharpParser::STRUCT - 64))
      | (1ULL << (CSharpParser::UINT - 64))
      | (1ULL << (CSharpParser::ULONG - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::UNSAFE - 64))
      | (1ULL << (CSharpParser::USHORT - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::VIRTUAL - 64))
      | (1ULL << (CSharpParser::VOID - 64))
      | (1ULL << (CSharpParser::VOLATILE - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 64)))) != 0) || _la == CSharpParser::OPEN_PARENS

    || _la == CSharpParser::TILDE) {
      setState(1720);
      class_member_declarations();
    }
    setState(1723);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_member_declarationsContext ------------------------------------------------------------------

CSharpParser::Class_member_declarationsContext::Class_member_declarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Class_member_declarationContext *> CSharpParser::Class_member_declarationsContext::class_member_declaration() {
  return getRuleContexts<CSharpParser::Class_member_declarationContext>();
}

CSharpParser::Class_member_declarationContext* CSharpParser::Class_member_declarationsContext::class_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Class_member_declarationContext>(i);
}


size_t CSharpParser::Class_member_declarationsContext::getRuleIndex() const {
  return CSharpParser::RuleClass_member_declarations;
}

void CSharpParser::Class_member_declarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_member_declarations(this);
}

void CSharpParser::Class_member_declarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_member_declarations(this);
}

CSharpParser::Class_member_declarationsContext* CSharpParser::class_member_declarations() {
  Class_member_declarationsContext *_localctx = _tracker.createInstance<Class_member_declarationsContext>(_ctx, getState());
  enterRule(_localctx, 252, CSharpParser::RuleClass_member_declarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1726); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1725);
      class_member_declaration();
      setState(1728); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ABSTRACT)
      | (1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CLASS)
      | (1ULL << CSharpParser::CONST)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::ENUM)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::EVENT)
      | (1ULL << CSharpParser::EXPLICIT)
      | (1ULL << CSharpParser::EXTERN)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::IMPLICIT)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTERFACE)
      | (1ULL << CSharpParser::INTERNAL)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::NEW - 64))
      | (1ULL << (CSharpParser::OBJECT - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::OVERRIDE - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::PRIVATE - 64))
      | (1ULL << (CSharpParser::PROTECTED - 64))
      | (1ULL << (CSharpParser::PUBLIC - 64))
      | (1ULL << (CSharpParser::READONLY - 64))
      | (1ULL << (CSharpParser::REF - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SBYTE - 64))
      | (1ULL << (CSharpParser::SEALED - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::SHORT - 64))
      | (1ULL << (CSharpParser::STATIC - 64))
      | (1ULL << (CSharpParser::STRING - 64))
      | (1ULL << (CSharpParser::STRUCT - 64))
      | (1ULL << (CSharpParser::UINT - 64))
      | (1ULL << (CSharpParser::ULONG - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::UNSAFE - 64))
      | (1ULL << (CSharpParser::USHORT - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::VIRTUAL - 64))
      | (1ULL << (CSharpParser::VOID - 64))
      | (1ULL << (CSharpParser::VOLATILE - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 64)))) != 0) || _la == CSharpParser::OPEN_PARENS

    || _la == CSharpParser::TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_member_declarationContext ------------------------------------------------------------------

CSharpParser::Class_member_declarationContext::Class_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Common_member_declarationContext* CSharpParser::Class_member_declarationContext::common_member_declaration() {
  return getRuleContext<CSharpParser::Common_member_declarationContext>(0);
}

CSharpParser::Destructor_definitionContext* CSharpParser::Class_member_declarationContext::destructor_definition() {
  return getRuleContext<CSharpParser::Destructor_definitionContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Class_member_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::All_member_modifiersContext* CSharpParser::Class_member_declarationContext::all_member_modifiers() {
  return getRuleContext<CSharpParser::All_member_modifiersContext>(0);
}


size_t CSharpParser::Class_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleClass_member_declaration;
}

void CSharpParser::Class_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_member_declaration(this);
}

void CSharpParser::Class_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_member_declaration(this);
}

CSharpParser::Class_member_declarationContext* CSharpParser::class_member_declaration() {
  Class_member_declarationContext *_localctx = _tracker.createInstance<Class_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 254, CSharpParser::RuleClass_member_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1731);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1730);
      attributes();
    }
    setState(1734);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      setState(1733);
      all_member_modifiers();
      break;
    }

    default:
      break;
    }
    setState(1738);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CLASS:
      case CSharpParser::CONST:
      case CSharpParser::DECIMAL:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::ENUM:
      case CSharpParser::EQUALS:
      case CSharpParser::EVENT:
      case CSharpParser::EXPLICIT:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::IMPLICIT:
      case CSharpParser::INT:
      case CSharpParser::INTERFACE:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::READONLY:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::STRING:
      case CSharpParser::STRUCT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::VOID:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::OPEN_PARENS: {
        setState(1736);
        common_member_declaration();
        break;
      }

      case CSharpParser::TILDE: {
        setState(1737);
        destructor_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- All_member_modifiersContext ------------------------------------------------------------------

CSharpParser::All_member_modifiersContext::All_member_modifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::All_member_modifierContext *> CSharpParser::All_member_modifiersContext::all_member_modifier() {
  return getRuleContexts<CSharpParser::All_member_modifierContext>();
}

CSharpParser::All_member_modifierContext* CSharpParser::All_member_modifiersContext::all_member_modifier(size_t i) {
  return getRuleContext<CSharpParser::All_member_modifierContext>(i);
}


size_t CSharpParser::All_member_modifiersContext::getRuleIndex() const {
  return CSharpParser::RuleAll_member_modifiers;
}

void CSharpParser::All_member_modifiersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAll_member_modifiers(this);
}

void CSharpParser::All_member_modifiersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAll_member_modifiers(this);
}

CSharpParser::All_member_modifiersContext* CSharpParser::all_member_modifiers() {
  All_member_modifiersContext *_localctx = _tracker.createInstance<All_member_modifiersContext>(_ctx, getState());
  enterRule(_localctx, 256, CSharpParser::RuleAll_member_modifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1741); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1740);
              all_member_modifier();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1743); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- All_member_modifierContext ------------------------------------------------------------------

CSharpParser::All_member_modifierContext::All_member_modifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::PUBLIC() {
  return getToken(CSharpParser::PUBLIC, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::PROTECTED() {
  return getToken(CSharpParser::PROTECTED, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::INTERNAL() {
  return getToken(CSharpParser::INTERNAL, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::PRIVATE() {
  return getToken(CSharpParser::PRIVATE, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::VOLATILE() {
  return getToken(CSharpParser::VOLATILE, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::VIRTUAL() {
  return getToken(CSharpParser::VIRTUAL, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::SEALED() {
  return getToken(CSharpParser::SEALED, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::OVERRIDE() {
  return getToken(CSharpParser::OVERRIDE, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::ABSTRACT() {
  return getToken(CSharpParser::ABSTRACT, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::STATIC() {
  return getToken(CSharpParser::STATIC, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::EXTERN() {
  return getToken(CSharpParser::EXTERN, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::PARTIAL() {
  return getToken(CSharpParser::PARTIAL, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}


size_t CSharpParser::All_member_modifierContext::getRuleIndex() const {
  return CSharpParser::RuleAll_member_modifier;
}

void CSharpParser::All_member_modifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAll_member_modifier(this);
}

void CSharpParser::All_member_modifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAll_member_modifier(this);
}

CSharpParser::All_member_modifierContext* CSharpParser::all_member_modifier() {
  All_member_modifierContext *_localctx = _tracker.createInstance<All_member_modifierContext>(_ctx, getState());
  enterRule(_localctx, 258, CSharpParser::RuleAll_member_modifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1745);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ABSTRACT)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::EXTERN)
      | (1ULL << CSharpParser::INTERNAL))) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & ((1ULL << (CSharpParser::NEW - 66))
      | (1ULL << (CSharpParser::OVERRIDE - 66))
      | (1ULL << (CSharpParser::PARTIAL - 66))
      | (1ULL << (CSharpParser::PRIVATE - 66))
      | (1ULL << (CSharpParser::PROTECTED - 66))
      | (1ULL << (CSharpParser::PUBLIC - 66))
      | (1ULL << (CSharpParser::READONLY - 66))
      | (1ULL << (CSharpParser::SEALED - 66))
      | (1ULL << (CSharpParser::STATIC - 66))
      | (1ULL << (CSharpParser::UNSAFE - 66))
      | (1ULL << (CSharpParser::VIRTUAL - 66))
      | (1ULL << (CSharpParser::VOLATILE - 66)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Common_member_declarationContext ------------------------------------------------------------------

CSharpParser::Common_member_declarationContext::Common_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Constant_declarationContext* CSharpParser::Common_member_declarationContext::constant_declaration() {
  return getRuleContext<CSharpParser::Constant_declarationContext>(0);
}

CSharpParser::Typed_member_declarationContext* CSharpParser::Common_member_declarationContext::typed_member_declaration() {
  return getRuleContext<CSharpParser::Typed_member_declarationContext>(0);
}

CSharpParser::Event_declarationContext* CSharpParser::Common_member_declarationContext::event_declaration() {
  return getRuleContext<CSharpParser::Event_declarationContext>(0);
}

CSharpParser::Conversion_operator_declaratorContext* CSharpParser::Common_member_declarationContext::conversion_operator_declarator() {
  return getRuleContext<CSharpParser::Conversion_operator_declaratorContext>(0);
}

CSharpParser::BodyContext* CSharpParser::Common_member_declarationContext::body() {
  return getRuleContext<CSharpParser::BodyContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Common_member_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Common_member_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Common_member_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Constructor_declarationContext* CSharpParser::Common_member_declarationContext::constructor_declaration() {
  return getRuleContext<CSharpParser::Constructor_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Common_member_declarationContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

CSharpParser::Method_declarationContext* CSharpParser::Common_member_declarationContext::method_declaration() {
  return getRuleContext<CSharpParser::Method_declarationContext>(0);
}

CSharpParser::Class_definitionContext* CSharpParser::Common_member_declarationContext::class_definition() {
  return getRuleContext<CSharpParser::Class_definitionContext>(0);
}

CSharpParser::Struct_definitionContext* CSharpParser::Common_member_declarationContext::struct_definition() {
  return getRuleContext<CSharpParser::Struct_definitionContext>(0);
}

CSharpParser::Interface_definitionContext* CSharpParser::Common_member_declarationContext::interface_definition() {
  return getRuleContext<CSharpParser::Interface_definitionContext>(0);
}

CSharpParser::Enum_definitionContext* CSharpParser::Common_member_declarationContext::enum_definition() {
  return getRuleContext<CSharpParser::Enum_definitionContext>(0);
}

CSharpParser::Delegate_definitionContext* CSharpParser::Common_member_declarationContext::delegate_definition() {
  return getRuleContext<CSharpParser::Delegate_definitionContext>(0);
}


size_t CSharpParser::Common_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleCommon_member_declaration;
}

void CSharpParser::Common_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommon_member_declaration(this);
}

void CSharpParser::Common_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommon_member_declaration(this);
}

CSharpParser::Common_member_declarationContext* CSharpParser::common_member_declaration() {
  Common_member_declarationContext *_localctx = _tracker.createInstance<Common_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 260, CSharpParser::RuleCommon_member_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1766);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1747);
      constant_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1748);
      typed_member_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1749);
      event_declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1750);
      conversion_operator_declarator();
      setState(1756);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::OPEN_BRACE:
        case CSharpParser::SEMICOLON: {
          setState(1751);
          body();
          break;
        }

        case CSharpParser::ASSIGNMENT: {
          setState(1752);
          right_arrow();
          setState(1753);
          throwable_expression();
          setState(1754);
          match(CSharpParser::SEMICOLON);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1758);
      constructor_declaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1759);
      match(CSharpParser::VOID);
      setState(1760);
      method_declaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1761);
      class_definition();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1762);
      struct_definition();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1763);
      interface_definition();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1764);
      enum_definition();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1765);
      delegate_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typed_member_declarationContext ------------------------------------------------------------------

CSharpParser::Typed_member_declarationContext::Typed_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Typed_member_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Typed_member_declarationContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Typed_member_declarationContext::DOT() {
  return getToken(CSharpParser::DOT, 0);
}

CSharpParser::Indexer_declarationContext* CSharpParser::Typed_member_declarationContext::indexer_declaration() {
  return getRuleContext<CSharpParser::Indexer_declarationContext>(0);
}

CSharpParser::Method_declarationContext* CSharpParser::Typed_member_declarationContext::method_declaration() {
  return getRuleContext<CSharpParser::Method_declarationContext>(0);
}

CSharpParser::Property_declarationContext* CSharpParser::Typed_member_declarationContext::property_declaration() {
  return getRuleContext<CSharpParser::Property_declarationContext>(0);
}

CSharpParser::Operator_declarationContext* CSharpParser::Typed_member_declarationContext::operator_declaration() {
  return getRuleContext<CSharpParser::Operator_declarationContext>(0);
}

CSharpParser::Field_declarationContext* CSharpParser::Typed_member_declarationContext::field_declaration() {
  return getRuleContext<CSharpParser::Field_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Typed_member_declarationContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Typed_member_declarationContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}


size_t CSharpParser::Typed_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleTyped_member_declaration;
}

void CSharpParser::Typed_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTyped_member_declaration(this);
}

void CSharpParser::Typed_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTyped_member_declaration(this);
}

CSharpParser::Typed_member_declarationContext* CSharpParser::typed_member_declaration() {
  Typed_member_declarationContext *_localctx = _tracker.createInstance<Typed_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 262, CSharpParser::RuleTyped_member_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1773);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      setState(1768);
      match(CSharpParser::REF);
      break;
    }

    case 2: {
      setState(1769);
      match(CSharpParser::READONLY);
      setState(1770);
      match(CSharpParser::REF);
      break;
    }

    case 3: {
      setState(1771);
      match(CSharpParser::REF);
      setState(1772);
      match(CSharpParser::READONLY);
      break;
    }

    default:
      break;
    }
    setState(1775);
    type_();
    setState(1785);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      setState(1776);
      namespace_or_type_name();
      setState(1777);
      match(CSharpParser::DOT);
      setState(1778);
      indexer_declaration();
      break;
    }

    case 2: {
      setState(1780);
      method_declaration();
      break;
    }

    case 3: {
      setState(1781);
      property_declaration();
      break;
    }

    case 4: {
      setState(1782);
      indexer_declaration();
      break;
    }

    case 5: {
      setState(1783);
      operator_declaration();
      break;
    }

    case 6: {
      setState(1784);
      field_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_declaratorsContext ------------------------------------------------------------------

CSharpParser::Constant_declaratorsContext::Constant_declaratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Constant_declaratorContext *> CSharpParser::Constant_declaratorsContext::constant_declarator() {
  return getRuleContexts<CSharpParser::Constant_declaratorContext>();
}

CSharpParser::Constant_declaratorContext* CSharpParser::Constant_declaratorsContext::constant_declarator(size_t i) {
  return getRuleContext<CSharpParser::Constant_declaratorContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Constant_declaratorsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Constant_declaratorsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Constant_declaratorsContext::getRuleIndex() const {
  return CSharpParser::RuleConstant_declarators;
}

void CSharpParser::Constant_declaratorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant_declarators(this);
}

void CSharpParser::Constant_declaratorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant_declarators(this);
}

CSharpParser::Constant_declaratorsContext* CSharpParser::constant_declarators() {
  Constant_declaratorsContext *_localctx = _tracker.createInstance<Constant_declaratorsContext>(_ctx, getState());
  enterRule(_localctx, 264, CSharpParser::RuleConstant_declarators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1787);
    constant_declarator();
    setState(1792);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1788);
      match(CSharpParser::COMMA);
      setState(1789);
      constant_declarator();
      setState(1794);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_declaratorContext ------------------------------------------------------------------

CSharpParser::Constant_declaratorContext::Constant_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Constant_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Constant_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Constant_declaratorContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Constant_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleConstant_declarator;
}

void CSharpParser::Constant_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant_declarator(this);
}

void CSharpParser::Constant_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant_declarator(this);
}

CSharpParser::Constant_declaratorContext* CSharpParser::constant_declarator() {
  Constant_declaratorContext *_localctx = _tracker.createInstance<Constant_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 266, CSharpParser::RuleConstant_declarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1795);
    identifier();
    setState(1796);
    match(CSharpParser::ASSIGNMENT);
    setState(1797);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_declaratorsContext ------------------------------------------------------------------

CSharpParser::Variable_declaratorsContext::Variable_declaratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Variable_declaratorContext *> CSharpParser::Variable_declaratorsContext::variable_declarator() {
  return getRuleContexts<CSharpParser::Variable_declaratorContext>();
}

CSharpParser::Variable_declaratorContext* CSharpParser::Variable_declaratorsContext::variable_declarator(size_t i) {
  return getRuleContext<CSharpParser::Variable_declaratorContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Variable_declaratorsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Variable_declaratorsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Variable_declaratorsContext::getRuleIndex() const {
  return CSharpParser::RuleVariable_declarators;
}

void CSharpParser::Variable_declaratorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_declarators(this);
}

void CSharpParser::Variable_declaratorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_declarators(this);
}

CSharpParser::Variable_declaratorsContext* CSharpParser::variable_declarators() {
  Variable_declaratorsContext *_localctx = _tracker.createInstance<Variable_declaratorsContext>(_ctx, getState());
  enterRule(_localctx, 268, CSharpParser::RuleVariable_declarators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1799);
    variable_declarator();
    setState(1804);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1800);
      match(CSharpParser::COMMA);
      setState(1801);
      variable_declarator();
      setState(1806);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_declaratorContext ------------------------------------------------------------------

CSharpParser::Variable_declaratorContext::Variable_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Variable_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Variable_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Variable_initializerContext* CSharpParser::Variable_declaratorContext::variable_initializer() {
  return getRuleContext<CSharpParser::Variable_initializerContext>(0);
}


size_t CSharpParser::Variable_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleVariable_declarator;
}

void CSharpParser::Variable_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_declarator(this);
}

void CSharpParser::Variable_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_declarator(this);
}

CSharpParser::Variable_declaratorContext* CSharpParser::variable_declarator() {
  Variable_declaratorContext *_localctx = _tracker.createInstance<Variable_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 270, CSharpParser::RuleVariable_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1807);
    identifier();
    setState(1810);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::ASSIGNMENT) {
      setState(1808);
      match(CSharpParser::ASSIGNMENT);
      setState(1809);
      variable_initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_initializerContext ------------------------------------------------------------------

CSharpParser::Variable_initializerContext::Variable_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Variable_initializerContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Array_initializerContext* CSharpParser::Variable_initializerContext::array_initializer() {
  return getRuleContext<CSharpParser::Array_initializerContext>(0);
}


size_t CSharpParser::Variable_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleVariable_initializer;
}

void CSharpParser::Variable_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_initializer(this);
}

void CSharpParser::Variable_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_initializer(this);
}

CSharpParser::Variable_initializerContext* CSharpParser::variable_initializer() {
  Variable_initializerContext *_localctx = _tracker.createInstance<Variable_initializerContext>(_ctx, getState());
  enterRule(_localctx, 272, CSharpParser::RuleVariable_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1814);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(1812);
        expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1813);
        array_initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_typeContext ------------------------------------------------------------------

CSharpParser::Return_typeContext::Return_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Return_typeContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Return_typeContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}


size_t CSharpParser::Return_typeContext::getRuleIndex() const {
  return CSharpParser::RuleReturn_type;
}

void CSharpParser::Return_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_type(this);
}

void CSharpParser::Return_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_type(this);
}

CSharpParser::Return_typeContext* CSharpParser::return_type() {
  Return_typeContext *_localctx = _tracker.createInstance<Return_typeContext>(_ctx, getState());
  enterRule(_localctx, 274, CSharpParser::RuleReturn_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1818);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1816);
      type_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1817);
      match(CSharpParser::VOID);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_nameContext ------------------------------------------------------------------

CSharpParser::Member_nameContext::Member_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Member_nameContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}


size_t CSharpParser::Member_nameContext::getRuleIndex() const {
  return CSharpParser::RuleMember_name;
}

void CSharpParser::Member_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_name(this);
}

void CSharpParser::Member_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_name(this);
}

CSharpParser::Member_nameContext* CSharpParser::member_name() {
  Member_nameContext *_localctx = _tracker.createInstance<Member_nameContext>(_ctx, getState());
  enterRule(_localctx, 276, CSharpParser::RuleMember_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1820);
    namespace_or_type_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_bodyContext ------------------------------------------------------------------

CSharpParser::Method_bodyContext::Method_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::Method_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

tree::TerminalNode* CSharpParser::Method_bodyContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Method_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleMethod_body;
}

void CSharpParser::Method_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_body(this);
}

void CSharpParser::Method_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_body(this);
}

CSharpParser::Method_bodyContext* CSharpParser::method_body() {
  Method_bodyContext *_localctx = _tracker.createInstance<Method_bodyContext>(_ctx, getState());
  enterRule(_localctx, 278, CSharpParser::RuleMethod_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1824);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1822);
        block();
        break;
      }

      case CSharpParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(1823);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_parameter_listContext ------------------------------------------------------------------

CSharpParser::Formal_parameter_listContext::Formal_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Parameter_arrayContext* CSharpParser::Formal_parameter_listContext::parameter_array() {
  return getRuleContext<CSharpParser::Parameter_arrayContext>(0);
}

CSharpParser::Fixed_parametersContext* CSharpParser::Formal_parameter_listContext::fixed_parameters() {
  return getRuleContext<CSharpParser::Fixed_parametersContext>(0);
}

tree::TerminalNode* CSharpParser::Formal_parameter_listContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Formal_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleFormal_parameter_list;
}

void CSharpParser::Formal_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_parameter_list(this);
}

void CSharpParser::Formal_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_parameter_list(this);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::formal_parameter_list() {
  Formal_parameter_listContext *_localctx = _tracker.createInstance<Formal_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 280, CSharpParser::RuleFormal_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1832);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1826);
      parameter_array();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1827);
      fixed_parameters();
      setState(1830);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(1828);
        match(CSharpParser::COMMA);
        setState(1829);
        parameter_array();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_parametersContext ------------------------------------------------------------------

CSharpParser::Fixed_parametersContext::Fixed_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Fixed_parameterContext *> CSharpParser::Fixed_parametersContext::fixed_parameter() {
  return getRuleContexts<CSharpParser::Fixed_parameterContext>();
}

CSharpParser::Fixed_parameterContext* CSharpParser::Fixed_parametersContext::fixed_parameter(size_t i) {
  return getRuleContext<CSharpParser::Fixed_parameterContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Fixed_parametersContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Fixed_parametersContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Fixed_parametersContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_parameters;
}

void CSharpParser::Fixed_parametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_parameters(this);
}

void CSharpParser::Fixed_parametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_parameters(this);
}

CSharpParser::Fixed_parametersContext* CSharpParser::fixed_parameters() {
  Fixed_parametersContext *_localctx = _tracker.createInstance<Fixed_parametersContext>(_ctx, getState());
  enterRule(_localctx, 282, CSharpParser::RuleFixed_parameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1834);
    fixed_parameter();
    setState(1839);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1835);
        match(CSharpParser::COMMA);
        setState(1836);
        fixed_parameter(); 
      }
      setState(1841);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_parameterContext ------------------------------------------------------------------

CSharpParser::Fixed_parameterContext::Fixed_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Arg_declarationContext* CSharpParser::Fixed_parameterContext::arg_declaration() {
  return getRuleContext<CSharpParser::Arg_declarationContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Fixed_parameterContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Parameter_modifierContext* CSharpParser::Fixed_parameterContext::parameter_modifier() {
  return getRuleContext<CSharpParser::Parameter_modifierContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_parameterContext::ARGLIST() {
  return getToken(CSharpParser::ARGLIST, 0);
}


size_t CSharpParser::Fixed_parameterContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_parameter;
}

void CSharpParser::Fixed_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_parameter(this);
}

void CSharpParser::Fixed_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_parameter(this);
}

CSharpParser::Fixed_parameterContext* CSharpParser::fixed_parameter() {
  Fixed_parameterContext *_localctx = _tracker.createInstance<Fixed_parameterContext>(_ctx, getState());
  enterRule(_localctx, 284, CSharpParser::RuleFixed_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1850);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1843);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::OPEN_BRACKET) {
        setState(1842);
        attributes();
      }
      setState(1846);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 54) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 54)) & ((1ULL << (CSharpParser::IN - 54))
        | (1ULL << (CSharpParser::OUT - 54))
        | (1ULL << (CSharpParser::REF - 54))
        | (1ULL << (CSharpParser::THIS - 54)))) != 0)) {
        setState(1845);
        parameter_modifier();
      }
      setState(1848);
      arg_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1849);
      match(CSharpParser::ARGLIST);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_modifierContext ------------------------------------------------------------------

CSharpParser::Parameter_modifierContext::Parameter_modifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Parameter_modifierContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Parameter_modifierContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}

tree::TerminalNode* CSharpParser::Parameter_modifierContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

tree::TerminalNode* CSharpParser::Parameter_modifierContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}


size_t CSharpParser::Parameter_modifierContext::getRuleIndex() const {
  return CSharpParser::RuleParameter_modifier;
}

void CSharpParser::Parameter_modifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_modifier(this);
}

void CSharpParser::Parameter_modifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_modifier(this);
}

CSharpParser::Parameter_modifierContext* CSharpParser::parameter_modifier() {
  Parameter_modifierContext *_localctx = _tracker.createInstance<Parameter_modifierContext>(_ctx, getState());
  enterRule(_localctx, 286, CSharpParser::RuleParameter_modifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1860);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1852);
      match(CSharpParser::REF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1853);
      match(CSharpParser::OUT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1854);
      match(CSharpParser::IN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1855);
      match(CSharpParser::REF);
      setState(1856);
      match(CSharpParser::THIS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1857);
      match(CSharpParser::IN);
      setState(1858);
      match(CSharpParser::THIS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1859);
      match(CSharpParser::THIS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_arrayContext ------------------------------------------------------------------

CSharpParser::Parameter_arrayContext::Parameter_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Parameter_arrayContext::PARAMS() {
  return getToken(CSharpParser::PARAMS, 0);
}

CSharpParser::Array_typeContext* CSharpParser::Parameter_arrayContext::array_type() {
  return getRuleContext<CSharpParser::Array_typeContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Parameter_arrayContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Parameter_arrayContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Parameter_arrayContext::getRuleIndex() const {
  return CSharpParser::RuleParameter_array;
}

void CSharpParser::Parameter_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_array(this);
}

void CSharpParser::Parameter_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_array(this);
}

CSharpParser::Parameter_arrayContext* CSharpParser::parameter_array() {
  Parameter_arrayContext *_localctx = _tracker.createInstance<Parameter_arrayContext>(_ctx, getState());
  enterRule(_localctx, 288, CSharpParser::RuleParameter_array);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1863);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1862);
      attributes();
    }
    setState(1865);
    match(CSharpParser::PARAMS);
    setState(1866);
    array_type();
    setState(1867);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accessor_declarationsContext ------------------------------------------------------------------

CSharpParser::Accessor_declarationsContext::Accessor_declarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Accessor_declarationsContext::GET() {
  return getToken(CSharpParser::GET, 0);
}

CSharpParser::Accessor_bodyContext* CSharpParser::Accessor_declarationsContext::accessor_body() {
  return getRuleContext<CSharpParser::Accessor_bodyContext>(0);
}

tree::TerminalNode* CSharpParser::Accessor_declarationsContext::SET() {
  return getToken(CSharpParser::SET, 0);
}

CSharpParser::AttributesContext* CSharpParser::Accessor_declarationsContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Accessor_modifierContext* CSharpParser::Accessor_declarationsContext::accessor_modifier() {
  return getRuleContext<CSharpParser::Accessor_modifierContext>(0);
}

CSharpParser::Set_accessor_declarationContext* CSharpParser::Accessor_declarationsContext::set_accessor_declaration() {
  return getRuleContext<CSharpParser::Set_accessor_declarationContext>(0);
}

CSharpParser::Get_accessor_declarationContext* CSharpParser::Accessor_declarationsContext::get_accessor_declaration() {
  return getRuleContext<CSharpParser::Get_accessor_declarationContext>(0);
}


size_t CSharpParser::Accessor_declarationsContext::getRuleIndex() const {
  return CSharpParser::RuleAccessor_declarations;
}

void CSharpParser::Accessor_declarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessor_declarations(this);
}

void CSharpParser::Accessor_declarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessor_declarations(this);
}

CSharpParser::Accessor_declarationsContext* CSharpParser::accessor_declarations() {
  Accessor_declarationsContext *_localctx = _tracker.createInstance<Accessor_declarationsContext>(_ctx, getState());
  enterRule(_localctx, 290, CSharpParser::RuleAccessor_declarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1870);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1869);
      dynamic_cast<Accessor_declarationsContext *>(_localctx)->attrs = attributes();
    }
    setState(1873);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & ((1ULL << (CSharpParser::INTERNAL - 57))
      | (1ULL << (CSharpParser::PRIVATE - 57))
      | (1ULL << (CSharpParser::PROTECTED - 57)))) != 0)) {
      setState(1872);
      dynamic_cast<Accessor_declarationsContext *>(_localctx)->mods = accessor_modifier();
    }
    setState(1885);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::GET: {
        setState(1875);
        match(CSharpParser::GET);
        setState(1876);
        accessor_body();
        setState(1878);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::INTERNAL || ((((_la - 76) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 76)) & ((1ULL << (CSharpParser::PRIVATE - 76))
          | (1ULL << (CSharpParser::PROTECTED - 76))
          | (1ULL << (CSharpParser::SET - 76))
          | (1ULL << (CSharpParser::OPEN_BRACKET - 76)))) != 0)) {
          setState(1877);
          set_accessor_declaration();
        }
        break;
      }

      case CSharpParser::SET: {
        setState(1880);
        match(CSharpParser::SET);
        setState(1881);
        accessor_body();
        setState(1883);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::GET

        || _la == CSharpParser::INTERNAL || ((((_la - 76) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 76)) & ((1ULL << (CSharpParser::PRIVATE - 76))
          | (1ULL << (CSharpParser::PROTECTED - 76))
          | (1ULL << (CSharpParser::OPEN_BRACKET - 76)))) != 0)) {
          setState(1882);
          get_accessor_declaration();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Get_accessor_declarationContext ------------------------------------------------------------------

CSharpParser::Get_accessor_declarationContext::Get_accessor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Get_accessor_declarationContext::GET() {
  return getToken(CSharpParser::GET, 0);
}

CSharpParser::Accessor_bodyContext* CSharpParser::Get_accessor_declarationContext::accessor_body() {
  return getRuleContext<CSharpParser::Accessor_bodyContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Get_accessor_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Accessor_modifierContext* CSharpParser::Get_accessor_declarationContext::accessor_modifier() {
  return getRuleContext<CSharpParser::Accessor_modifierContext>(0);
}


size_t CSharpParser::Get_accessor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleGet_accessor_declaration;
}

void CSharpParser::Get_accessor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_accessor_declaration(this);
}

void CSharpParser::Get_accessor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_accessor_declaration(this);
}

CSharpParser::Get_accessor_declarationContext* CSharpParser::get_accessor_declaration() {
  Get_accessor_declarationContext *_localctx = _tracker.createInstance<Get_accessor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 292, CSharpParser::RuleGet_accessor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1887);
      attributes();
    }
    setState(1891);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & ((1ULL << (CSharpParser::INTERNAL - 57))
      | (1ULL << (CSharpParser::PRIVATE - 57))
      | (1ULL << (CSharpParser::PROTECTED - 57)))) != 0)) {
      setState(1890);
      accessor_modifier();
    }
    setState(1893);
    match(CSharpParser::GET);
    setState(1894);
    accessor_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_accessor_declarationContext ------------------------------------------------------------------

CSharpParser::Set_accessor_declarationContext::Set_accessor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Set_accessor_declarationContext::SET() {
  return getToken(CSharpParser::SET, 0);
}

CSharpParser::Accessor_bodyContext* CSharpParser::Set_accessor_declarationContext::accessor_body() {
  return getRuleContext<CSharpParser::Accessor_bodyContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Set_accessor_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Accessor_modifierContext* CSharpParser::Set_accessor_declarationContext::accessor_modifier() {
  return getRuleContext<CSharpParser::Accessor_modifierContext>(0);
}


size_t CSharpParser::Set_accessor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleSet_accessor_declaration;
}

void CSharpParser::Set_accessor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_accessor_declaration(this);
}

void CSharpParser::Set_accessor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_accessor_declaration(this);
}

CSharpParser::Set_accessor_declarationContext* CSharpParser::set_accessor_declaration() {
  Set_accessor_declarationContext *_localctx = _tracker.createInstance<Set_accessor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 294, CSharpParser::RuleSet_accessor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1897);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1896);
      attributes();
    }
    setState(1900);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & ((1ULL << (CSharpParser::INTERNAL - 57))
      | (1ULL << (CSharpParser::PRIVATE - 57))
      | (1ULL << (CSharpParser::PROTECTED - 57)))) != 0)) {
      setState(1899);
      accessor_modifier();
    }
    setState(1902);
    match(CSharpParser::SET);
    setState(1903);
    accessor_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accessor_modifierContext ------------------------------------------------------------------

CSharpParser::Accessor_modifierContext::Accessor_modifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Accessor_modifierContext::PROTECTED() {
  return getToken(CSharpParser::PROTECTED, 0);
}

tree::TerminalNode* CSharpParser::Accessor_modifierContext::INTERNAL() {
  return getToken(CSharpParser::INTERNAL, 0);
}

tree::TerminalNode* CSharpParser::Accessor_modifierContext::PRIVATE() {
  return getToken(CSharpParser::PRIVATE, 0);
}


size_t CSharpParser::Accessor_modifierContext::getRuleIndex() const {
  return CSharpParser::RuleAccessor_modifier;
}

void CSharpParser::Accessor_modifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessor_modifier(this);
}

void CSharpParser::Accessor_modifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessor_modifier(this);
}

CSharpParser::Accessor_modifierContext* CSharpParser::accessor_modifier() {
  Accessor_modifierContext *_localctx = _tracker.createInstance<Accessor_modifierContext>(_ctx, getState());
  enterRule(_localctx, 296, CSharpParser::RuleAccessor_modifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1912);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1905);
      match(CSharpParser::PROTECTED);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1906);
      match(CSharpParser::INTERNAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1907);
      match(CSharpParser::PRIVATE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1908);
      match(CSharpParser::PROTECTED);
      setState(1909);
      match(CSharpParser::INTERNAL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1910);
      match(CSharpParser::INTERNAL);
      setState(1911);
      match(CSharpParser::PROTECTED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accessor_bodyContext ------------------------------------------------------------------

CSharpParser::Accessor_bodyContext::Accessor_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::Accessor_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

tree::TerminalNode* CSharpParser::Accessor_bodyContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Accessor_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleAccessor_body;
}

void CSharpParser::Accessor_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessor_body(this);
}

void CSharpParser::Accessor_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessor_body(this);
}

CSharpParser::Accessor_bodyContext* CSharpParser::accessor_body() {
  Accessor_bodyContext *_localctx = _tracker.createInstance<Accessor_bodyContext>(_ctx, getState());
  enterRule(_localctx, 298, CSharpParser::RuleAccessor_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1916);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1914);
        block();
        break;
      }

      case CSharpParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(1915);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Event_accessor_declarationsContext ------------------------------------------------------------------

CSharpParser::Event_accessor_declarationsContext::Event_accessor_declarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Event_accessor_declarationsContext::ADD() {
  return getToken(CSharpParser::ADD, 0);
}

CSharpParser::BlockContext* CSharpParser::Event_accessor_declarationsContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Remove_accessor_declarationContext* CSharpParser::Event_accessor_declarationsContext::remove_accessor_declaration() {
  return getRuleContext<CSharpParser::Remove_accessor_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Event_accessor_declarationsContext::REMOVE() {
  return getToken(CSharpParser::REMOVE, 0);
}

CSharpParser::Add_accessor_declarationContext* CSharpParser::Event_accessor_declarationsContext::add_accessor_declaration() {
  return getRuleContext<CSharpParser::Add_accessor_declarationContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Event_accessor_declarationsContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Event_accessor_declarationsContext::getRuleIndex() const {
  return CSharpParser::RuleEvent_accessor_declarations;
}

void CSharpParser::Event_accessor_declarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvent_accessor_declarations(this);
}

void CSharpParser::Event_accessor_declarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvent_accessor_declarations(this);
}

CSharpParser::Event_accessor_declarationsContext* CSharpParser::event_accessor_declarations() {
  Event_accessor_declarationsContext *_localctx = _tracker.createInstance<Event_accessor_declarationsContext>(_ctx, getState());
  enterRule(_localctx, 300, CSharpParser::RuleEvent_accessor_declarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1919);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1918);
      attributes();
    }
    setState(1929);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD: {
        setState(1921);
        match(CSharpParser::ADD);
        setState(1922);
        block();
        setState(1923);
        remove_accessor_declaration();
        break;
      }

      case CSharpParser::REMOVE: {
        setState(1925);
        match(CSharpParser::REMOVE);
        setState(1926);
        block();
        setState(1927);
        add_accessor_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_accessor_declarationContext ------------------------------------------------------------------

CSharpParser::Add_accessor_declarationContext::Add_accessor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Add_accessor_declarationContext::ADD() {
  return getToken(CSharpParser::ADD, 0);
}

CSharpParser::BlockContext* CSharpParser::Add_accessor_declarationContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Add_accessor_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Add_accessor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleAdd_accessor_declaration;
}

void CSharpParser::Add_accessor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_accessor_declaration(this);
}

void CSharpParser::Add_accessor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_accessor_declaration(this);
}

CSharpParser::Add_accessor_declarationContext* CSharpParser::add_accessor_declaration() {
  Add_accessor_declarationContext *_localctx = _tracker.createInstance<Add_accessor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 302, CSharpParser::RuleAdd_accessor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1932);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1931);
      attributes();
    }
    setState(1934);
    match(CSharpParser::ADD);
    setState(1935);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Remove_accessor_declarationContext ------------------------------------------------------------------

CSharpParser::Remove_accessor_declarationContext::Remove_accessor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Remove_accessor_declarationContext::REMOVE() {
  return getToken(CSharpParser::REMOVE, 0);
}

CSharpParser::BlockContext* CSharpParser::Remove_accessor_declarationContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Remove_accessor_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Remove_accessor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleRemove_accessor_declaration;
}

void CSharpParser::Remove_accessor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRemove_accessor_declaration(this);
}

void CSharpParser::Remove_accessor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRemove_accessor_declaration(this);
}

CSharpParser::Remove_accessor_declarationContext* CSharpParser::remove_accessor_declaration() {
  Remove_accessor_declarationContext *_localctx = _tracker.createInstance<Remove_accessor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 304, CSharpParser::RuleRemove_accessor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1938);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1937);
      attributes();
    }
    setState(1940);
    match(CSharpParser::REMOVE);
    setState(1941);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Overloadable_operatorContext ------------------------------------------------------------------

CSharpParser::Overloadable_operatorContext::Overloadable_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::PLUS() {
  return getToken(CSharpParser::PLUS, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::MINUS() {
  return getToken(CSharpParser::MINUS, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::BANG() {
  return getToken(CSharpParser::BANG, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::TILDE() {
  return getToken(CSharpParser::TILDE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_INC() {
  return getToken(CSharpParser::OP_INC, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_DEC() {
  return getToken(CSharpParser::OP_DEC, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::TRUE() {
  return getToken(CSharpParser::TRUE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::FALSE() {
  return getToken(CSharpParser::FALSE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::STAR() {
  return getToken(CSharpParser::STAR, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::DIV() {
  return getToken(CSharpParser::DIV, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::PERCENT() {
  return getToken(CSharpParser::PERCENT, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::AMP() {
  return getToken(CSharpParser::AMP, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::BITWISE_OR() {
  return getToken(CSharpParser::BITWISE_OR, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::CARET() {
  return getToken(CSharpParser::CARET, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_LEFT_SHIFT() {
  return getToken(CSharpParser::OP_LEFT_SHIFT, 0);
}

CSharpParser::Right_shiftContext* CSharpParser::Overloadable_operatorContext::right_shift() {
  return getRuleContext<CSharpParser::Right_shiftContext>(0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_EQ() {
  return getToken(CSharpParser::OP_EQ, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_NE() {
  return getToken(CSharpParser::OP_NE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_GE() {
  return getToken(CSharpParser::OP_GE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_LE() {
  return getToken(CSharpParser::OP_LE, 0);
}


size_t CSharpParser::Overloadable_operatorContext::getRuleIndex() const {
  return CSharpParser::RuleOverloadable_operator;
}

void CSharpParser::Overloadable_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOverloadable_operator(this);
}

void CSharpParser::Overloadable_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOverloadable_operator(this);
}

CSharpParser::Overloadable_operatorContext* CSharpParser::overloadable_operator() {
  Overloadable_operatorContext *_localctx = _tracker.createInstance<Overloadable_operatorContext>(_ctx, getState());
  enterRule(_localctx, 306, CSharpParser::RuleOverloadable_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1965);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1943);
      match(CSharpParser::PLUS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1944);
      match(CSharpParser::MINUS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1945);
      match(CSharpParser::BANG);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1946);
      match(CSharpParser::TILDE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1947);
      match(CSharpParser::OP_INC);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1948);
      match(CSharpParser::OP_DEC);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1949);
      match(CSharpParser::TRUE);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1950);
      match(CSharpParser::FALSE);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1951);
      match(CSharpParser::STAR);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1952);
      match(CSharpParser::DIV);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1953);
      match(CSharpParser::PERCENT);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1954);
      match(CSharpParser::AMP);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1955);
      match(CSharpParser::BITWISE_OR);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1956);
      match(CSharpParser::CARET);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1957);
      match(CSharpParser::OP_LEFT_SHIFT);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1958);
      right_shift();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1959);
      match(CSharpParser::OP_EQ);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1960);
      match(CSharpParser::OP_NE);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1961);
      match(CSharpParser::GT);
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(1962);
      match(CSharpParser::LT);
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(1963);
      match(CSharpParser::OP_GE);
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(1964);
      match(CSharpParser::OP_LE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conversion_operator_declaratorContext ------------------------------------------------------------------

CSharpParser::Conversion_operator_declaratorContext::Conversion_operator_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::OPERATOR() {
  return getToken(CSharpParser::OPERATOR, 0);
}

CSharpParser::Type_Context* CSharpParser::Conversion_operator_declaratorContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Arg_declarationContext* CSharpParser::Conversion_operator_declaratorContext::arg_declaration() {
  return getRuleContext<CSharpParser::Arg_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::IMPLICIT() {
  return getToken(CSharpParser::IMPLICIT, 0);
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::EXPLICIT() {
  return getToken(CSharpParser::EXPLICIT, 0);
}


size_t CSharpParser::Conversion_operator_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleConversion_operator_declarator;
}

void CSharpParser::Conversion_operator_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConversion_operator_declarator(this);
}

void CSharpParser::Conversion_operator_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConversion_operator_declarator(this);
}

CSharpParser::Conversion_operator_declaratorContext* CSharpParser::conversion_operator_declarator() {
  Conversion_operator_declaratorContext *_localctx = _tracker.createInstance<Conversion_operator_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 308, CSharpParser::RuleConversion_operator_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1967);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::EXPLICIT

    || _la == CSharpParser::IMPLICIT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1968);
    match(CSharpParser::OPERATOR);
    setState(1969);
    type_();
    setState(1970);
    match(CSharpParser::OPEN_PARENS);
    setState(1971);
    arg_declaration();
    setState(1972);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constructor_initializerContext ------------------------------------------------------------------

CSharpParser::Constructor_initializerContext::Constructor_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::BASE() {
  return getToken(CSharpParser::BASE, 0);
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

CSharpParser::Argument_listContext* CSharpParser::Constructor_initializerContext::argument_list() {
  return getRuleContext<CSharpParser::Argument_listContext>(0);
}


size_t CSharpParser::Constructor_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleConstructor_initializer;
}

void CSharpParser::Constructor_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructor_initializer(this);
}

void CSharpParser::Constructor_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructor_initializer(this);
}

CSharpParser::Constructor_initializerContext* CSharpParser::constructor_initializer() {
  Constructor_initializerContext *_localctx = _tracker.createInstance<Constructor_initializerContext>(_ctx, getState());
  enterRule(_localctx, 310, CSharpParser::RuleConstructor_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1974);
    match(CSharpParser::COLON);
    setState(1975);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::BASE || _la == CSharpParser::THIS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1976);
    match(CSharpParser::OPEN_PARENS);
    setState(1978);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BASE)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CHECKED)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DEFAULT)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FALSE)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::IN)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::NEW - 64))
      | (1ULL << (CSharpParser::NULL - 64))
      | (1ULL << (CSharpParser::OBJECT - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::OUT - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REF - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SBYTE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::SHORT - 64))
      | (1ULL << (CSharpParser::SIZEOF - 64))
      | (1ULL << (CSharpParser::STRING - 64))
      | (1ULL << (CSharpParser::THIS - 64))
      | (1ULL << (CSharpParser::TRUE - 64))
      | (1ULL << (CSharpParser::TYPEOF - 64))
      | (1ULL << (CSharpParser::UINT - 64))
      | (1ULL << (CSharpParser::ULONG - 64))
      | (1ULL << (CSharpParser::UNCHECKED - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::USHORT - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::VOID - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
      | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::REAL_LITERAL - 64))
      | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
      | (1ULL << (CSharpParser::REGULAR_STRING - 64))
      | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
      | (1ULL << (CSharpParser::PLUS - 129))
      | (1ULL << (CSharpParser::MINUS - 129))
      | (1ULL << (CSharpParser::STAR - 129))
      | (1ULL << (CSharpParser::AMP - 129))
      | (1ULL << (CSharpParser::CARET - 129))
      | (1ULL << (CSharpParser::BANG - 129))
      | (1ULL << (CSharpParser::TILDE - 129))
      | (1ULL << (CSharpParser::OP_INC - 129))
      | (1ULL << (CSharpParser::OP_DEC - 129))
      | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
      setState(1977);
      argument_list();
    }
    setState(1980);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

CSharpParser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::BodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

tree::TerminalNode* CSharpParser::BodyContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::BodyContext::getRuleIndex() const {
  return CSharpParser::RuleBody;
}

void CSharpParser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void CSharpParser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}

CSharpParser::BodyContext* CSharpParser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 312, CSharpParser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1984);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1982);
        block();
        break;
      }

      case CSharpParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(1983);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_interfacesContext ------------------------------------------------------------------

CSharpParser::Struct_interfacesContext::Struct_interfacesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Struct_interfacesContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Interface_type_listContext* CSharpParser::Struct_interfacesContext::interface_type_list() {
  return getRuleContext<CSharpParser::Interface_type_listContext>(0);
}


size_t CSharpParser::Struct_interfacesContext::getRuleIndex() const {
  return CSharpParser::RuleStruct_interfaces;
}

void CSharpParser::Struct_interfacesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_interfaces(this);
}

void CSharpParser::Struct_interfacesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_interfaces(this);
}

CSharpParser::Struct_interfacesContext* CSharpParser::struct_interfaces() {
  Struct_interfacesContext *_localctx = _tracker.createInstance<Struct_interfacesContext>(_ctx, getState());
  enterRule(_localctx, 314, CSharpParser::RuleStruct_interfaces);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1986);
    match(CSharpParser::COLON);
    setState(1987);
    interface_type_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_bodyContext ------------------------------------------------------------------

CSharpParser::Struct_bodyContext::Struct_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Struct_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Struct_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Struct_member_declarationContext *> CSharpParser::Struct_bodyContext::struct_member_declaration() {
  return getRuleContexts<CSharpParser::Struct_member_declarationContext>();
}

CSharpParser::Struct_member_declarationContext* CSharpParser::Struct_bodyContext::struct_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Struct_member_declarationContext>(i);
}


size_t CSharpParser::Struct_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleStruct_body;
}

void CSharpParser::Struct_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_body(this);
}

void CSharpParser::Struct_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_body(this);
}

CSharpParser::Struct_bodyContext* CSharpParser::struct_body() {
  Struct_bodyContext *_localctx = _tracker.createInstance<Struct_bodyContext>(_ctx, getState());
  enterRule(_localctx, 316, CSharpParser::RuleStruct_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1989);
    match(CSharpParser::OPEN_BRACE);
    setState(1993);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 9) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 9)) & ((1ULL << (CSharpParser::ABSTRACT - 9))
      | (1ULL << (CSharpParser::ADD - 9))
      | (1ULL << (CSharpParser::ALIAS - 9))
      | (1ULL << (CSharpParser::ARGLIST - 9))
      | (1ULL << (CSharpParser::ASCENDING - 9))
      | (1ULL << (CSharpParser::ASYNC - 9))
      | (1ULL << (CSharpParser::AWAIT - 9))
      | (1ULL << (CSharpParser::BOOL - 9))
      | (1ULL << (CSharpParser::BY - 9))
      | (1ULL << (CSharpParser::BYTE - 9))
      | (1ULL << (CSharpParser::CHAR - 9))
      | (1ULL << (CSharpParser::CLASS - 9))
      | (1ULL << (CSharpParser::CONST - 9))
      | (1ULL << (CSharpParser::DECIMAL - 9))
      | (1ULL << (CSharpParser::DELEGATE - 9))
      | (1ULL << (CSharpParser::DESCENDING - 9))
      | (1ULL << (CSharpParser::DOUBLE - 9))
      | (1ULL << (CSharpParser::DYNAMIC - 9))
      | (1ULL << (CSharpParser::ENUM - 9))
      | (1ULL << (CSharpParser::EQUALS - 9))
      | (1ULL << (CSharpParser::EVENT - 9))
      | (1ULL << (CSharpParser::EXPLICIT - 9))
      | (1ULL << (CSharpParser::EXTERN - 9))
      | (1ULL << (CSharpParser::FIXED - 9))
      | (1ULL << (CSharpParser::FLOAT - 9))
      | (1ULL << (CSharpParser::FROM - 9))
      | (1ULL << (CSharpParser::GET - 9))
      | (1ULL << (CSharpParser::GROUP - 9))
      | (1ULL << (CSharpParser::IMPLICIT - 9))
      | (1ULL << (CSharpParser::INT - 9))
      | (1ULL << (CSharpParser::INTERFACE - 9))
      | (1ULL << (CSharpParser::INTERNAL - 9))
      | (1ULL << (CSharpParser::INTO - 9))
      | (1ULL << (CSharpParser::JOIN - 9))
      | (1ULL << (CSharpParser::LET - 9))
      | (1ULL << (CSharpParser::LONG - 9))
      | (1ULL << (CSharpParser::NAMEOF - 9))
      | (1ULL << (CSharpParser::NEW - 9))
      | (1ULL << (CSharpParser::OBJECT - 9))
      | (1ULL << (CSharpParser::ON - 9))
      | (1ULL << (CSharpParser::ORDERBY - 9)))) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & ((1ULL << (CSharpParser::OVERRIDE - 73))
      | (1ULL << (CSharpParser::PARTIAL - 73))
      | (1ULL << (CSharpParser::PRIVATE - 73))
      | (1ULL << (CSharpParser::PROTECTED - 73))
      | (1ULL << (CSharpParser::PUBLIC - 73))
      | (1ULL << (CSharpParser::READONLY - 73))
      | (1ULL << (CSharpParser::REF - 73))
      | (1ULL << (CSharpParser::REMOVE - 73))
      | (1ULL << (CSharpParser::SBYTE - 73))
      | (1ULL << (CSharpParser::SEALED - 73))
      | (1ULL << (CSharpParser::SELECT - 73))
      | (1ULL << (CSharpParser::SET - 73))
      | (1ULL << (CSharpParser::SHORT - 73))
      | (1ULL << (CSharpParser::STATIC - 73))
      | (1ULL << (CSharpParser::STRING - 73))
      | (1ULL << (CSharpParser::STRUCT - 73))
      | (1ULL << (CSharpParser::UINT - 73))
      | (1ULL << (CSharpParser::ULONG - 73))
      | (1ULL << (CSharpParser::UNMANAGED - 73))
      | (1ULL << (CSharpParser::UNSAFE - 73))
      | (1ULL << (CSharpParser::USHORT - 73))
      | (1ULL << (CSharpParser::VAR - 73))
      | (1ULL << (CSharpParser::VIRTUAL - 73))
      | (1ULL << (CSharpParser::VOID - 73))
      | (1ULL << (CSharpParser::VOLATILE - 73))
      | (1ULL << (CSharpParser::WHEN - 73))
      | (1ULL << (CSharpParser::WHERE - 73))
      | (1ULL << (CSharpParser::YIELD - 73))
      | (1ULL << (CSharpParser::IDENTIFIER - 73))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 73))
      | (1ULL << (CSharpParser::OPEN_PARENS - 73)))) != 0)) {
      setState(1990);
      struct_member_declaration();
      setState(1995);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1996);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_member_declarationContext ------------------------------------------------------------------

CSharpParser::Struct_member_declarationContext::Struct_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Common_member_declarationContext* CSharpParser::Struct_member_declarationContext::common_member_declaration() {
  return getRuleContext<CSharpParser::Common_member_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Struct_member_declarationContext::FIXED() {
  return getToken(CSharpParser::FIXED, 0);
}

CSharpParser::Type_Context* CSharpParser::Struct_member_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Struct_member_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::AttributesContext* CSharpParser::Struct_member_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::All_member_modifiersContext* CSharpParser::Struct_member_declarationContext::all_member_modifiers() {
  return getRuleContext<CSharpParser::All_member_modifiersContext>(0);
}

std::vector<CSharpParser::Fixed_size_buffer_declaratorContext *> CSharpParser::Struct_member_declarationContext::fixed_size_buffer_declarator() {
  return getRuleContexts<CSharpParser::Fixed_size_buffer_declaratorContext>();
}

CSharpParser::Fixed_size_buffer_declaratorContext* CSharpParser::Struct_member_declarationContext::fixed_size_buffer_declarator(size_t i) {
  return getRuleContext<CSharpParser::Fixed_size_buffer_declaratorContext>(i);
}


size_t CSharpParser::Struct_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleStruct_member_declaration;
}

void CSharpParser::Struct_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_member_declaration(this);
}

void CSharpParser::Struct_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_member_declaration(this);
}

CSharpParser::Struct_member_declarationContext* CSharpParser::struct_member_declaration() {
  Struct_member_declarationContext *_localctx = _tracker.createInstance<Struct_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 318, CSharpParser::RuleStruct_member_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1999);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1998);
      attributes();
    }
    setState(2002);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      setState(2001);
      all_member_modifiers();
      break;
    }

    default:
      break;
    }
    setState(2014);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CLASS:
      case CSharpParser::CONST:
      case CSharpParser::DECIMAL:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::ENUM:
      case CSharpParser::EQUALS:
      case CSharpParser::EVENT:
      case CSharpParser::EXPLICIT:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::IMPLICIT:
      case CSharpParser::INT:
      case CSharpParser::INTERFACE:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::READONLY:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::STRING:
      case CSharpParser::STRUCT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::VOID:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::OPEN_PARENS: {
        setState(2004);
        common_member_declaration();
        break;
      }

      case CSharpParser::FIXED: {
        setState(2005);
        match(CSharpParser::FIXED);
        setState(2006);
        type_();
        setState(2008); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2007);
          fixed_size_buffer_declarator();
          setState(2010); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
          | (1ULL << CSharpParser::ALIAS)
          | (1ULL << CSharpParser::ARGLIST)
          | (1ULL << CSharpParser::ASCENDING)
          | (1ULL << CSharpParser::ASYNC)
          | (1ULL << CSharpParser::AWAIT)
          | (1ULL << CSharpParser::BY)
          | (1ULL << CSharpParser::DESCENDING)
          | (1ULL << CSharpParser::DYNAMIC)
          | (1ULL << CSharpParser::EQUALS)
          | (1ULL << CSharpParser::FROM)
          | (1ULL << CSharpParser::GET)
          | (1ULL << CSharpParser::GROUP)
          | (1ULL << CSharpParser::INTO)
          | (1ULL << CSharpParser::JOIN)
          | (1ULL << CSharpParser::LET))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
          | (1ULL << (CSharpParser::ON - 64))
          | (1ULL << (CSharpParser::ORDERBY - 64))
          | (1ULL << (CSharpParser::PARTIAL - 64))
          | (1ULL << (CSharpParser::REMOVE - 64))
          | (1ULL << (CSharpParser::SELECT - 64))
          | (1ULL << (CSharpParser::SET - 64))
          | (1ULL << (CSharpParser::UNMANAGED - 64))
          | (1ULL << (CSharpParser::VAR - 64))
          | (1ULL << (CSharpParser::WHEN - 64))
          | (1ULL << (CSharpParser::WHERE - 64))
          | (1ULL << (CSharpParser::YIELD - 64))
          | (1ULL << (CSharpParser::IDENTIFIER - 64)))) != 0));
        setState(2012);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_typeContext ------------------------------------------------------------------

CSharpParser::Array_typeContext::Array_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Base_typeContext* CSharpParser::Array_typeContext::base_type() {
  return getRuleContext<CSharpParser::Base_typeContext>(0);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::Array_typeContext::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::Array_typeContext::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Array_typeContext::STAR() {
  return getTokens(CSharpParser::STAR);
}

tree::TerminalNode* CSharpParser::Array_typeContext::STAR(size_t i) {
  return getToken(CSharpParser::STAR, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Array_typeContext::INTERR() {
  return getTokens(CSharpParser::INTERR);
}

tree::TerminalNode* CSharpParser::Array_typeContext::INTERR(size_t i) {
  return getToken(CSharpParser::INTERR, i);
}


size_t CSharpParser::Array_typeContext::getRuleIndex() const {
  return CSharpParser::RuleArray_type;
}

void CSharpParser::Array_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_type(this);
}

void CSharpParser::Array_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_type(this);
}

CSharpParser::Array_typeContext* CSharpParser::array_type() {
  Array_typeContext *_localctx = _tracker.createInstance<Array_typeContext>(_ctx, getState());
  enterRule(_localctx, 320, CSharpParser::RuleArray_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2016);
    base_type();
    setState(2024); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2020);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CSharpParser::STAR

      || _la == CSharpParser::INTERR) {
        setState(2017);
        _la = _input->LA(1);
        if (!(_la == CSharpParser::STAR

        || _la == CSharpParser::INTERR)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2022);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2023);
      rank_specifier();
      setState(2026); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 127) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 127)) & ((1ULL << (CSharpParser::OPEN_BRACKET - 127))
      | (1ULL << (CSharpParser::STAR - 127))
      | (1ULL << (CSharpParser::INTERR - 127)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rank_specifierContext ------------------------------------------------------------------

CSharpParser::Rank_specifierContext::Rank_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Rank_specifierContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Rank_specifierContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Rank_specifierContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Rank_specifierContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Rank_specifierContext::getRuleIndex() const {
  return CSharpParser::RuleRank_specifier;
}

void CSharpParser::Rank_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRank_specifier(this);
}

void CSharpParser::Rank_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRank_specifier(this);
}

CSharpParser::Rank_specifierContext* CSharpParser::rank_specifier() {
  Rank_specifierContext *_localctx = _tracker.createInstance<Rank_specifierContext>(_ctx, getState());
  enterRule(_localctx, 322, CSharpParser::RuleRank_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2028);
    match(CSharpParser::OPEN_BRACKET);
    setState(2032);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(2029);
      match(CSharpParser::COMMA);
      setState(2034);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2035);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_initializerContext ------------------------------------------------------------------

CSharpParser::Array_initializerContext::Array_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Array_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Array_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Variable_initializerContext *> CSharpParser::Array_initializerContext::variable_initializer() {
  return getRuleContexts<CSharpParser::Variable_initializerContext>();
}

CSharpParser::Variable_initializerContext* CSharpParser::Array_initializerContext::variable_initializer(size_t i) {
  return getRuleContext<CSharpParser::Variable_initializerContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Array_initializerContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Array_initializerContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Array_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleArray_initializer;
}

void CSharpParser::Array_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_initializer(this);
}

void CSharpParser::Array_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_initializer(this);
}

CSharpParser::Array_initializerContext* CSharpParser::array_initializer() {
  Array_initializerContext *_localctx = _tracker.createInstance<Array_initializerContext>(_ctx, getState());
  enterRule(_localctx, 324, CSharpParser::RuleArray_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2037);
    match(CSharpParser::OPEN_BRACE);
    setState(2049);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BASE)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CHECKED)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DEFAULT)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FALSE)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::NEW - 64))
      | (1ULL << (CSharpParser::NULL - 64))
      | (1ULL << (CSharpParser::OBJECT - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REF - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SBYTE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::SHORT - 64))
      | (1ULL << (CSharpParser::SIZEOF - 64))
      | (1ULL << (CSharpParser::STRING - 64))
      | (1ULL << (CSharpParser::THIS - 64))
      | (1ULL << (CSharpParser::TRUE - 64))
      | (1ULL << (CSharpParser::TYPEOF - 64))
      | (1ULL << (CSharpParser::UINT - 64))
      | (1ULL << (CSharpParser::ULONG - 64))
      | (1ULL << (CSharpParser::UNCHECKED - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::USHORT - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
      | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::REAL_LITERAL - 64))
      | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
      | (1ULL << (CSharpParser::REGULAR_STRING - 64))
      | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64))
      | (1ULL << (CSharpParser::OPEN_BRACE - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
      | (1ULL << (CSharpParser::PLUS - 129))
      | (1ULL << (CSharpParser::MINUS - 129))
      | (1ULL << (CSharpParser::STAR - 129))
      | (1ULL << (CSharpParser::AMP - 129))
      | (1ULL << (CSharpParser::CARET - 129))
      | (1ULL << (CSharpParser::BANG - 129))
      | (1ULL << (CSharpParser::TILDE - 129))
      | (1ULL << (CSharpParser::OP_INC - 129))
      | (1ULL << (CSharpParser::OP_DEC - 129))
      | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
      setState(2038);
      variable_initializer();
      setState(2043);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2039);
          match(CSharpParser::COMMA);
          setState(2040);
          variable_initializer(); 
        }
        setState(2045);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx);
      }
      setState(2047);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(2046);
        match(CSharpParser::COMMA);
      }
    }
    setState(2051);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variant_type_parameter_listContext ------------------------------------------------------------------

CSharpParser::Variant_type_parameter_listContext::Variant_type_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Variant_type_parameter_listContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

std::vector<CSharpParser::Variant_type_parameterContext *> CSharpParser::Variant_type_parameter_listContext::variant_type_parameter() {
  return getRuleContexts<CSharpParser::Variant_type_parameterContext>();
}

CSharpParser::Variant_type_parameterContext* CSharpParser::Variant_type_parameter_listContext::variant_type_parameter(size_t i) {
  return getRuleContext<CSharpParser::Variant_type_parameterContext>(i);
}

tree::TerminalNode* CSharpParser::Variant_type_parameter_listContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Variant_type_parameter_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Variant_type_parameter_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Variant_type_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleVariant_type_parameter_list;
}

void CSharpParser::Variant_type_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariant_type_parameter_list(this);
}

void CSharpParser::Variant_type_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariant_type_parameter_list(this);
}

CSharpParser::Variant_type_parameter_listContext* CSharpParser::variant_type_parameter_list() {
  Variant_type_parameter_listContext *_localctx = _tracker.createInstance<Variant_type_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 326, CSharpParser::RuleVariant_type_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2053);
    match(CSharpParser::LT);
    setState(2054);
    variant_type_parameter();
    setState(2059);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(2055);
      match(CSharpParser::COMMA);
      setState(2056);
      variant_type_parameter();
      setState(2061);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2062);
    match(CSharpParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variant_type_parameterContext ------------------------------------------------------------------

CSharpParser::Variant_type_parameterContext::Variant_type_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Variant_type_parameterContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Variant_type_parameterContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Variance_annotationContext* CSharpParser::Variant_type_parameterContext::variance_annotation() {
  return getRuleContext<CSharpParser::Variance_annotationContext>(0);
}


size_t CSharpParser::Variant_type_parameterContext::getRuleIndex() const {
  return CSharpParser::RuleVariant_type_parameter;
}

void CSharpParser::Variant_type_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariant_type_parameter(this);
}

void CSharpParser::Variant_type_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariant_type_parameter(this);
}

CSharpParser::Variant_type_parameterContext* CSharpParser::variant_type_parameter() {
  Variant_type_parameterContext *_localctx = _tracker.createInstance<Variant_type_parameterContext>(_ctx, getState());
  enterRule(_localctx, 328, CSharpParser::RuleVariant_type_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2065);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(2064);
      attributes();
    }
    setState(2068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::IN

    || _la == CSharpParser::OUT) {
      setState(2067);
      variance_annotation();
    }
    setState(2070);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variance_annotationContext ------------------------------------------------------------------

CSharpParser::Variance_annotationContext::Variance_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Variance_annotationContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

tree::TerminalNode* CSharpParser::Variance_annotationContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}


size_t CSharpParser::Variance_annotationContext::getRuleIndex() const {
  return CSharpParser::RuleVariance_annotation;
}

void CSharpParser::Variance_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariance_annotation(this);
}

void CSharpParser::Variance_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariance_annotation(this);
}

CSharpParser::Variance_annotationContext* CSharpParser::variance_annotation() {
  Variance_annotationContext *_localctx = _tracker.createInstance<Variance_annotationContext>(_ctx, getState());
  enterRule(_localctx, 330, CSharpParser::RuleVariance_annotation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2072);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::IN

    || _la == CSharpParser::OUT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_baseContext ------------------------------------------------------------------

CSharpParser::Interface_baseContext::Interface_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interface_baseContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Interface_type_listContext* CSharpParser::Interface_baseContext::interface_type_list() {
  return getRuleContext<CSharpParser::Interface_type_listContext>(0);
}


size_t CSharpParser::Interface_baseContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_base;
}

void CSharpParser::Interface_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_base(this);
}

void CSharpParser::Interface_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_base(this);
}

CSharpParser::Interface_baseContext* CSharpParser::interface_base() {
  Interface_baseContext *_localctx = _tracker.createInstance<Interface_baseContext>(_ctx, getState());
  enterRule(_localctx, 332, CSharpParser::RuleInterface_base);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2074);
    match(CSharpParser::COLON);
    setState(2075);
    interface_type_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_bodyContext ------------------------------------------------------------------

CSharpParser::Interface_bodyContext::Interface_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interface_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Interface_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Interface_member_declarationContext *> CSharpParser::Interface_bodyContext::interface_member_declaration() {
  return getRuleContexts<CSharpParser::Interface_member_declarationContext>();
}

CSharpParser::Interface_member_declarationContext* CSharpParser::Interface_bodyContext::interface_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Interface_member_declarationContext>(i);
}


size_t CSharpParser::Interface_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_body;
}

void CSharpParser::Interface_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_body(this);
}

void CSharpParser::Interface_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_body(this);
}

CSharpParser::Interface_bodyContext* CSharpParser::interface_body() {
  Interface_bodyContext *_localctx = _tracker.createInstance<Interface_bodyContext>(_ctx, getState());
  enterRule(_localctx, 334, CSharpParser::RuleInterface_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2077);
    match(CSharpParser::OPEN_BRACE);
    setState(2081);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
      | (1ULL << (CSharpParser::ALIAS - 10))
      | (1ULL << (CSharpParser::ARGLIST - 10))
      | (1ULL << (CSharpParser::ASCENDING - 10))
      | (1ULL << (CSharpParser::ASYNC - 10))
      | (1ULL << (CSharpParser::AWAIT - 10))
      | (1ULL << (CSharpParser::BOOL - 10))
      | (1ULL << (CSharpParser::BY - 10))
      | (1ULL << (CSharpParser::BYTE - 10))
      | (1ULL << (CSharpParser::CHAR - 10))
      | (1ULL << (CSharpParser::DECIMAL - 10))
      | (1ULL << (CSharpParser::DESCENDING - 10))
      | (1ULL << (CSharpParser::DOUBLE - 10))
      | (1ULL << (CSharpParser::DYNAMIC - 10))
      | (1ULL << (CSharpParser::EQUALS - 10))
      | (1ULL << (CSharpParser::EVENT - 10))
      | (1ULL << (CSharpParser::FLOAT - 10))
      | (1ULL << (CSharpParser::FROM - 10))
      | (1ULL << (CSharpParser::GET - 10))
      | (1ULL << (CSharpParser::GROUP - 10))
      | (1ULL << (CSharpParser::INT - 10))
      | (1ULL << (CSharpParser::INTO - 10))
      | (1ULL << (CSharpParser::JOIN - 10))
      | (1ULL << (CSharpParser::LET - 10))
      | (1ULL << (CSharpParser::LONG - 10))
      | (1ULL << (CSharpParser::NAMEOF - 10))
      | (1ULL << (CSharpParser::NEW - 10))
      | (1ULL << (CSharpParser::OBJECT - 10))
      | (1ULL << (CSharpParser::ON - 10))
      | (1ULL << (CSharpParser::ORDERBY - 10)))) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & ((1ULL << (CSharpParser::PARTIAL - 75))
      | (1ULL << (CSharpParser::READONLY - 75))
      | (1ULL << (CSharpParser::REF - 75))
      | (1ULL << (CSharpParser::REMOVE - 75))
      | (1ULL << (CSharpParser::SBYTE - 75))
      | (1ULL << (CSharpParser::SELECT - 75))
      | (1ULL << (CSharpParser::SET - 75))
      | (1ULL << (CSharpParser::SHORT - 75))
      | (1ULL << (CSharpParser::STRING - 75))
      | (1ULL << (CSharpParser::UINT - 75))
      | (1ULL << (CSharpParser::ULONG - 75))
      | (1ULL << (CSharpParser::UNMANAGED - 75))
      | (1ULL << (CSharpParser::UNSAFE - 75))
      | (1ULL << (CSharpParser::USHORT - 75))
      | (1ULL << (CSharpParser::VAR - 75))
      | (1ULL << (CSharpParser::VOID - 75))
      | (1ULL << (CSharpParser::WHEN - 75))
      | (1ULL << (CSharpParser::WHERE - 75))
      | (1ULL << (CSharpParser::YIELD - 75))
      | (1ULL << (CSharpParser::IDENTIFIER - 75))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 75))
      | (1ULL << (CSharpParser::OPEN_PARENS - 75)))) != 0)) {
      setState(2078);
      interface_member_declaration();
      setState(2083);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2084);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_member_declarationContext ------------------------------------------------------------------

CSharpParser::Interface_member_declarationContext::Interface_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Interface_member_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Interface_member_declarationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::EVENT() {
  return getToken(CSharpParser::EVENT, 0);
}

CSharpParser::AttributesContext* CSharpParser::Interface_member_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Interface_accessorsContext* CSharpParser::Interface_member_declarationContext::interface_accessors() {
  return getRuleContext<CSharpParser::Interface_accessorsContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Interface_member_declarationContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Interface_member_declarationContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Interface_member_declarationContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}


size_t CSharpParser::Interface_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_member_declaration;
}

void CSharpParser::Interface_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_member_declaration(this);
}

void CSharpParser::Interface_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_member_declaration(this);
}

CSharpParser::Interface_member_declarationContext* CSharpParser::interface_member_declaration() {
  Interface_member_declarationContext *_localctx = _tracker.createInstance<Interface_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 336, CSharpParser::RuleInterface_member_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2087);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(2086);
      attributes();
    }
    setState(2090);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::NEW) {
      setState(2089);
      match(CSharpParser::NEW);
    }
    setState(2155);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
    case 1: {
      setState(2093);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::UNSAFE) {
        setState(2092);
        match(CSharpParser::UNSAFE);
      }
      setState(2100);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
      case 1: {
        setState(2095);
        match(CSharpParser::REF);
        break;
      }

      case 2: {
        setState(2096);
        match(CSharpParser::REF);
        setState(2097);
        match(CSharpParser::READONLY);
        break;
      }

      case 3: {
        setState(2098);
        match(CSharpParser::READONLY);
        setState(2099);
        match(CSharpParser::REF);
        break;
      }

      default:
        break;
      }
      setState(2102);
      type_();
      setState(2130);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
      case 1: {
        setState(2103);
        identifier();
        setState(2105);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::LT) {
          setState(2104);
          type_parameter_list();
        }
        setState(2107);
        match(CSharpParser::OPEN_PARENS);
        setState(2109);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 10) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
          | (1ULL << (CSharpParser::ALIAS - 10))
          | (1ULL << (CSharpParser::ARGLIST - 10))
          | (1ULL << (CSharpParser::ASCENDING - 10))
          | (1ULL << (CSharpParser::ASYNC - 10))
          | (1ULL << (CSharpParser::AWAIT - 10))
          | (1ULL << (CSharpParser::BOOL - 10))
          | (1ULL << (CSharpParser::BY - 10))
          | (1ULL << (CSharpParser::BYTE - 10))
          | (1ULL << (CSharpParser::CHAR - 10))
          | (1ULL << (CSharpParser::DECIMAL - 10))
          | (1ULL << (CSharpParser::DESCENDING - 10))
          | (1ULL << (CSharpParser::DOUBLE - 10))
          | (1ULL << (CSharpParser::DYNAMIC - 10))
          | (1ULL << (CSharpParser::EQUALS - 10))
          | (1ULL << (CSharpParser::FLOAT - 10))
          | (1ULL << (CSharpParser::FROM - 10))
          | (1ULL << (CSharpParser::GET - 10))
          | (1ULL << (CSharpParser::GROUP - 10))
          | (1ULL << (CSharpParser::IN - 10))
          | (1ULL << (CSharpParser::INT - 10))
          | (1ULL << (CSharpParser::INTO - 10))
          | (1ULL << (CSharpParser::JOIN - 10))
          | (1ULL << (CSharpParser::LET - 10))
          | (1ULL << (CSharpParser::LONG - 10))
          | (1ULL << (CSharpParser::NAMEOF - 10))
          | (1ULL << (CSharpParser::OBJECT - 10))
          | (1ULL << (CSharpParser::ON - 10))
          | (1ULL << (CSharpParser::ORDERBY - 10))
          | (1ULL << (CSharpParser::OUT - 10)))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 74)) & ((1ULL << (CSharpParser::PARAMS - 74))
          | (1ULL << (CSharpParser::PARTIAL - 74))
          | (1ULL << (CSharpParser::REF - 74))
          | (1ULL << (CSharpParser::REMOVE - 74))
          | (1ULL << (CSharpParser::SBYTE - 74))
          | (1ULL << (CSharpParser::SELECT - 74))
          | (1ULL << (CSharpParser::SET - 74))
          | (1ULL << (CSharpParser::SHORT - 74))
          | (1ULL << (CSharpParser::STRING - 74))
          | (1ULL << (CSharpParser::THIS - 74))
          | (1ULL << (CSharpParser::UINT - 74))
          | (1ULL << (CSharpParser::ULONG - 74))
          | (1ULL << (CSharpParser::UNMANAGED - 74))
          | (1ULL << (CSharpParser::USHORT - 74))
          | (1ULL << (CSharpParser::VAR - 74))
          | (1ULL << (CSharpParser::VOID - 74))
          | (1ULL << (CSharpParser::WHEN - 74))
          | (1ULL << (CSharpParser::WHERE - 74))
          | (1ULL << (CSharpParser::YIELD - 74))
          | (1ULL << (CSharpParser::IDENTIFIER - 74))
          | (1ULL << (CSharpParser::OPEN_BRACKET - 74))
          | (1ULL << (CSharpParser::OPEN_PARENS - 74)))) != 0)) {
          setState(2108);
          formal_parameter_list();
        }
        setState(2111);
        match(CSharpParser::CLOSE_PARENS);
        setState(2113);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::WHERE) {
          setState(2112);
          type_parameter_constraints_clauses();
        }
        setState(2115);
        match(CSharpParser::SEMICOLON);
        break;
      }

      case 2: {
        setState(2117);
        identifier();
        setState(2118);
        match(CSharpParser::OPEN_BRACE);
        setState(2119);
        interface_accessors();
        setState(2120);
        match(CSharpParser::CLOSE_BRACE);
        break;
      }

      case 3: {
        setState(2122);
        match(CSharpParser::THIS);
        setState(2123);
        match(CSharpParser::OPEN_BRACKET);
        setState(2124);
        formal_parameter_list();
        setState(2125);
        match(CSharpParser::CLOSE_BRACKET);
        setState(2126);
        match(CSharpParser::OPEN_BRACE);
        setState(2127);
        interface_accessors();
        setState(2128);
        match(CSharpParser::CLOSE_BRACE);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      setState(2133);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::UNSAFE) {
        setState(2132);
        match(CSharpParser::UNSAFE);
      }
      setState(2135);
      match(CSharpParser::VOID);
      setState(2136);
      identifier();
      setState(2138);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::LT) {
        setState(2137);
        type_parameter_list();
      }
      setState(2140);
      match(CSharpParser::OPEN_PARENS);
      setState(2142);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 10) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
        | (1ULL << (CSharpParser::ALIAS - 10))
        | (1ULL << (CSharpParser::ARGLIST - 10))
        | (1ULL << (CSharpParser::ASCENDING - 10))
        | (1ULL << (CSharpParser::ASYNC - 10))
        | (1ULL << (CSharpParser::AWAIT - 10))
        | (1ULL << (CSharpParser::BOOL - 10))
        | (1ULL << (CSharpParser::BY - 10))
        | (1ULL << (CSharpParser::BYTE - 10))
        | (1ULL << (CSharpParser::CHAR - 10))
        | (1ULL << (CSharpParser::DECIMAL - 10))
        | (1ULL << (CSharpParser::DESCENDING - 10))
        | (1ULL << (CSharpParser::DOUBLE - 10))
        | (1ULL << (CSharpParser::DYNAMIC - 10))
        | (1ULL << (CSharpParser::EQUALS - 10))
        | (1ULL << (CSharpParser::FLOAT - 10))
        | (1ULL << (CSharpParser::FROM - 10))
        | (1ULL << (CSharpParser::GET - 10))
        | (1ULL << (CSharpParser::GROUP - 10))
        | (1ULL << (CSharpParser::IN - 10))
        | (1ULL << (CSharpParser::INT - 10))
        | (1ULL << (CSharpParser::INTO - 10))
        | (1ULL << (CSharpParser::JOIN - 10))
        | (1ULL << (CSharpParser::LET - 10))
        | (1ULL << (CSharpParser::LONG - 10))
        | (1ULL << (CSharpParser::NAMEOF - 10))
        | (1ULL << (CSharpParser::OBJECT - 10))
        | (1ULL << (CSharpParser::ON - 10))
        | (1ULL << (CSharpParser::ORDERBY - 10))
        | (1ULL << (CSharpParser::OUT - 10)))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & ((1ULL << (CSharpParser::PARAMS - 74))
        | (1ULL << (CSharpParser::PARTIAL - 74))
        | (1ULL << (CSharpParser::REF - 74))
        | (1ULL << (CSharpParser::REMOVE - 74))
        | (1ULL << (CSharpParser::SBYTE - 74))
        | (1ULL << (CSharpParser::SELECT - 74))
        | (1ULL << (CSharpParser::SET - 74))
        | (1ULL << (CSharpParser::SHORT - 74))
        | (1ULL << (CSharpParser::STRING - 74))
        | (1ULL << (CSharpParser::THIS - 74))
        | (1ULL << (CSharpParser::UINT - 74))
        | (1ULL << (CSharpParser::ULONG - 74))
        | (1ULL << (CSharpParser::UNMANAGED - 74))
        | (1ULL << (CSharpParser::USHORT - 74))
        | (1ULL << (CSharpParser::VAR - 74))
        | (1ULL << (CSharpParser::VOID - 74))
        | (1ULL << (CSharpParser::WHEN - 74))
        | (1ULL << (CSharpParser::WHERE - 74))
        | (1ULL << (CSharpParser::YIELD - 74))
        | (1ULL << (CSharpParser::IDENTIFIER - 74))
        | (1ULL << (CSharpParser::OPEN_BRACKET - 74))
        | (1ULL << (CSharpParser::OPEN_PARENS - 74)))) != 0)) {
        setState(2141);
        formal_parameter_list();
      }
      setState(2144);
      match(CSharpParser::CLOSE_PARENS);
      setState(2146);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::WHERE) {
        setState(2145);
        type_parameter_constraints_clauses();
      }
      setState(2148);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 3: {
      setState(2150);
      match(CSharpParser::EVENT);
      setState(2151);
      type_();
      setState(2152);
      identifier();
      setState(2153);
      match(CSharpParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_accessorsContext ------------------------------------------------------------------

CSharpParser::Interface_accessorsContext::Interface_accessorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interface_accessorsContext::GET() {
  return getToken(CSharpParser::GET, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Interface_accessorsContext::SEMICOLON() {
  return getTokens(CSharpParser::SEMICOLON);
}

tree::TerminalNode* CSharpParser::Interface_accessorsContext::SEMICOLON(size_t i) {
  return getToken(CSharpParser::SEMICOLON, i);
}

tree::TerminalNode* CSharpParser::Interface_accessorsContext::SET() {
  return getToken(CSharpParser::SET, 0);
}

std::vector<CSharpParser::AttributesContext *> CSharpParser::Interface_accessorsContext::attributes() {
  return getRuleContexts<CSharpParser::AttributesContext>();
}

CSharpParser::AttributesContext* CSharpParser::Interface_accessorsContext::attributes(size_t i) {
  return getRuleContext<CSharpParser::AttributesContext>(i);
}


size_t CSharpParser::Interface_accessorsContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_accessors;
}

void CSharpParser::Interface_accessorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_accessors(this);
}

void CSharpParser::Interface_accessorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_accessors(this);
}

CSharpParser::Interface_accessorsContext* CSharpParser::interface_accessors() {
  Interface_accessorsContext *_localctx = _tracker.createInstance<Interface_accessorsContext>(_ctx, getState());
  enterRule(_localctx, 338, CSharpParser::RuleInterface_accessors);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2158);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(2157);
      attributes();
    }
    setState(2178);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::GET: {
        setState(2160);
        match(CSharpParser::GET);
        setState(2161);
        match(CSharpParser::SEMICOLON);
        setState(2167);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::SET

        || _la == CSharpParser::OPEN_BRACKET) {
          setState(2163);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CSharpParser::OPEN_BRACKET) {
            setState(2162);
            attributes();
          }
          setState(2165);
          match(CSharpParser::SET);
          setState(2166);
          match(CSharpParser::SEMICOLON);
        }
        break;
      }

      case CSharpParser::SET: {
        setState(2169);
        match(CSharpParser::SET);
        setState(2170);
        match(CSharpParser::SEMICOLON);
        setState(2176);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::GET || _la == CSharpParser::OPEN_BRACKET) {
          setState(2172);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CSharpParser::OPEN_BRACKET) {
            setState(2171);
            attributes();
          }
          setState(2174);
          match(CSharpParser::GET);
          setState(2175);
          match(CSharpParser::SEMICOLON);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_baseContext ------------------------------------------------------------------

CSharpParser::Enum_baseContext::Enum_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Enum_baseContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Type_Context* CSharpParser::Enum_baseContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}


size_t CSharpParser::Enum_baseContext::getRuleIndex() const {
  return CSharpParser::RuleEnum_base;
}

void CSharpParser::Enum_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_base(this);
}

void CSharpParser::Enum_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_base(this);
}

CSharpParser::Enum_baseContext* CSharpParser::enum_base() {
  Enum_baseContext *_localctx = _tracker.createInstance<Enum_baseContext>(_ctx, getState());
  enterRule(_localctx, 340, CSharpParser::RuleEnum_base);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2180);
    match(CSharpParser::COLON);
    setState(2181);
    type_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_bodyContext ------------------------------------------------------------------

CSharpParser::Enum_bodyContext::Enum_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Enum_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Enum_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Enum_member_declarationContext *> CSharpParser::Enum_bodyContext::enum_member_declaration() {
  return getRuleContexts<CSharpParser::Enum_member_declarationContext>();
}

CSharpParser::Enum_member_declarationContext* CSharpParser::Enum_bodyContext::enum_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Enum_member_declarationContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Enum_bodyContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Enum_bodyContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Enum_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleEnum_body;
}

void CSharpParser::Enum_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_body(this);
}

void CSharpParser::Enum_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_body(this);
}

CSharpParser::Enum_bodyContext* CSharpParser::enum_body() {
  Enum_bodyContext *_localctx = _tracker.createInstance<Enum_bodyContext>(_ctx, getState());
  enterRule(_localctx, 342, CSharpParser::RuleEnum_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2183);
    match(CSharpParser::OPEN_BRACE);
    setState(2195);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 64)))) != 0)) {
      setState(2184);
      enum_member_declaration();
      setState(2189);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2185);
          match(CSharpParser::COMMA);
          setState(2186);
          enum_member_declaration(); 
        }
        setState(2191);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx);
      }
      setState(2193);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(2192);
        match(CSharpParser::COMMA);
      }
    }
    setState(2197);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_member_declarationContext ------------------------------------------------------------------

CSharpParser::Enum_member_declarationContext::Enum_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Enum_member_declarationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Enum_member_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

tree::TerminalNode* CSharpParser::Enum_member_declarationContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Enum_member_declarationContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Enum_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleEnum_member_declaration;
}

void CSharpParser::Enum_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_member_declaration(this);
}

void CSharpParser::Enum_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_member_declaration(this);
}

CSharpParser::Enum_member_declarationContext* CSharpParser::enum_member_declaration() {
  Enum_member_declarationContext *_localctx = _tracker.createInstance<Enum_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 344, CSharpParser::RuleEnum_member_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2200);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(2199);
      attributes();
    }
    setState(2202);
    identifier();
    setState(2205);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::ASSIGNMENT) {
      setState(2203);
      match(CSharpParser::ASSIGNMENT);
      setState(2204);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_attribute_sectionContext ------------------------------------------------------------------

CSharpParser::Global_attribute_sectionContext::Global_attribute_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Global_attribute_sectionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Global_attribute_targetContext* CSharpParser::Global_attribute_sectionContext::global_attribute_target() {
  return getRuleContext<CSharpParser::Global_attribute_targetContext>(0);
}

tree::TerminalNode* CSharpParser::Global_attribute_sectionContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Attribute_listContext* CSharpParser::Global_attribute_sectionContext::attribute_list() {
  return getRuleContext<CSharpParser::Attribute_listContext>(0);
}

tree::TerminalNode* CSharpParser::Global_attribute_sectionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Global_attribute_sectionContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Global_attribute_sectionContext::getRuleIndex() const {
  return CSharpParser::RuleGlobal_attribute_section;
}

void CSharpParser::Global_attribute_sectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_attribute_section(this);
}

void CSharpParser::Global_attribute_sectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_attribute_section(this);
}

CSharpParser::Global_attribute_sectionContext* CSharpParser::global_attribute_section() {
  Global_attribute_sectionContext *_localctx = _tracker.createInstance<Global_attribute_sectionContext>(_ctx, getState());
  enterRule(_localctx, 346, CSharpParser::RuleGlobal_attribute_section);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2207);
    match(CSharpParser::OPEN_BRACKET);
    setState(2208);
    global_attribute_target();
    setState(2209);
    match(CSharpParser::COLON);
    setState(2210);
    attribute_list();
    setState(2212);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COMMA) {
      setState(2211);
      match(CSharpParser::COMMA);
    }
    setState(2214);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_attribute_targetContext ------------------------------------------------------------------

CSharpParser::Global_attribute_targetContext::Global_attribute_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::KeywordContext* CSharpParser::Global_attribute_targetContext::keyword() {
  return getRuleContext<CSharpParser::KeywordContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Global_attribute_targetContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::Global_attribute_targetContext::getRuleIndex() const {
  return CSharpParser::RuleGlobal_attribute_target;
}

void CSharpParser::Global_attribute_targetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_attribute_target(this);
}

void CSharpParser::Global_attribute_targetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_attribute_target(this);
}

CSharpParser::Global_attribute_targetContext* CSharpParser::global_attribute_target() {
  Global_attribute_targetContext *_localctx = _tracker.createInstance<Global_attribute_targetContext>(_ctx, getState());
  enterRule(_localctx, 348, CSharpParser::RuleGlobal_attribute_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2218);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2216);
      keyword();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2217);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributesContext ------------------------------------------------------------------

CSharpParser::AttributesContext::AttributesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Attribute_sectionContext *> CSharpParser::AttributesContext::attribute_section() {
  return getRuleContexts<CSharpParser::Attribute_sectionContext>();
}

CSharpParser::Attribute_sectionContext* CSharpParser::AttributesContext::attribute_section(size_t i) {
  return getRuleContext<CSharpParser::Attribute_sectionContext>(i);
}


size_t CSharpParser::AttributesContext::getRuleIndex() const {
  return CSharpParser::RuleAttributes;
}

void CSharpParser::AttributesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributes(this);
}

void CSharpParser::AttributesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributes(this);
}

CSharpParser::AttributesContext* CSharpParser::attributes() {
  AttributesContext *_localctx = _tracker.createInstance<AttributesContext>(_ctx, getState());
  enterRule(_localctx, 350, CSharpParser::RuleAttributes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2221); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2220);
      attribute_section();
      setState(2223); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CSharpParser::OPEN_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_sectionContext ------------------------------------------------------------------

CSharpParser::Attribute_sectionContext::Attribute_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Attribute_sectionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Attribute_listContext* CSharpParser::Attribute_sectionContext::attribute_list() {
  return getRuleContext<CSharpParser::Attribute_listContext>(0);
}

tree::TerminalNode* CSharpParser::Attribute_sectionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

CSharpParser::Attribute_targetContext* CSharpParser::Attribute_sectionContext::attribute_target() {
  return getRuleContext<CSharpParser::Attribute_targetContext>(0);
}

tree::TerminalNode* CSharpParser::Attribute_sectionContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

tree::TerminalNode* CSharpParser::Attribute_sectionContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Attribute_sectionContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute_section;
}

void CSharpParser::Attribute_sectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_section(this);
}

void CSharpParser::Attribute_sectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_section(this);
}

CSharpParser::Attribute_sectionContext* CSharpParser::attribute_section() {
  Attribute_sectionContext *_localctx = _tracker.createInstance<Attribute_sectionContext>(_ctx, getState());
  enterRule(_localctx, 352, CSharpParser::RuleAttribute_section);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2225);
    match(CSharpParser::OPEN_BRACKET);
    setState(2229);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
    case 1: {
      setState(2226);
      attribute_target();
      setState(2227);
      match(CSharpParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(2231);
    attribute_list();
    setState(2233);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COMMA) {
      setState(2232);
      match(CSharpParser::COMMA);
    }
    setState(2235);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_targetContext ------------------------------------------------------------------

CSharpParser::Attribute_targetContext::Attribute_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::KeywordContext* CSharpParser::Attribute_targetContext::keyword() {
  return getRuleContext<CSharpParser::KeywordContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Attribute_targetContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::Attribute_targetContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute_target;
}

void CSharpParser::Attribute_targetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_target(this);
}

void CSharpParser::Attribute_targetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_target(this);
}

CSharpParser::Attribute_targetContext* CSharpParser::attribute_target() {
  Attribute_targetContext *_localctx = _tracker.createInstance<Attribute_targetContext>(_ctx, getState());
  enterRule(_localctx, 354, CSharpParser::RuleAttribute_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2239);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2237);
      keyword();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2238);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_listContext ------------------------------------------------------------------

CSharpParser::Attribute_listContext::Attribute_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::AttributeContext *> CSharpParser::Attribute_listContext::attribute() {
  return getRuleContexts<CSharpParser::AttributeContext>();
}

CSharpParser::AttributeContext* CSharpParser::Attribute_listContext::attribute(size_t i) {
  return getRuleContext<CSharpParser::AttributeContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Attribute_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Attribute_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Attribute_listContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute_list;
}

void CSharpParser::Attribute_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_list(this);
}

void CSharpParser::Attribute_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_list(this);
}

CSharpParser::Attribute_listContext* CSharpParser::attribute_list() {
  Attribute_listContext *_localctx = _tracker.createInstance<Attribute_listContext>(_ctx, getState());
  enterRule(_localctx, 356, CSharpParser::RuleAttribute_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2241);
    attribute();
    setState(2246);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2242);
        match(CSharpParser::COMMA);
        setState(2243);
        attribute(); 
      }
      setState(2248);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

CSharpParser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::AttributeContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::AttributeContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::AttributeContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<CSharpParser::Attribute_argumentContext *> CSharpParser::AttributeContext::attribute_argument() {
  return getRuleContexts<CSharpParser::Attribute_argumentContext>();
}

CSharpParser::Attribute_argumentContext* CSharpParser::AttributeContext::attribute_argument(size_t i) {
  return getRuleContext<CSharpParser::Attribute_argumentContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::AttributeContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::AttributeContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::AttributeContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute;
}

void CSharpParser::AttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute(this);
}

void CSharpParser::AttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute(this);
}

CSharpParser::AttributeContext* CSharpParser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 358, CSharpParser::RuleAttribute);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2249);
    namespace_or_type_name();
    setState(2262);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_PARENS) {
      setState(2250);
      match(CSharpParser::OPEN_PARENS);
      setState(2259);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
        | (1ULL << CSharpParser::ALIAS)
        | (1ULL << CSharpParser::ARGLIST)
        | (1ULL << CSharpParser::ASCENDING)
        | (1ULL << CSharpParser::ASYNC)
        | (1ULL << CSharpParser::AWAIT)
        | (1ULL << CSharpParser::BASE)
        | (1ULL << CSharpParser::BOOL)
        | (1ULL << CSharpParser::BY)
        | (1ULL << CSharpParser::BYTE)
        | (1ULL << CSharpParser::CHAR)
        | (1ULL << CSharpParser::CHECKED)
        | (1ULL << CSharpParser::DECIMAL)
        | (1ULL << CSharpParser::DEFAULT)
        | (1ULL << CSharpParser::DELEGATE)
        | (1ULL << CSharpParser::DESCENDING)
        | (1ULL << CSharpParser::DOUBLE)
        | (1ULL << CSharpParser::DYNAMIC)
        | (1ULL << CSharpParser::EQUALS)
        | (1ULL << CSharpParser::FALSE)
        | (1ULL << CSharpParser::FLOAT)
        | (1ULL << CSharpParser::FROM)
        | (1ULL << CSharpParser::GET)
        | (1ULL << CSharpParser::GROUP)
        | (1ULL << CSharpParser::INT)
        | (1ULL << CSharpParser::INTO)
        | (1ULL << CSharpParser::JOIN)
        | (1ULL << CSharpParser::LET)
        | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
        | (1ULL << (CSharpParser::NEW - 64))
        | (1ULL << (CSharpParser::NULL - 64))
        | (1ULL << (CSharpParser::OBJECT - 64))
        | (1ULL << (CSharpParser::ON - 64))
        | (1ULL << (CSharpParser::ORDERBY - 64))
        | (1ULL << (CSharpParser::PARTIAL - 64))
        | (1ULL << (CSharpParser::REF - 64))
        | (1ULL << (CSharpParser::REMOVE - 64))
        | (1ULL << (CSharpParser::SBYTE - 64))
        | (1ULL << (CSharpParser::SELECT - 64))
        | (1ULL << (CSharpParser::SET - 64))
        | (1ULL << (CSharpParser::SHORT - 64))
        | (1ULL << (CSharpParser::SIZEOF - 64))
        | (1ULL << (CSharpParser::STRING - 64))
        | (1ULL << (CSharpParser::THIS - 64))
        | (1ULL << (CSharpParser::TRUE - 64))
        | (1ULL << (CSharpParser::TYPEOF - 64))
        | (1ULL << (CSharpParser::UINT - 64))
        | (1ULL << (CSharpParser::ULONG - 64))
        | (1ULL << (CSharpParser::UNCHECKED - 64))
        | (1ULL << (CSharpParser::UNMANAGED - 64))
        | (1ULL << (CSharpParser::USHORT - 64))
        | (1ULL << (CSharpParser::VAR - 64))
        | (1ULL << (CSharpParser::WHEN - 64))
        | (1ULL << (CSharpParser::WHERE - 64))
        | (1ULL << (CSharpParser::YIELD - 64))
        | (1ULL << (CSharpParser::IDENTIFIER - 64))
        | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
        | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::REAL_LITERAL - 64))
        | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
        | (1ULL << (CSharpParser::REGULAR_STRING - 64))
        | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
        | (1ULL << (CSharpParser::PLUS - 129))
        | (1ULL << (CSharpParser::MINUS - 129))
        | (1ULL << (CSharpParser::STAR - 129))
        | (1ULL << (CSharpParser::AMP - 129))
        | (1ULL << (CSharpParser::CARET - 129))
        | (1ULL << (CSharpParser::BANG - 129))
        | (1ULL << (CSharpParser::TILDE - 129))
        | (1ULL << (CSharpParser::OP_INC - 129))
        | (1ULL << (CSharpParser::OP_DEC - 129))
        | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
        setState(2251);
        attribute_argument();
        setState(2256);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CSharpParser::COMMA) {
          setState(2252);
          match(CSharpParser::COMMA);
          setState(2253);
          attribute_argument();
          setState(2258);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2261);
      match(CSharpParser::CLOSE_PARENS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_argumentContext ------------------------------------------------------------------

CSharpParser::Attribute_argumentContext::Attribute_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Attribute_argumentContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Attribute_argumentContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Attribute_argumentContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}


size_t CSharpParser::Attribute_argumentContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute_argument;
}

void CSharpParser::Attribute_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_argument(this);
}

void CSharpParser::Attribute_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_argument(this);
}

CSharpParser::Attribute_argumentContext* CSharpParser::attribute_argument() {
  Attribute_argumentContext *_localctx = _tracker.createInstance<Attribute_argumentContext>(_ctx, getState());
  enterRule(_localctx, 360, CSharpParser::RuleAttribute_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2267);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      setState(2264);
      identifier();
      setState(2265);
      match(CSharpParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(2269);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pointer_typeContext ------------------------------------------------------------------

CSharpParser::Pointer_typeContext::Pointer_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Pointer_typeContext::STAR() {
  return getToken(CSharpParser::STAR, 0);
}

CSharpParser::Simple_typeContext* CSharpParser::Pointer_typeContext::simple_type() {
  return getRuleContext<CSharpParser::Simple_typeContext>(0);
}

CSharpParser::Class_typeContext* CSharpParser::Pointer_typeContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::Pointer_typeContext::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::Pointer_typeContext::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Pointer_typeContext::INTERR() {
  return getTokens(CSharpParser::INTERR);
}

tree::TerminalNode* CSharpParser::Pointer_typeContext::INTERR(size_t i) {
  return getToken(CSharpParser::INTERR, i);
}

tree::TerminalNode* CSharpParser::Pointer_typeContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}


size_t CSharpParser::Pointer_typeContext::getRuleIndex() const {
  return CSharpParser::RulePointer_type;
}

void CSharpParser::Pointer_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointer_type(this);
}

void CSharpParser::Pointer_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointer_type(this);
}

CSharpParser::Pointer_typeContext* CSharpParser::pointer_type() {
  Pointer_typeContext *_localctx = _tracker.createInstance<Pointer_typeContext>(_ctx, getState());
  enterRule(_localctx, 362, CSharpParser::RulePointer_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2286);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::DECIMAL:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::STRING:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2273);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::BOOL:
          case CSharpParser::BYTE:
          case CSharpParser::CHAR:
          case CSharpParser::DECIMAL:
          case CSharpParser::DOUBLE:
          case CSharpParser::FLOAT:
          case CSharpParser::INT:
          case CSharpParser::LONG:
          case CSharpParser::SBYTE:
          case CSharpParser::SHORT:
          case CSharpParser::UINT:
          case CSharpParser::ULONG:
          case CSharpParser::USHORT: {
            setState(2271);
            simple_type();
            break;
          }

          case CSharpParser::ADD:
          case CSharpParser::ALIAS:
          case CSharpParser::ARGLIST:
          case CSharpParser::ASCENDING:
          case CSharpParser::ASYNC:
          case CSharpParser::AWAIT:
          case CSharpParser::BY:
          case CSharpParser::DESCENDING:
          case CSharpParser::DYNAMIC:
          case CSharpParser::EQUALS:
          case CSharpParser::FROM:
          case CSharpParser::GET:
          case CSharpParser::GROUP:
          case CSharpParser::INTO:
          case CSharpParser::JOIN:
          case CSharpParser::LET:
          case CSharpParser::NAMEOF:
          case CSharpParser::OBJECT:
          case CSharpParser::ON:
          case CSharpParser::ORDERBY:
          case CSharpParser::PARTIAL:
          case CSharpParser::REMOVE:
          case CSharpParser::SELECT:
          case CSharpParser::SET:
          case CSharpParser::STRING:
          case CSharpParser::UNMANAGED:
          case CSharpParser::VAR:
          case CSharpParser::WHEN:
          case CSharpParser::WHERE:
          case CSharpParser::YIELD:
          case CSharpParser::IDENTIFIER: {
            setState(2272);
            class_type();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(2279);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CSharpParser::OPEN_BRACKET

        || _la == CSharpParser::INTERR) {
          setState(2277);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case CSharpParser::OPEN_BRACKET: {
              setState(2275);
              rank_specifier();
              break;
            }

            case CSharpParser::INTERR: {
              setState(2276);
              match(CSharpParser::INTERR);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(2281);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2282);
        match(CSharpParser::STAR);
        break;
      }

      case CSharpParser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(2284);
        match(CSharpParser::VOID);
        setState(2285);
        match(CSharpParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_pointer_declaratorsContext ------------------------------------------------------------------

CSharpParser::Fixed_pointer_declaratorsContext::Fixed_pointer_declaratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Fixed_pointer_declaratorContext *> CSharpParser::Fixed_pointer_declaratorsContext::fixed_pointer_declarator() {
  return getRuleContexts<CSharpParser::Fixed_pointer_declaratorContext>();
}

CSharpParser::Fixed_pointer_declaratorContext* CSharpParser::Fixed_pointer_declaratorsContext::fixed_pointer_declarator(size_t i) {
  return getRuleContext<CSharpParser::Fixed_pointer_declaratorContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Fixed_pointer_declaratorsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Fixed_pointer_declaratorsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Fixed_pointer_declaratorsContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_pointer_declarators;
}

void CSharpParser::Fixed_pointer_declaratorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_pointer_declarators(this);
}

void CSharpParser::Fixed_pointer_declaratorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_pointer_declarators(this);
}

CSharpParser::Fixed_pointer_declaratorsContext* CSharpParser::fixed_pointer_declarators() {
  Fixed_pointer_declaratorsContext *_localctx = _tracker.createInstance<Fixed_pointer_declaratorsContext>(_ctx, getState());
  enterRule(_localctx, 364, CSharpParser::RuleFixed_pointer_declarators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2288);
    fixed_pointer_declarator();
    setState(2293);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(2289);
      match(CSharpParser::COMMA);
      setState(2290);
      fixed_pointer_declarator();
      setState(2295);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_pointer_declaratorContext ------------------------------------------------------------------

CSharpParser::Fixed_pointer_declaratorContext::Fixed_pointer_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Fixed_pointer_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_pointer_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Fixed_pointer_initializerContext* CSharpParser::Fixed_pointer_declaratorContext::fixed_pointer_initializer() {
  return getRuleContext<CSharpParser::Fixed_pointer_initializerContext>(0);
}


size_t CSharpParser::Fixed_pointer_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_pointer_declarator;
}

void CSharpParser::Fixed_pointer_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_pointer_declarator(this);
}

void CSharpParser::Fixed_pointer_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_pointer_declarator(this);
}

CSharpParser::Fixed_pointer_declaratorContext* CSharpParser::fixed_pointer_declarator() {
  Fixed_pointer_declaratorContext *_localctx = _tracker.createInstance<Fixed_pointer_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 366, CSharpParser::RuleFixed_pointer_declarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2296);
    identifier();
    setState(2297);
    match(CSharpParser::ASSIGNMENT);
    setState(2298);
    fixed_pointer_initializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_pointer_initializerContext ------------------------------------------------------------------

CSharpParser::Fixed_pointer_initializerContext::Fixed_pointer_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Fixed_pointer_initializerContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_pointer_initializerContext::AMP() {
  return getToken(CSharpParser::AMP, 0);
}

CSharpParser::Stackalloc_initializerContext* CSharpParser::Fixed_pointer_initializerContext::stackalloc_initializer() {
  return getRuleContext<CSharpParser::Stackalloc_initializerContext>(0);
}


size_t CSharpParser::Fixed_pointer_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_pointer_initializer;
}

void CSharpParser::Fixed_pointer_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_pointer_initializer(this);
}

void CSharpParser::Fixed_pointer_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_pointer_initializer(this);
}

CSharpParser::Fixed_pointer_initializerContext* CSharpParser::fixed_pointer_initializer() {
  Fixed_pointer_initializerContext *_localctx = _tracker.createInstance<Fixed_pointer_initializerContext>(_ctx, getState());
  enterRule(_localctx, 368, CSharpParser::RuleFixed_pointer_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2305);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(2301);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
        case 1: {
          setState(2300);
          match(CSharpParser::AMP);
          break;
        }

        default:
          break;
        }
        setState(2303);
        expression();
        break;
      }

      case CSharpParser::STACKALLOC: {
        enterOuterAlt(_localctx, 2);
        setState(2304);
        stackalloc_initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_size_buffer_declaratorContext ------------------------------------------------------------------

CSharpParser::Fixed_size_buffer_declaratorContext::Fixed_size_buffer_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Fixed_size_buffer_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_size_buffer_declaratorContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Fixed_size_buffer_declaratorContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_size_buffer_declaratorContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}


size_t CSharpParser::Fixed_size_buffer_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_size_buffer_declarator;
}

void CSharpParser::Fixed_size_buffer_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_size_buffer_declarator(this);
}

void CSharpParser::Fixed_size_buffer_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_size_buffer_declarator(this);
}

CSharpParser::Fixed_size_buffer_declaratorContext* CSharpParser::fixed_size_buffer_declarator() {
  Fixed_size_buffer_declaratorContext *_localctx = _tracker.createInstance<Fixed_size_buffer_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 370, CSharpParser::RuleFixed_size_buffer_declarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2307);
    identifier();
    setState(2308);
    match(CSharpParser::OPEN_BRACKET);
    setState(2309);
    expression();
    setState(2310);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stackalloc_initializerContext ------------------------------------------------------------------

CSharpParser::Stackalloc_initializerContext::Stackalloc_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::STACKALLOC() {
  return getToken(CSharpParser::STACKALLOC, 0);
}

CSharpParser::Type_Context* CSharpParser::Stackalloc_initializerContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Stackalloc_initializerContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Stackalloc_initializerContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Stackalloc_initializerContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Stackalloc_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleStackalloc_initializer;
}

void CSharpParser::Stackalloc_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStackalloc_initializer(this);
}

void CSharpParser::Stackalloc_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStackalloc_initializer(this);
}

CSharpParser::Stackalloc_initializerContext* CSharpParser::stackalloc_initializer() {
  Stackalloc_initializerContext *_localctx = _tracker.createInstance<Stackalloc_initializerContext>(_ctx, getState());
  enterRule(_localctx, 372, CSharpParser::RuleStackalloc_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2341);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2312);
      match(CSharpParser::STACKALLOC);
      setState(2313);
      type_();
      setState(2314);
      match(CSharpParser::OPEN_BRACKET);
      setState(2315);
      expression();
      setState(2316);
      match(CSharpParser::CLOSE_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2318);
      match(CSharpParser::STACKALLOC);
      setState(2320);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 10) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
        | (1ULL << (CSharpParser::ALIAS - 10))
        | (1ULL << (CSharpParser::ARGLIST - 10))
        | (1ULL << (CSharpParser::ASCENDING - 10))
        | (1ULL << (CSharpParser::ASYNC - 10))
        | (1ULL << (CSharpParser::AWAIT - 10))
        | (1ULL << (CSharpParser::BOOL - 10))
        | (1ULL << (CSharpParser::BY - 10))
        | (1ULL << (CSharpParser::BYTE - 10))
        | (1ULL << (CSharpParser::CHAR - 10))
        | (1ULL << (CSharpParser::DECIMAL - 10))
        | (1ULL << (CSharpParser::DESCENDING - 10))
        | (1ULL << (CSharpParser::DOUBLE - 10))
        | (1ULL << (CSharpParser::DYNAMIC - 10))
        | (1ULL << (CSharpParser::EQUALS - 10))
        | (1ULL << (CSharpParser::FLOAT - 10))
        | (1ULL << (CSharpParser::FROM - 10))
        | (1ULL << (CSharpParser::GET - 10))
        | (1ULL << (CSharpParser::GROUP - 10))
        | (1ULL << (CSharpParser::INT - 10))
        | (1ULL << (CSharpParser::INTO - 10))
        | (1ULL << (CSharpParser::JOIN - 10))
        | (1ULL << (CSharpParser::LET - 10))
        | (1ULL << (CSharpParser::LONG - 10))
        | (1ULL << (CSharpParser::NAMEOF - 10))
        | (1ULL << (CSharpParser::OBJECT - 10))
        | (1ULL << (CSharpParser::ON - 10))
        | (1ULL << (CSharpParser::ORDERBY - 10)))) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 75)) & ((1ULL << (CSharpParser::PARTIAL - 75))
        | (1ULL << (CSharpParser::REMOVE - 75))
        | (1ULL << (CSharpParser::SBYTE - 75))
        | (1ULL << (CSharpParser::SELECT - 75))
        | (1ULL << (CSharpParser::SET - 75))
        | (1ULL << (CSharpParser::SHORT - 75))
        | (1ULL << (CSharpParser::STRING - 75))
        | (1ULL << (CSharpParser::UINT - 75))
        | (1ULL << (CSharpParser::ULONG - 75))
        | (1ULL << (CSharpParser::UNMANAGED - 75))
        | (1ULL << (CSharpParser::USHORT - 75))
        | (1ULL << (CSharpParser::VAR - 75))
        | (1ULL << (CSharpParser::VOID - 75))
        | (1ULL << (CSharpParser::WHEN - 75))
        | (1ULL << (CSharpParser::WHERE - 75))
        | (1ULL << (CSharpParser::YIELD - 75))
        | (1ULL << (CSharpParser::IDENTIFIER - 75))
        | (1ULL << (CSharpParser::OPEN_PARENS - 75)))) != 0)) {
        setState(2319);
        type_();
      }
      setState(2322);
      match(CSharpParser::OPEN_BRACKET);
      setState(2324);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
        | (1ULL << CSharpParser::ALIAS)
        | (1ULL << CSharpParser::ARGLIST)
        | (1ULL << CSharpParser::ASCENDING)
        | (1ULL << CSharpParser::ASYNC)
        | (1ULL << CSharpParser::AWAIT)
        | (1ULL << CSharpParser::BASE)
        | (1ULL << CSharpParser::BOOL)
        | (1ULL << CSharpParser::BY)
        | (1ULL << CSharpParser::BYTE)
        | (1ULL << CSharpParser::CHAR)
        | (1ULL << CSharpParser::CHECKED)
        | (1ULL << CSharpParser::DECIMAL)
        | (1ULL << CSharpParser::DEFAULT)
        | (1ULL << CSharpParser::DELEGATE)
        | (1ULL << CSharpParser::DESCENDING)
        | (1ULL << CSharpParser::DOUBLE)
        | (1ULL << CSharpParser::DYNAMIC)
        | (1ULL << CSharpParser::EQUALS)
        | (1ULL << CSharpParser::FALSE)
        | (1ULL << CSharpParser::FLOAT)
        | (1ULL << CSharpParser::FROM)
        | (1ULL << CSharpParser::GET)
        | (1ULL << CSharpParser::GROUP)
        | (1ULL << CSharpParser::INT)
        | (1ULL << CSharpParser::INTO)
        | (1ULL << CSharpParser::JOIN)
        | (1ULL << CSharpParser::LET)
        | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
        | (1ULL << (CSharpParser::NEW - 64))
        | (1ULL << (CSharpParser::NULL - 64))
        | (1ULL << (CSharpParser::OBJECT - 64))
        | (1ULL << (CSharpParser::ON - 64))
        | (1ULL << (CSharpParser::ORDERBY - 64))
        | (1ULL << (CSharpParser::PARTIAL - 64))
        | (1ULL << (CSharpParser::REF - 64))
        | (1ULL << (CSharpParser::REMOVE - 64))
        | (1ULL << (CSharpParser::SBYTE - 64))
        | (1ULL << (CSharpParser::SELECT - 64))
        | (1ULL << (CSharpParser::SET - 64))
        | (1ULL << (CSharpParser::SHORT - 64))
        | (1ULL << (CSharpParser::SIZEOF - 64))
        | (1ULL << (CSharpParser::STRING - 64))
        | (1ULL << (CSharpParser::THIS - 64))
        | (1ULL << (CSharpParser::TRUE - 64))
        | (1ULL << (CSharpParser::TYPEOF - 64))
        | (1ULL << (CSharpParser::UINT - 64))
        | (1ULL << (CSharpParser::ULONG - 64))
        | (1ULL << (CSharpParser::UNCHECKED - 64))
        | (1ULL << (CSharpParser::UNMANAGED - 64))
        | (1ULL << (CSharpParser::USHORT - 64))
        | (1ULL << (CSharpParser::VAR - 64))
        | (1ULL << (CSharpParser::WHEN - 64))
        | (1ULL << (CSharpParser::WHERE - 64))
        | (1ULL << (CSharpParser::YIELD - 64))
        | (1ULL << (CSharpParser::IDENTIFIER - 64))
        | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
        | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
        | (1ULL << (CSharpParser::REAL_LITERAL - 64))
        | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
        | (1ULL << (CSharpParser::REGULAR_STRING - 64))
        | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
        | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
        | (1ULL << (CSharpParser::PLUS - 129))
        | (1ULL << (CSharpParser::MINUS - 129))
        | (1ULL << (CSharpParser::STAR - 129))
        | (1ULL << (CSharpParser::AMP - 129))
        | (1ULL << (CSharpParser::CARET - 129))
        | (1ULL << (CSharpParser::BANG - 129))
        | (1ULL << (CSharpParser::TILDE - 129))
        | (1ULL << (CSharpParser::OP_INC - 129))
        | (1ULL << (CSharpParser::OP_DEC - 129))
        | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
        setState(2323);
        expression();
      }
      setState(2326);
      match(CSharpParser::CLOSE_BRACKET);
      setState(2327);
      match(CSharpParser::OPEN_BRACE);
      setState(2328);
      expression();
      setState(2333);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2329);
          match(CSharpParser::COMMA);
          setState(2330);
          expression(); 
        }
        setState(2335);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
      }
      setState(2337);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(2336);
        match(CSharpParser::COMMA);
      }
      setState(2339);
      match(CSharpParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Right_arrowContext ------------------------------------------------------------------

CSharpParser::Right_arrowContext::Right_arrowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Right_arrowContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Right_arrowContext::GT() {
  return getToken(CSharpParser::GT, 0);
}


size_t CSharpParser::Right_arrowContext::getRuleIndex() const {
  return CSharpParser::RuleRight_arrow;
}

void CSharpParser::Right_arrowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRight_arrow(this);
}

void CSharpParser::Right_arrowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRight_arrow(this);
}

CSharpParser::Right_arrowContext* CSharpParser::right_arrow() {
  Right_arrowContext *_localctx = _tracker.createInstance<Right_arrowContext>(_ctx, getState());
  enterRule(_localctx, 374, CSharpParser::RuleRight_arrow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2343);
    dynamic_cast<Right_arrowContext *>(_localctx)->first = match(CSharpParser::ASSIGNMENT);
    setState(2344);
    dynamic_cast<Right_arrowContext *>(_localctx)->second = match(CSharpParser::GT);
    setState(2345);

    if (!((dynamic_cast<Right_arrowContext *>(_localctx)->first != nullptr ? dynamic_cast<Right_arrowContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (dynamic_cast<Right_arrowContext *>(_localctx)->second != nullptr ? dynamic_cast<Right_arrowContext *>(_localctx)->second->getTokenIndex() : 0))) throw FailedPredicateException(this, "$first.index + 1 == $second.index");
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Right_shiftContext ------------------------------------------------------------------

CSharpParser::Right_shiftContext::Right_shiftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CSharpParser::Right_shiftContext::GT() {
  return getTokens(CSharpParser::GT);
}

tree::TerminalNode* CSharpParser::Right_shiftContext::GT(size_t i) {
  return getToken(CSharpParser::GT, i);
}


size_t CSharpParser::Right_shiftContext::getRuleIndex() const {
  return CSharpParser::RuleRight_shift;
}

void CSharpParser::Right_shiftContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRight_shift(this);
}

void CSharpParser::Right_shiftContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRight_shift(this);
}

CSharpParser::Right_shiftContext* CSharpParser::right_shift() {
  Right_shiftContext *_localctx = _tracker.createInstance<Right_shiftContext>(_ctx, getState());
  enterRule(_localctx, 376, CSharpParser::RuleRight_shift);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2347);
    dynamic_cast<Right_shiftContext *>(_localctx)->first = match(CSharpParser::GT);
    setState(2348);
    dynamic_cast<Right_shiftContext *>(_localctx)->second = match(CSharpParser::GT);
    setState(2349);

    if (!((dynamic_cast<Right_shiftContext *>(_localctx)->first != nullptr ? dynamic_cast<Right_shiftContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (dynamic_cast<Right_shiftContext *>(_localctx)->second != nullptr ? dynamic_cast<Right_shiftContext *>(_localctx)->second->getTokenIndex() : 0))) throw FailedPredicateException(this, "$first.index + 1 == $second.index");
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Right_shift_assignmentContext ------------------------------------------------------------------

CSharpParser::Right_shift_assignmentContext::Right_shift_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Right_shift_assignmentContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

tree::TerminalNode* CSharpParser::Right_shift_assignmentContext::OP_GE() {
  return getToken(CSharpParser::OP_GE, 0);
}


size_t CSharpParser::Right_shift_assignmentContext::getRuleIndex() const {
  return CSharpParser::RuleRight_shift_assignment;
}

void CSharpParser::Right_shift_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRight_shift_assignment(this);
}

void CSharpParser::Right_shift_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRight_shift_assignment(this);
}

CSharpParser::Right_shift_assignmentContext* CSharpParser::right_shift_assignment() {
  Right_shift_assignmentContext *_localctx = _tracker.createInstance<Right_shift_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 378, CSharpParser::RuleRight_shift_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2351);
    dynamic_cast<Right_shift_assignmentContext *>(_localctx)->first = match(CSharpParser::GT);
    setState(2352);
    dynamic_cast<Right_shift_assignmentContext *>(_localctx)->second = match(CSharpParser::OP_GE);
    setState(2353);

    if (!((dynamic_cast<Right_shift_assignmentContext *>(_localctx)->first != nullptr ? dynamic_cast<Right_shift_assignmentContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (dynamic_cast<Right_shift_assignmentContext *>(_localctx)->second != nullptr ? dynamic_cast<Right_shift_assignmentContext *>(_localctx)->second->getTokenIndex() : 0))) throw FailedPredicateException(this, "$first.index + 1 == $second.index");
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

CSharpParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Boolean_literalContext* CSharpParser::LiteralContext::boolean_literal() {
  return getRuleContext<CSharpParser::Boolean_literalContext>(0);
}

CSharpParser::String_literalContext* CSharpParser::LiteralContext::string_literal() {
  return getRuleContext<CSharpParser::String_literalContext>(0);
}

tree::TerminalNode* CSharpParser::LiteralContext::INTEGER_LITERAL() {
  return getToken(CSharpParser::INTEGER_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::HEX_INTEGER_LITERAL() {
  return getToken(CSharpParser::HEX_INTEGER_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::BIN_INTEGER_LITERAL() {
  return getToken(CSharpParser::BIN_INTEGER_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::REAL_LITERAL() {
  return getToken(CSharpParser::REAL_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::CHARACTER_LITERAL() {
  return getToken(CSharpParser::CHARACTER_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::NULL() {
  return getToken(CSharpParser::NULL, 0);
}


size_t CSharpParser::LiteralContext::getRuleIndex() const {
  return CSharpParser::RuleLiteral;
}

void CSharpParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void CSharpParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

CSharpParser::LiteralContext* CSharpParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 380, CSharpParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2363);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::FALSE:
      case CSharpParser::TRUE: {
        enterOuterAlt(_localctx, 1);
        setState(2355);
        boolean_literal();
        break;
      }

      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2356);
        string_literal();
        break;
      }

      case CSharpParser::INTEGER_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(2357);
        match(CSharpParser::INTEGER_LITERAL);
        break;
      }

      case CSharpParser::HEX_INTEGER_LITERAL: {
        enterOuterAlt(_localctx, 4);
        setState(2358);
        match(CSharpParser::HEX_INTEGER_LITERAL);
        break;
      }

      case CSharpParser::BIN_INTEGER_LITERAL: {
        enterOuterAlt(_localctx, 5);
        setState(2359);
        match(CSharpParser::BIN_INTEGER_LITERAL);
        break;
      }

      case CSharpParser::REAL_LITERAL: {
        enterOuterAlt(_localctx, 6);
        setState(2360);
        match(CSharpParser::REAL_LITERAL);
        break;
      }

      case CSharpParser::CHARACTER_LITERAL: {
        enterOuterAlt(_localctx, 7);
        setState(2361);
        match(CSharpParser::CHARACTER_LITERAL);
        break;
      }

      case CSharpParser::NULL: {
        enterOuterAlt(_localctx, 8);
        setState(2362);
        match(CSharpParser::NULL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_literalContext ------------------------------------------------------------------

CSharpParser::Boolean_literalContext::Boolean_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Boolean_literalContext::TRUE() {
  return getToken(CSharpParser::TRUE, 0);
}

tree::TerminalNode* CSharpParser::Boolean_literalContext::FALSE() {
  return getToken(CSharpParser::FALSE, 0);
}


size_t CSharpParser::Boolean_literalContext::getRuleIndex() const {
  return CSharpParser::RuleBoolean_literal;
}

void CSharpParser::Boolean_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_literal(this);
}

void CSharpParser::Boolean_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_literal(this);
}

CSharpParser::Boolean_literalContext* CSharpParser::boolean_literal() {
  Boolean_literalContext *_localctx = _tracker.createInstance<Boolean_literalContext>(_ctx, getState());
  enterRule(_localctx, 382, CSharpParser::RuleBoolean_literal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2365);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::FALSE

    || _la == CSharpParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_literalContext ------------------------------------------------------------------

CSharpParser::String_literalContext::String_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Interpolated_regular_stringContext* CSharpParser::String_literalContext::interpolated_regular_string() {
  return getRuleContext<CSharpParser::Interpolated_regular_stringContext>(0);
}

CSharpParser::Interpolated_verbatium_stringContext* CSharpParser::String_literalContext::interpolated_verbatium_string() {
  return getRuleContext<CSharpParser::Interpolated_verbatium_stringContext>(0);
}

tree::TerminalNode* CSharpParser::String_literalContext::REGULAR_STRING() {
  return getToken(CSharpParser::REGULAR_STRING, 0);
}

tree::TerminalNode* CSharpParser::String_literalContext::VERBATIUM_STRING() {
  return getToken(CSharpParser::VERBATIUM_STRING, 0);
}


size_t CSharpParser::String_literalContext::getRuleIndex() const {
  return CSharpParser::RuleString_literal;
}

void CSharpParser::String_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_literal(this);
}

void CSharpParser::String_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_literal(this);
}

CSharpParser::String_literalContext* CSharpParser::string_literal() {
  String_literalContext *_localctx = _tracker.createInstance<String_literalContext>(_ctx, getState());
  enterRule(_localctx, 384, CSharpParser::RuleString_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2371);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START: {
        enterOuterAlt(_localctx, 1);
        setState(2367);
        interpolated_regular_string();
        break;
      }

      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2368);
        interpolated_verbatium_string();
        break;
      }

      case CSharpParser::REGULAR_STRING: {
        enterOuterAlt(_localctx, 3);
        setState(2369);
        match(CSharpParser::REGULAR_STRING);
        break;
      }

      case CSharpParser::VERBATIUM_STRING: {
        enterOuterAlt(_localctx, 4);
        setState(2370);
        match(CSharpParser::VERBATIUM_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_regular_stringContext ------------------------------------------------------------------

CSharpParser::Interpolated_regular_stringContext::Interpolated_regular_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interpolated_regular_stringContext::INTERPOLATED_REGULAR_STRING_START() {
  return getToken(CSharpParser::INTERPOLATED_REGULAR_STRING_START, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_regular_stringContext::DOUBLE_QUOTE_INSIDE() {
  return getToken(CSharpParser::DOUBLE_QUOTE_INSIDE, 0);
}

std::vector<CSharpParser::Interpolated_regular_string_partContext *> CSharpParser::Interpolated_regular_stringContext::interpolated_regular_string_part() {
  return getRuleContexts<CSharpParser::Interpolated_regular_string_partContext>();
}

CSharpParser::Interpolated_regular_string_partContext* CSharpParser::Interpolated_regular_stringContext::interpolated_regular_string_part(size_t i) {
  return getRuleContext<CSharpParser::Interpolated_regular_string_partContext>(i);
}


size_t CSharpParser::Interpolated_regular_stringContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_regular_string;
}

void CSharpParser::Interpolated_regular_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_regular_string(this);
}

void CSharpParser::Interpolated_regular_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_regular_string(this);
}

CSharpParser::Interpolated_regular_stringContext* CSharpParser::interpolated_regular_string() {
  Interpolated_regular_stringContext *_localctx = _tracker.createInstance<Interpolated_regular_stringContext>(_ctx, getState());
  enterRule(_localctx, 386, CSharpParser::RuleInterpolated_regular_string);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2373);
    match(CSharpParser::INTERPOLATED_REGULAR_STRING_START);
    setState(2377);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BASE)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CHECKED)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DEFAULT)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FALSE)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::NEW - 64))
      | (1ULL << (CSharpParser::NULL - 64))
      | (1ULL << (CSharpParser::OBJECT - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REF - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SBYTE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::SHORT - 64))
      | (1ULL << (CSharpParser::SIZEOF - 64))
      | (1ULL << (CSharpParser::STRING - 64))
      | (1ULL << (CSharpParser::THIS - 64))
      | (1ULL << (CSharpParser::TRUE - 64))
      | (1ULL << (CSharpParser::TYPEOF - 64))
      | (1ULL << (CSharpParser::UINT - 64))
      | (1ULL << (CSharpParser::ULONG - 64))
      | (1ULL << (CSharpParser::UNCHECKED - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::USHORT - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
      | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::REAL_LITERAL - 64))
      | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
      | (1ULL << (CSharpParser::REGULAR_STRING - 64))
      | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
      | (1ULL << (CSharpParser::PLUS - 129))
      | (1ULL << (CSharpParser::MINUS - 129))
      | (1ULL << (CSharpParser::STAR - 129))
      | (1ULL << (CSharpParser::AMP - 129))
      | (1ULL << (CSharpParser::CARET - 129))
      | (1ULL << (CSharpParser::BANG - 129))
      | (1ULL << (CSharpParser::TILDE - 129))
      | (1ULL << (CSharpParser::OP_INC - 129))
      | (1ULL << (CSharpParser::OP_DEC - 129))
      | (1ULL << (CSharpParser::OP_RANGE - 129))
      | (1ULL << (CSharpParser::DOUBLE_CURLY_INSIDE - 129))
      | (1ULL << (CSharpParser::REGULAR_CHAR_INSIDE - 129))
      | (1ULL << (CSharpParser::REGULAR_STRING_INSIDE - 129)))) != 0)) {
      setState(2374);
      interpolated_regular_string_part();
      setState(2379);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2380);
    match(CSharpParser::DOUBLE_QUOTE_INSIDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_verbatium_stringContext ------------------------------------------------------------------

CSharpParser::Interpolated_verbatium_stringContext::Interpolated_verbatium_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_stringContext::INTERPOLATED_VERBATIUM_STRING_START() {
  return getToken(CSharpParser::INTERPOLATED_VERBATIUM_STRING_START, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_stringContext::DOUBLE_QUOTE_INSIDE() {
  return getToken(CSharpParser::DOUBLE_QUOTE_INSIDE, 0);
}

std::vector<CSharpParser::Interpolated_verbatium_string_partContext *> CSharpParser::Interpolated_verbatium_stringContext::interpolated_verbatium_string_part() {
  return getRuleContexts<CSharpParser::Interpolated_verbatium_string_partContext>();
}

CSharpParser::Interpolated_verbatium_string_partContext* CSharpParser::Interpolated_verbatium_stringContext::interpolated_verbatium_string_part(size_t i) {
  return getRuleContext<CSharpParser::Interpolated_verbatium_string_partContext>(i);
}


size_t CSharpParser::Interpolated_verbatium_stringContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_verbatium_string;
}

void CSharpParser::Interpolated_verbatium_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_verbatium_string(this);
}

void CSharpParser::Interpolated_verbatium_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_verbatium_string(this);
}

CSharpParser::Interpolated_verbatium_stringContext* CSharpParser::interpolated_verbatium_string() {
  Interpolated_verbatium_stringContext *_localctx = _tracker.createInstance<Interpolated_verbatium_stringContext>(_ctx, getState());
  enterRule(_localctx, 388, CSharpParser::RuleInterpolated_verbatium_string);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2382);
    match(CSharpParser::INTERPOLATED_VERBATIUM_STRING_START);
    setState(2386);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BASE)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CHECKED)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DEFAULT)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FALSE)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::NEW - 64))
      | (1ULL << (CSharpParser::NULL - 64))
      | (1ULL << (CSharpParser::OBJECT - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REF - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SBYTE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::SHORT - 64))
      | (1ULL << (CSharpParser::SIZEOF - 64))
      | (1ULL << (CSharpParser::STRING - 64))
      | (1ULL << (CSharpParser::THIS - 64))
      | (1ULL << (CSharpParser::TRUE - 64))
      | (1ULL << (CSharpParser::TYPEOF - 64))
      | (1ULL << (CSharpParser::UINT - 64))
      | (1ULL << (CSharpParser::ULONG - 64))
      | (1ULL << (CSharpParser::UNCHECKED - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::USHORT - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
      | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::REAL_LITERAL - 64))
      | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
      | (1ULL << (CSharpParser::REGULAR_STRING - 64))
      | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
      | (1ULL << (CSharpParser::PLUS - 129))
      | (1ULL << (CSharpParser::MINUS - 129))
      | (1ULL << (CSharpParser::STAR - 129))
      | (1ULL << (CSharpParser::AMP - 129))
      | (1ULL << (CSharpParser::CARET - 129))
      | (1ULL << (CSharpParser::BANG - 129))
      | (1ULL << (CSharpParser::TILDE - 129))
      | (1ULL << (CSharpParser::OP_INC - 129))
      | (1ULL << (CSharpParser::OP_DEC - 129))
      | (1ULL << (CSharpParser::OP_RANGE - 129))
      | (1ULL << (CSharpParser::DOUBLE_CURLY_INSIDE - 129))
      | (1ULL << (CSharpParser::VERBATIUM_DOUBLE_QUOTE_INSIDE - 129))
      | (1ULL << (CSharpParser::VERBATIUM_INSIDE_STRING - 129)))) != 0)) {
      setState(2383);
      interpolated_verbatium_string_part();
      setState(2388);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2389);
    match(CSharpParser::DOUBLE_QUOTE_INSIDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_regular_string_partContext ------------------------------------------------------------------

CSharpParser::Interpolated_regular_string_partContext::Interpolated_regular_string_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Interpolated_string_expressionContext* CSharpParser::Interpolated_regular_string_partContext::interpolated_string_expression() {
  return getRuleContext<CSharpParser::Interpolated_string_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Interpolated_regular_string_partContext::DOUBLE_CURLY_INSIDE() {
  return getToken(CSharpParser::DOUBLE_CURLY_INSIDE, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_regular_string_partContext::REGULAR_CHAR_INSIDE() {
  return getToken(CSharpParser::REGULAR_CHAR_INSIDE, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_regular_string_partContext::REGULAR_STRING_INSIDE() {
  return getToken(CSharpParser::REGULAR_STRING_INSIDE, 0);
}


size_t CSharpParser::Interpolated_regular_string_partContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_regular_string_part;
}

void CSharpParser::Interpolated_regular_string_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_regular_string_part(this);
}

void CSharpParser::Interpolated_regular_string_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_regular_string_part(this);
}

CSharpParser::Interpolated_regular_string_partContext* CSharpParser::interpolated_regular_string_part() {
  Interpolated_regular_string_partContext *_localctx = _tracker.createInstance<Interpolated_regular_string_partContext>(_ctx, getState());
  enterRule(_localctx, 390, CSharpParser::RuleInterpolated_regular_string_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2395);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(2391);
        interpolated_string_expression();
        break;
      }

      case CSharpParser::DOUBLE_CURLY_INSIDE: {
        enterOuterAlt(_localctx, 2);
        setState(2392);
        match(CSharpParser::DOUBLE_CURLY_INSIDE);
        break;
      }

      case CSharpParser::REGULAR_CHAR_INSIDE: {
        enterOuterAlt(_localctx, 3);
        setState(2393);
        match(CSharpParser::REGULAR_CHAR_INSIDE);
        break;
      }

      case CSharpParser::REGULAR_STRING_INSIDE: {
        enterOuterAlt(_localctx, 4);
        setState(2394);
        match(CSharpParser::REGULAR_STRING_INSIDE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_verbatium_string_partContext ------------------------------------------------------------------

CSharpParser::Interpolated_verbatium_string_partContext::Interpolated_verbatium_string_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Interpolated_string_expressionContext* CSharpParser::Interpolated_verbatium_string_partContext::interpolated_string_expression() {
  return getRuleContext<CSharpParser::Interpolated_string_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_string_partContext::DOUBLE_CURLY_INSIDE() {
  return getToken(CSharpParser::DOUBLE_CURLY_INSIDE, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_string_partContext::VERBATIUM_DOUBLE_QUOTE_INSIDE() {
  return getToken(CSharpParser::VERBATIUM_DOUBLE_QUOTE_INSIDE, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_string_partContext::VERBATIUM_INSIDE_STRING() {
  return getToken(CSharpParser::VERBATIUM_INSIDE_STRING, 0);
}


size_t CSharpParser::Interpolated_verbatium_string_partContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_verbatium_string_part;
}

void CSharpParser::Interpolated_verbatium_string_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_verbatium_string_part(this);
}

void CSharpParser::Interpolated_verbatium_string_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_verbatium_string_part(this);
}

CSharpParser::Interpolated_verbatium_string_partContext* CSharpParser::interpolated_verbatium_string_part() {
  Interpolated_verbatium_string_partContext *_localctx = _tracker.createInstance<Interpolated_verbatium_string_partContext>(_ctx, getState());
  enterRule(_localctx, 392, CSharpParser::RuleInterpolated_verbatium_string_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2401);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(2397);
        interpolated_string_expression();
        break;
      }

      case CSharpParser::DOUBLE_CURLY_INSIDE: {
        enterOuterAlt(_localctx, 2);
        setState(2398);
        match(CSharpParser::DOUBLE_CURLY_INSIDE);
        break;
      }

      case CSharpParser::VERBATIUM_DOUBLE_QUOTE_INSIDE: {
        enterOuterAlt(_localctx, 3);
        setState(2399);
        match(CSharpParser::VERBATIUM_DOUBLE_QUOTE_INSIDE);
        break;
      }

      case CSharpParser::VERBATIUM_INSIDE_STRING: {
        enterOuterAlt(_localctx, 4);
        setState(2400);
        match(CSharpParser::VERBATIUM_INSIDE_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_string_expressionContext ------------------------------------------------------------------

CSharpParser::Interpolated_string_expressionContext::Interpolated_string_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Interpolated_string_expressionContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Interpolated_string_expressionContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Interpolated_string_expressionContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Interpolated_string_expressionContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

tree::TerminalNode* CSharpParser::Interpolated_string_expressionContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Interpolated_string_expressionContext::FORMAT_STRING() {
  return getTokens(CSharpParser::FORMAT_STRING);
}

tree::TerminalNode* CSharpParser::Interpolated_string_expressionContext::FORMAT_STRING(size_t i) {
  return getToken(CSharpParser::FORMAT_STRING, i);
}


size_t CSharpParser::Interpolated_string_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_string_expression;
}

void CSharpParser::Interpolated_string_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_string_expression(this);
}

void CSharpParser::Interpolated_string_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_string_expression(this);
}

CSharpParser::Interpolated_string_expressionContext* CSharpParser::interpolated_string_expression() {
  Interpolated_string_expressionContext *_localctx = _tracker.createInstance<Interpolated_string_expressionContext>(_ctx, getState());
  enterRule(_localctx, 394, CSharpParser::RuleInterpolated_string_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2403);
    expression();
    setState(2408);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(2404);
      match(CSharpParser::COMMA);
      setState(2405);
      expression();
      setState(2410);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2417);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2411);
      match(CSharpParser::COLON);
      setState(2413); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2412);
        match(CSharpParser::FORMAT_STRING);
        setState(2415); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == CSharpParser::FORMAT_STRING);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

CSharpParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::KeywordContext::ABSTRACT() {
  return getToken(CSharpParser::ABSTRACT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::AS() {
  return getToken(CSharpParser::AS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::BASE() {
  return getToken(CSharpParser::BASE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::BOOL() {
  return getToken(CSharpParser::BOOL, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::BREAK() {
  return getToken(CSharpParser::BREAK, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::BYTE() {
  return getToken(CSharpParser::BYTE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CASE() {
  return getToken(CSharpParser::CASE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CATCH() {
  return getToken(CSharpParser::CATCH, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CHAR() {
  return getToken(CSharpParser::CHAR, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CHECKED() {
  return getToken(CSharpParser::CHECKED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CLASS() {
  return getToken(CSharpParser::CLASS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CONST() {
  return getToken(CSharpParser::CONST, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CONTINUE() {
  return getToken(CSharpParser::CONTINUE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DECIMAL() {
  return getToken(CSharpParser::DECIMAL, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DEFAULT() {
  return getToken(CSharpParser::DEFAULT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DELEGATE() {
  return getToken(CSharpParser::DELEGATE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DO() {
  return getToken(CSharpParser::DO, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DOUBLE() {
  return getToken(CSharpParser::DOUBLE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::ELSE() {
  return getToken(CSharpParser::ELSE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::ENUM() {
  return getToken(CSharpParser::ENUM, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::EVENT() {
  return getToken(CSharpParser::EVENT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::EXPLICIT() {
  return getToken(CSharpParser::EXPLICIT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::EXTERN() {
  return getToken(CSharpParser::EXTERN, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FALSE() {
  return getToken(CSharpParser::FALSE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FINALLY() {
  return getToken(CSharpParser::FINALLY, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FIXED() {
  return getToken(CSharpParser::FIXED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FLOAT() {
  return getToken(CSharpParser::FLOAT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FOR() {
  return getToken(CSharpParser::FOR, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FOREACH() {
  return getToken(CSharpParser::FOREACH, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::GOTO() {
  return getToken(CSharpParser::GOTO, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::IF() {
  return getToken(CSharpParser::IF, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::IMPLICIT() {
  return getToken(CSharpParser::IMPLICIT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::INT() {
  return getToken(CSharpParser::INT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::INTERFACE() {
  return getToken(CSharpParser::INTERFACE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::INTERNAL() {
  return getToken(CSharpParser::INTERNAL, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::IS() {
  return getToken(CSharpParser::IS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::LOCK() {
  return getToken(CSharpParser::LOCK, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::LONG() {
  return getToken(CSharpParser::LONG, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::NAMESPACE() {
  return getToken(CSharpParser::NAMESPACE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::NULL() {
  return getToken(CSharpParser::NULL, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::OBJECT() {
  return getToken(CSharpParser::OBJECT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::OPERATOR() {
  return getToken(CSharpParser::OPERATOR, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::OVERRIDE() {
  return getToken(CSharpParser::OVERRIDE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::PARAMS() {
  return getToken(CSharpParser::PARAMS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::PRIVATE() {
  return getToken(CSharpParser::PRIVATE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::PROTECTED() {
  return getToken(CSharpParser::PROTECTED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::PUBLIC() {
  return getToken(CSharpParser::PUBLIC, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::RETURN() {
  return getToken(CSharpParser::RETURN, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SBYTE() {
  return getToken(CSharpParser::SBYTE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SEALED() {
  return getToken(CSharpParser::SEALED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SHORT() {
  return getToken(CSharpParser::SHORT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SIZEOF() {
  return getToken(CSharpParser::SIZEOF, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::STACKALLOC() {
  return getToken(CSharpParser::STACKALLOC, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::STATIC() {
  return getToken(CSharpParser::STATIC, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::STRING() {
  return getToken(CSharpParser::STRING, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::STRUCT() {
  return getToken(CSharpParser::STRUCT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SWITCH() {
  return getToken(CSharpParser::SWITCH, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::THROW() {
  return getToken(CSharpParser::THROW, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::TRUE() {
  return getToken(CSharpParser::TRUE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::TRY() {
  return getToken(CSharpParser::TRY, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::TYPEOF() {
  return getToken(CSharpParser::TYPEOF, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::UINT() {
  return getToken(CSharpParser::UINT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::ULONG() {
  return getToken(CSharpParser::ULONG, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::UNCHECKED() {
  return getToken(CSharpParser::UNCHECKED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::UNMANAGED() {
  return getToken(CSharpParser::UNMANAGED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::USHORT() {
  return getToken(CSharpParser::USHORT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::VIRTUAL() {
  return getToken(CSharpParser::VIRTUAL, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::VOLATILE() {
  return getToken(CSharpParser::VOLATILE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::WHILE() {
  return getToken(CSharpParser::WHILE, 0);
}


size_t CSharpParser::KeywordContext::getRuleIndex() const {
  return CSharpParser::RuleKeyword;
}

void CSharpParser::KeywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyword(this);
}

void CSharpParser::KeywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyword(this);
}

CSharpParser::KeywordContext* CSharpParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 396, CSharpParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2419);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ABSTRACT)
      | (1ULL << CSharpParser::AS)
      | (1ULL << CSharpParser::BASE)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BREAK)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CASE)
      | (1ULL << CSharpParser::CATCH)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CHECKED)
      | (1ULL << CSharpParser::CLASS)
      | (1ULL << CSharpParser::CONST)
      | (1ULL << CSharpParser::CONTINUE)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DEFAULT)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DO)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::ELSE)
      | (1ULL << CSharpParser::ENUM)
      | (1ULL << CSharpParser::EVENT)
      | (1ULL << CSharpParser::EXPLICIT)
      | (1ULL << CSharpParser::EXTERN)
      | (1ULL << CSharpParser::FALSE)
      | (1ULL << CSharpParser::FINALLY)
      | (1ULL << CSharpParser::FIXED)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FOR)
      | (1ULL << CSharpParser::FOREACH)
      | (1ULL << CSharpParser::GOTO)
      | (1ULL << CSharpParser::IF)
      | (1ULL << CSharpParser::IMPLICIT)
      | (1ULL << CSharpParser::IN)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTERFACE)
      | (1ULL << CSharpParser::INTERNAL)
      | (1ULL << CSharpParser::IS)
      | (1ULL << CSharpParser::LOCK)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (CSharpParser::NAMESPACE - 65))
      | (1ULL << (CSharpParser::NEW - 65))
      | (1ULL << (CSharpParser::NULL - 65))
      | (1ULL << (CSharpParser::OBJECT - 65))
      | (1ULL << (CSharpParser::OPERATOR - 65))
      | (1ULL << (CSharpParser::OUT - 65))
      | (1ULL << (CSharpParser::OVERRIDE - 65))
      | (1ULL << (CSharpParser::PARAMS - 65))
      | (1ULL << (CSharpParser::PRIVATE - 65))
      | (1ULL << (CSharpParser::PROTECTED - 65))
      | (1ULL << (CSharpParser::PUBLIC - 65))
      | (1ULL << (CSharpParser::READONLY - 65))
      | (1ULL << (CSharpParser::REF - 65))
      | (1ULL << (CSharpParser::RETURN - 65))
      | (1ULL << (CSharpParser::SBYTE - 65))
      | (1ULL << (CSharpParser::SEALED - 65))
      | (1ULL << (CSharpParser::SHORT - 65))
      | (1ULL << (CSharpParser::SIZEOF - 65))
      | (1ULL << (CSharpParser::STACKALLOC - 65))
      | (1ULL << (CSharpParser::STATIC - 65))
      | (1ULL << (CSharpParser::STRING - 65))
      | (1ULL << (CSharpParser::STRUCT - 65))
      | (1ULL << (CSharpParser::SWITCH - 65))
      | (1ULL << (CSharpParser::THIS - 65))
      | (1ULL << (CSharpParser::THROW - 65))
      | (1ULL << (CSharpParser::TRUE - 65))
      | (1ULL << (CSharpParser::TRY - 65))
      | (1ULL << (CSharpParser::TYPEOF - 65))
      | (1ULL << (CSharpParser::UINT - 65))
      | (1ULL << (CSharpParser::ULONG - 65))
      | (1ULL << (CSharpParser::UNCHECKED - 65))
      | (1ULL << (CSharpParser::UNMANAGED - 65))
      | (1ULL << (CSharpParser::UNSAFE - 65))
      | (1ULL << (CSharpParser::USHORT - 65))
      | (1ULL << (CSharpParser::USING - 65))
      | (1ULL << (CSharpParser::VIRTUAL - 65))
      | (1ULL << (CSharpParser::VOID - 65))
      | (1ULL << (CSharpParser::VOLATILE - 65))
      | (1ULL << (CSharpParser::WHILE - 65)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_definitionContext ------------------------------------------------------------------

CSharpParser::Class_definitionContext::Class_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Class_definitionContext::CLASS() {
  return getToken(CSharpParser::CLASS, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Class_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Class_bodyContext* CSharpParser::Class_definitionContext::class_body() {
  return getRuleContext<CSharpParser::Class_bodyContext>(0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Class_definitionContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Class_baseContext* CSharpParser::Class_definitionContext::class_base() {
  return getRuleContext<CSharpParser::Class_baseContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Class_definitionContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}

tree::TerminalNode* CSharpParser::Class_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Class_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleClass_definition;
}

void CSharpParser::Class_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_definition(this);
}

void CSharpParser::Class_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_definition(this);
}

CSharpParser::Class_definitionContext* CSharpParser::class_definition() {
  Class_definitionContext *_localctx = _tracker.createInstance<Class_definitionContext>(_ctx, getState());
  enterRule(_localctx, 398, CSharpParser::RuleClass_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2421);
    match(CSharpParser::CLASS);
    setState(2422);
    identifier();
    setState(2424);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2423);
      type_parameter_list();
    }
    setState(2427);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2426);
      class_base();
    }
    setState(2430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2429);
      type_parameter_constraints_clauses();
    }
    setState(2432);
    class_body();
    setState(2434);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(2433);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_definitionContext ------------------------------------------------------------------

CSharpParser::Struct_definitionContext::Struct_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Struct_definitionContext::STRUCT() {
  return getToken(CSharpParser::STRUCT, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Struct_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Struct_bodyContext* CSharpParser::Struct_definitionContext::struct_body() {
  return getRuleContext<CSharpParser::Struct_bodyContext>(0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Struct_definitionContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Struct_interfacesContext* CSharpParser::Struct_definitionContext::struct_interfaces() {
  return getRuleContext<CSharpParser::Struct_interfacesContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Struct_definitionContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}

tree::TerminalNode* CSharpParser::Struct_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

tree::TerminalNode* CSharpParser::Struct_definitionContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

tree::TerminalNode* CSharpParser::Struct_definitionContext::REF() {
  return getToken(CSharpParser::REF, 0);
}


size_t CSharpParser::Struct_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleStruct_definition;
}

void CSharpParser::Struct_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_definition(this);
}

void CSharpParser::Struct_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_definition(this);
}

CSharpParser::Struct_definitionContext* CSharpParser::struct_definition() {
  Struct_definitionContext *_localctx = _tracker.createInstance<Struct_definitionContext>(_ctx, getState());
  enterRule(_localctx, 400, CSharpParser::RuleStruct_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::READONLY

    || _la == CSharpParser::REF) {
      setState(2436);
      _la = _input->LA(1);
      if (!(_la == CSharpParser::READONLY

      || _la == CSharpParser::REF)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2439);
    match(CSharpParser::STRUCT);
    setState(2440);
    identifier();
    setState(2442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2441);
      type_parameter_list();
    }
    setState(2445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2444);
      struct_interfaces();
    }
    setState(2448);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2447);
      type_parameter_constraints_clauses();
    }
    setState(2450);
    struct_body();
    setState(2452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(2451);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_definitionContext ------------------------------------------------------------------

CSharpParser::Interface_definitionContext::Interface_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interface_definitionContext::INTERFACE() {
  return getToken(CSharpParser::INTERFACE, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Interface_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Class_bodyContext* CSharpParser::Interface_definitionContext::class_body() {
  return getRuleContext<CSharpParser::Class_bodyContext>(0);
}

CSharpParser::Variant_type_parameter_listContext* CSharpParser::Interface_definitionContext::variant_type_parameter_list() {
  return getRuleContext<CSharpParser::Variant_type_parameter_listContext>(0);
}

CSharpParser::Interface_baseContext* CSharpParser::Interface_definitionContext::interface_base() {
  return getRuleContext<CSharpParser::Interface_baseContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Interface_definitionContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Interface_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_definition;
}

void CSharpParser::Interface_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_definition(this);
}

void CSharpParser::Interface_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_definition(this);
}

CSharpParser::Interface_definitionContext* CSharpParser::interface_definition() {
  Interface_definitionContext *_localctx = _tracker.createInstance<Interface_definitionContext>(_ctx, getState());
  enterRule(_localctx, 402, CSharpParser::RuleInterface_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2454);
    match(CSharpParser::INTERFACE);
    setState(2455);
    identifier();
    setState(2457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2456);
      variant_type_parameter_list();
    }
    setState(2460);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2459);
      interface_base();
    }
    setState(2463);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2462);
      type_parameter_constraints_clauses();
    }
    setState(2465);
    class_body();
    setState(2467);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(2466);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_definitionContext ------------------------------------------------------------------

CSharpParser::Enum_definitionContext::Enum_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Enum_definitionContext::ENUM() {
  return getToken(CSharpParser::ENUM, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Enum_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Enum_bodyContext* CSharpParser::Enum_definitionContext::enum_body() {
  return getRuleContext<CSharpParser::Enum_bodyContext>(0);
}

CSharpParser::Enum_baseContext* CSharpParser::Enum_definitionContext::enum_base() {
  return getRuleContext<CSharpParser::Enum_baseContext>(0);
}

tree::TerminalNode* CSharpParser::Enum_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Enum_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleEnum_definition;
}

void CSharpParser::Enum_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_definition(this);
}

void CSharpParser::Enum_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_definition(this);
}

CSharpParser::Enum_definitionContext* CSharpParser::enum_definition() {
  Enum_definitionContext *_localctx = _tracker.createInstance<Enum_definitionContext>(_ctx, getState());
  enterRule(_localctx, 404, CSharpParser::RuleEnum_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2469);
    match(CSharpParser::ENUM);
    setState(2470);
    identifier();
    setState(2472);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2471);
      enum_base();
    }
    setState(2474);
    enum_body();
    setState(2476);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(2475);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delegate_definitionContext ------------------------------------------------------------------

CSharpParser::Delegate_definitionContext::Delegate_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Delegate_definitionContext::DELEGATE() {
  return getToken(CSharpParser::DELEGATE, 0);
}

CSharpParser::Return_typeContext* CSharpParser::Delegate_definitionContext::return_type() {
  return getRuleContext<CSharpParser::Return_typeContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Delegate_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Delegate_definitionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Delegate_definitionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Delegate_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Variant_type_parameter_listContext* CSharpParser::Delegate_definitionContext::variant_type_parameter_list() {
  return getRuleContext<CSharpParser::Variant_type_parameter_listContext>(0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Delegate_definitionContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Delegate_definitionContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}


size_t CSharpParser::Delegate_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleDelegate_definition;
}

void CSharpParser::Delegate_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelegate_definition(this);
}

void CSharpParser::Delegate_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelegate_definition(this);
}

CSharpParser::Delegate_definitionContext* CSharpParser::delegate_definition() {
  Delegate_definitionContext *_localctx = _tracker.createInstance<Delegate_definitionContext>(_ctx, getState());
  enterRule(_localctx, 406, CSharpParser::RuleDelegate_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2478);
    match(CSharpParser::DELEGATE);
    setState(2479);
    return_type();
    setState(2480);
    identifier();
    setState(2482);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2481);
      variant_type_parameter_list();
    }
    setState(2484);
    match(CSharpParser::OPEN_PARENS);
    setState(2486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
      | (1ULL << (CSharpParser::ALIAS - 10))
      | (1ULL << (CSharpParser::ARGLIST - 10))
      | (1ULL << (CSharpParser::ASCENDING - 10))
      | (1ULL << (CSharpParser::ASYNC - 10))
      | (1ULL << (CSharpParser::AWAIT - 10))
      | (1ULL << (CSharpParser::BOOL - 10))
      | (1ULL << (CSharpParser::BY - 10))
      | (1ULL << (CSharpParser::BYTE - 10))
      | (1ULL << (CSharpParser::CHAR - 10))
      | (1ULL << (CSharpParser::DECIMAL - 10))
      | (1ULL << (CSharpParser::DESCENDING - 10))
      | (1ULL << (CSharpParser::DOUBLE - 10))
      | (1ULL << (CSharpParser::DYNAMIC - 10))
      | (1ULL << (CSharpParser::EQUALS - 10))
      | (1ULL << (CSharpParser::FLOAT - 10))
      | (1ULL << (CSharpParser::FROM - 10))
      | (1ULL << (CSharpParser::GET - 10))
      | (1ULL << (CSharpParser::GROUP - 10))
      | (1ULL << (CSharpParser::IN - 10))
      | (1ULL << (CSharpParser::INT - 10))
      | (1ULL << (CSharpParser::INTO - 10))
      | (1ULL << (CSharpParser::JOIN - 10))
      | (1ULL << (CSharpParser::LET - 10))
      | (1ULL << (CSharpParser::LONG - 10))
      | (1ULL << (CSharpParser::NAMEOF - 10))
      | (1ULL << (CSharpParser::OBJECT - 10))
      | (1ULL << (CSharpParser::ON - 10))
      | (1ULL << (CSharpParser::ORDERBY - 10))
      | (1ULL << (CSharpParser::OUT - 10)))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (CSharpParser::PARAMS - 74))
      | (1ULL << (CSharpParser::PARTIAL - 74))
      | (1ULL << (CSharpParser::REF - 74))
      | (1ULL << (CSharpParser::REMOVE - 74))
      | (1ULL << (CSharpParser::SBYTE - 74))
      | (1ULL << (CSharpParser::SELECT - 74))
      | (1ULL << (CSharpParser::SET - 74))
      | (1ULL << (CSharpParser::SHORT - 74))
      | (1ULL << (CSharpParser::STRING - 74))
      | (1ULL << (CSharpParser::THIS - 74))
      | (1ULL << (CSharpParser::UINT - 74))
      | (1ULL << (CSharpParser::ULONG - 74))
      | (1ULL << (CSharpParser::UNMANAGED - 74))
      | (1ULL << (CSharpParser::USHORT - 74))
      | (1ULL << (CSharpParser::VAR - 74))
      | (1ULL << (CSharpParser::VOID - 74))
      | (1ULL << (CSharpParser::WHEN - 74))
      | (1ULL << (CSharpParser::WHERE - 74))
      | (1ULL << (CSharpParser::YIELD - 74))
      | (1ULL << (CSharpParser::IDENTIFIER - 74))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 74))
      | (1ULL << (CSharpParser::OPEN_PARENS - 74)))) != 0)) {
      setState(2485);
      formal_parameter_list();
    }
    setState(2488);
    match(CSharpParser::CLOSE_PARENS);
    setState(2490);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2489);
      type_parameter_constraints_clauses();
    }
    setState(2492);
    match(CSharpParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Event_declarationContext ------------------------------------------------------------------

CSharpParser::Event_declarationContext::Event_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Event_declarationContext::EVENT() {
  return getToken(CSharpParser::EVENT, 0);
}

CSharpParser::Type_Context* CSharpParser::Event_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Variable_declaratorsContext* CSharpParser::Event_declarationContext::variable_declarators() {
  return getRuleContext<CSharpParser::Variable_declaratorsContext>(0);
}

tree::TerminalNode* CSharpParser::Event_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Member_nameContext* CSharpParser::Event_declarationContext::member_name() {
  return getRuleContext<CSharpParser::Member_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Event_declarationContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Event_accessor_declarationsContext* CSharpParser::Event_declarationContext::event_accessor_declarations() {
  return getRuleContext<CSharpParser::Event_accessor_declarationsContext>(0);
}

tree::TerminalNode* CSharpParser::Event_declarationContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}


size_t CSharpParser::Event_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleEvent_declaration;
}

void CSharpParser::Event_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvent_declaration(this);
}

void CSharpParser::Event_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvent_declaration(this);
}

CSharpParser::Event_declarationContext* CSharpParser::event_declaration() {
  Event_declarationContext *_localctx = _tracker.createInstance<Event_declarationContext>(_ctx, getState());
  enterRule(_localctx, 408, CSharpParser::RuleEvent_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2494);
    match(CSharpParser::EVENT);
    setState(2495);
    type_();
    setState(2504);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
    case 1: {
      setState(2496);
      variable_declarators();
      setState(2497);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 2: {
      setState(2499);
      member_name();
      setState(2500);
      match(CSharpParser::OPEN_BRACE);
      setState(2501);
      event_accessor_declarations();
      setState(2502);
      match(CSharpParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Field_declarationContext ------------------------------------------------------------------

CSharpParser::Field_declarationContext::Field_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Variable_declaratorsContext* CSharpParser::Field_declarationContext::variable_declarators() {
  return getRuleContext<CSharpParser::Variable_declaratorsContext>(0);
}

tree::TerminalNode* CSharpParser::Field_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Field_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleField_declaration;
}

void CSharpParser::Field_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterField_declaration(this);
}

void CSharpParser::Field_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitField_declaration(this);
}

CSharpParser::Field_declarationContext* CSharpParser::field_declaration() {
  Field_declarationContext *_localctx = _tracker.createInstance<Field_declarationContext>(_ctx, getState());
  enterRule(_localctx, 410, CSharpParser::RuleField_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2506);
    variable_declarators();
    setState(2507);
    match(CSharpParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_declarationContext ------------------------------------------------------------------

CSharpParser::Property_declarationContext::Property_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Member_nameContext* CSharpParser::Property_declarationContext::member_name() {
  return getRuleContext<CSharpParser::Member_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Property_declarationContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Accessor_declarationsContext* CSharpParser::Property_declarationContext::accessor_declarations() {
  return getRuleContext<CSharpParser::Accessor_declarationsContext>(0);
}

tree::TerminalNode* CSharpParser::Property_declarationContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Right_arrowContext* CSharpParser::Property_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Property_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Property_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

tree::TerminalNode* CSharpParser::Property_declarationContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Variable_initializerContext* CSharpParser::Property_declarationContext::variable_initializer() {
  return getRuleContext<CSharpParser::Variable_initializerContext>(0);
}


size_t CSharpParser::Property_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleProperty_declaration;
}

void CSharpParser::Property_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProperty_declaration(this);
}

void CSharpParser::Property_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProperty_declaration(this);
}

CSharpParser::Property_declarationContext* CSharpParser::property_declaration() {
  Property_declarationContext *_localctx = _tracker.createInstance<Property_declarationContext>(_ctx, getState());
  enterRule(_localctx, 412, CSharpParser::RuleProperty_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2509);
    member_name();
    setState(2523);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        setState(2510);
        match(CSharpParser::OPEN_BRACE);
        setState(2511);
        accessor_declarations();
        setState(2512);
        match(CSharpParser::CLOSE_BRACE);
        setState(2517);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::ASSIGNMENT) {
          setState(2513);
          match(CSharpParser::ASSIGNMENT);
          setState(2514);
          variable_initializer();
          setState(2515);
          match(CSharpParser::SEMICOLON);
        }
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        setState(2519);
        right_arrow();
        setState(2520);
        throwable_expression();
        setState(2521);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_declarationContext ------------------------------------------------------------------

CSharpParser::Constant_declarationContext::Constant_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Constant_declarationContext::CONST() {
  return getToken(CSharpParser::CONST, 0);
}

CSharpParser::Type_Context* CSharpParser::Constant_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Constant_declaratorsContext* CSharpParser::Constant_declarationContext::constant_declarators() {
  return getRuleContext<CSharpParser::Constant_declaratorsContext>(0);
}

tree::TerminalNode* CSharpParser::Constant_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Constant_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleConstant_declaration;
}

void CSharpParser::Constant_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant_declaration(this);
}

void CSharpParser::Constant_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant_declaration(this);
}

CSharpParser::Constant_declarationContext* CSharpParser::constant_declaration() {
  Constant_declarationContext *_localctx = _tracker.createInstance<Constant_declarationContext>(_ctx, getState());
  enterRule(_localctx, 414, CSharpParser::RuleConstant_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2525);
    match(CSharpParser::CONST);
    setState(2526);
    type_();
    setState(2527);
    constant_declarators();
    setState(2528);
    match(CSharpParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Indexer_declarationContext ------------------------------------------------------------------

CSharpParser::Indexer_declarationContext::Indexer_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Indexer_declarationContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Accessor_declarationsContext* CSharpParser::Indexer_declarationContext::accessor_declarations() {
  return getRuleContext<CSharpParser::Accessor_declarationsContext>(0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Right_arrowContext* CSharpParser::Indexer_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Indexer_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Indexer_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleIndexer_declaration;
}

void CSharpParser::Indexer_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexer_declaration(this);
}

void CSharpParser::Indexer_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexer_declaration(this);
}

CSharpParser::Indexer_declarationContext* CSharpParser::indexer_declaration() {
  Indexer_declarationContext *_localctx = _tracker.createInstance<Indexer_declarationContext>(_ctx, getState());
  enterRule(_localctx, 416, CSharpParser::RuleIndexer_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2530);
    match(CSharpParser::THIS);
    setState(2531);
    match(CSharpParser::OPEN_BRACKET);
    setState(2532);
    formal_parameter_list();
    setState(2533);
    match(CSharpParser::CLOSE_BRACKET);
    setState(2542);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        setState(2534);
        match(CSharpParser::OPEN_BRACE);
        setState(2535);
        accessor_declarations();
        setState(2536);
        match(CSharpParser::CLOSE_BRACE);
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        setState(2538);
        right_arrow();
        setState(2539);
        throwable_expression();
        setState(2540);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Destructor_definitionContext ------------------------------------------------------------------

CSharpParser::Destructor_definitionContext::Destructor_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Destructor_definitionContext::TILDE() {
  return getToken(CSharpParser::TILDE, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Destructor_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Destructor_definitionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Destructor_definitionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::BodyContext* CSharpParser::Destructor_definitionContext::body() {
  return getRuleContext<CSharpParser::BodyContext>(0);
}


size_t CSharpParser::Destructor_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleDestructor_definition;
}

void CSharpParser::Destructor_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDestructor_definition(this);
}

void CSharpParser::Destructor_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDestructor_definition(this);
}

CSharpParser::Destructor_definitionContext* CSharpParser::destructor_definition() {
  Destructor_definitionContext *_localctx = _tracker.createInstance<Destructor_definitionContext>(_ctx, getState());
  enterRule(_localctx, 418, CSharpParser::RuleDestructor_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2544);
    match(CSharpParser::TILDE);
    setState(2545);
    identifier();
    setState(2546);
    match(CSharpParser::OPEN_PARENS);
    setState(2547);
    match(CSharpParser::CLOSE_PARENS);
    setState(2548);
    body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constructor_declarationContext ------------------------------------------------------------------

CSharpParser::Constructor_declarationContext::Constructor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Constructor_declarationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Constructor_declarationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Constructor_declarationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::BodyContext* CSharpParser::Constructor_declarationContext::body() {
  return getRuleContext<CSharpParser::BodyContext>(0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Constructor_declarationContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

CSharpParser::Constructor_initializerContext* CSharpParser::Constructor_declarationContext::constructor_initializer() {
  return getRuleContext<CSharpParser::Constructor_initializerContext>(0);
}


size_t CSharpParser::Constructor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleConstructor_declaration;
}

void CSharpParser::Constructor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructor_declaration(this);
}

void CSharpParser::Constructor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructor_declaration(this);
}

CSharpParser::Constructor_declarationContext* CSharpParser::constructor_declaration() {
  Constructor_declarationContext *_localctx = _tracker.createInstance<Constructor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 420, CSharpParser::RuleConstructor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2550);
    identifier();
    setState(2551);
    match(CSharpParser::OPEN_PARENS);
    setState(2553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
      | (1ULL << (CSharpParser::ALIAS - 10))
      | (1ULL << (CSharpParser::ARGLIST - 10))
      | (1ULL << (CSharpParser::ASCENDING - 10))
      | (1ULL << (CSharpParser::ASYNC - 10))
      | (1ULL << (CSharpParser::AWAIT - 10))
      | (1ULL << (CSharpParser::BOOL - 10))
      | (1ULL << (CSharpParser::BY - 10))
      | (1ULL << (CSharpParser::BYTE - 10))
      | (1ULL << (CSharpParser::CHAR - 10))
      | (1ULL << (CSharpParser::DECIMAL - 10))
      | (1ULL << (CSharpParser::DESCENDING - 10))
      | (1ULL << (CSharpParser::DOUBLE - 10))
      | (1ULL << (CSharpParser::DYNAMIC - 10))
      | (1ULL << (CSharpParser::EQUALS - 10))
      | (1ULL << (CSharpParser::FLOAT - 10))
      | (1ULL << (CSharpParser::FROM - 10))
      | (1ULL << (CSharpParser::GET - 10))
      | (1ULL << (CSharpParser::GROUP - 10))
      | (1ULL << (CSharpParser::IN - 10))
      | (1ULL << (CSharpParser::INT - 10))
      | (1ULL << (CSharpParser::INTO - 10))
      | (1ULL << (CSharpParser::JOIN - 10))
      | (1ULL << (CSharpParser::LET - 10))
      | (1ULL << (CSharpParser::LONG - 10))
      | (1ULL << (CSharpParser::NAMEOF - 10))
      | (1ULL << (CSharpParser::OBJECT - 10))
      | (1ULL << (CSharpParser::ON - 10))
      | (1ULL << (CSharpParser::ORDERBY - 10))
      | (1ULL << (CSharpParser::OUT - 10)))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (CSharpParser::PARAMS - 74))
      | (1ULL << (CSharpParser::PARTIAL - 74))
      | (1ULL << (CSharpParser::REF - 74))
      | (1ULL << (CSharpParser::REMOVE - 74))
      | (1ULL << (CSharpParser::SBYTE - 74))
      | (1ULL << (CSharpParser::SELECT - 74))
      | (1ULL << (CSharpParser::SET - 74))
      | (1ULL << (CSharpParser::SHORT - 74))
      | (1ULL << (CSharpParser::STRING - 74))
      | (1ULL << (CSharpParser::THIS - 74))
      | (1ULL << (CSharpParser::UINT - 74))
      | (1ULL << (CSharpParser::ULONG - 74))
      | (1ULL << (CSharpParser::UNMANAGED - 74))
      | (1ULL << (CSharpParser::USHORT - 74))
      | (1ULL << (CSharpParser::VAR - 74))
      | (1ULL << (CSharpParser::VOID - 74))
      | (1ULL << (CSharpParser::WHEN - 74))
      | (1ULL << (CSharpParser::WHERE - 74))
      | (1ULL << (CSharpParser::YIELD - 74))
      | (1ULL << (CSharpParser::IDENTIFIER - 74))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 74))
      | (1ULL << (CSharpParser::OPEN_PARENS - 74)))) != 0)) {
      setState(2552);
      formal_parameter_list();
    }
    setState(2555);
    match(CSharpParser::CLOSE_PARENS);
    setState(2557);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2556);
      constructor_initializer();
    }
    setState(2559);
    body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_declarationContext ------------------------------------------------------------------

CSharpParser::Method_declarationContext::Method_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Method_member_nameContext* CSharpParser::Method_declarationContext::method_member_name() {
  return getRuleContext<CSharpParser::Method_member_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Method_declarationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Method_declarationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Method_bodyContext* CSharpParser::Method_declarationContext::method_body() {
  return getRuleContext<CSharpParser::Method_bodyContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Method_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Method_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Method_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Method_declarationContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Method_declarationContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Method_declarationContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}


size_t CSharpParser::Method_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleMethod_declaration;
}

void CSharpParser::Method_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_declaration(this);
}

void CSharpParser::Method_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_declaration(this);
}

CSharpParser::Method_declarationContext* CSharpParser::method_declaration() {
  Method_declarationContext *_localctx = _tracker.createInstance<Method_declarationContext>(_ctx, getState());
  enterRule(_localctx, 422, CSharpParser::RuleMethod_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2561);
    method_member_name();
    setState(2563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2562);
      type_parameter_list();
    }
    setState(2565);
    match(CSharpParser::OPEN_PARENS);
    setState(2567);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & ((1ULL << (CSharpParser::ADD - 10))
      | (1ULL << (CSharpParser::ALIAS - 10))
      | (1ULL << (CSharpParser::ARGLIST - 10))
      | (1ULL << (CSharpParser::ASCENDING - 10))
      | (1ULL << (CSharpParser::ASYNC - 10))
      | (1ULL << (CSharpParser::AWAIT - 10))
      | (1ULL << (CSharpParser::BOOL - 10))
      | (1ULL << (CSharpParser::BY - 10))
      | (1ULL << (CSharpParser::BYTE - 10))
      | (1ULL << (CSharpParser::CHAR - 10))
      | (1ULL << (CSharpParser::DECIMAL - 10))
      | (1ULL << (CSharpParser::DESCENDING - 10))
      | (1ULL << (CSharpParser::DOUBLE - 10))
      | (1ULL << (CSharpParser::DYNAMIC - 10))
      | (1ULL << (CSharpParser::EQUALS - 10))
      | (1ULL << (CSharpParser::FLOAT - 10))
      | (1ULL << (CSharpParser::FROM - 10))
      | (1ULL << (CSharpParser::GET - 10))
      | (1ULL << (CSharpParser::GROUP - 10))
      | (1ULL << (CSharpParser::IN - 10))
      | (1ULL << (CSharpParser::INT - 10))
      | (1ULL << (CSharpParser::INTO - 10))
      | (1ULL << (CSharpParser::JOIN - 10))
      | (1ULL << (CSharpParser::LET - 10))
      | (1ULL << (CSharpParser::LONG - 10))
      | (1ULL << (CSharpParser::NAMEOF - 10))
      | (1ULL << (CSharpParser::OBJECT - 10))
      | (1ULL << (CSharpParser::ON - 10))
      | (1ULL << (CSharpParser::ORDERBY - 10))
      | (1ULL << (CSharpParser::OUT - 10)))) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & ((1ULL << (CSharpParser::PARAMS - 74))
      | (1ULL << (CSharpParser::PARTIAL - 74))
      | (1ULL << (CSharpParser::REF - 74))
      | (1ULL << (CSharpParser::REMOVE - 74))
      | (1ULL << (CSharpParser::SBYTE - 74))
      | (1ULL << (CSharpParser::SELECT - 74))
      | (1ULL << (CSharpParser::SET - 74))
      | (1ULL << (CSharpParser::SHORT - 74))
      | (1ULL << (CSharpParser::STRING - 74))
      | (1ULL << (CSharpParser::THIS - 74))
      | (1ULL << (CSharpParser::UINT - 74))
      | (1ULL << (CSharpParser::ULONG - 74))
      | (1ULL << (CSharpParser::UNMANAGED - 74))
      | (1ULL << (CSharpParser::USHORT - 74))
      | (1ULL << (CSharpParser::VAR - 74))
      | (1ULL << (CSharpParser::VOID - 74))
      | (1ULL << (CSharpParser::WHEN - 74))
      | (1ULL << (CSharpParser::WHERE - 74))
      | (1ULL << (CSharpParser::YIELD - 74))
      | (1ULL << (CSharpParser::IDENTIFIER - 74))
      | (1ULL << (CSharpParser::OPEN_BRACKET - 74))
      | (1ULL << (CSharpParser::OPEN_PARENS - 74)))) != 0)) {
      setState(2566);
      formal_parameter_list();
    }
    setState(2569);
    match(CSharpParser::CLOSE_PARENS);
    setState(2571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2570);
      type_parameter_constraints_clauses();
    }
    setState(2578);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE:
      case CSharpParser::SEMICOLON: {
        setState(2573);
        method_body();
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        setState(2574);
        right_arrow();
        setState(2575);
        throwable_expression();
        setState(2576);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_member_nameContext ------------------------------------------------------------------

CSharpParser::Method_member_nameContext::Method_member_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Method_member_nameContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Method_member_nameContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::Method_member_nameContext::DOUBLE_COLON() {
  return getToken(CSharpParser::DOUBLE_COLON, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Method_member_nameContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::Method_member_nameContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}

std::vector<CSharpParser::Type_argument_listContext *> CSharpParser::Method_member_nameContext::type_argument_list() {
  return getRuleContexts<CSharpParser::Type_argument_listContext>();
}

CSharpParser::Type_argument_listContext* CSharpParser::Method_member_nameContext::type_argument_list(size_t i) {
  return getRuleContext<CSharpParser::Type_argument_listContext>(i);
}


size_t CSharpParser::Method_member_nameContext::getRuleIndex() const {
  return CSharpParser::RuleMethod_member_name;
}

void CSharpParser::Method_member_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_member_name(this);
}

void CSharpParser::Method_member_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_member_name(this);
}

CSharpParser::Method_member_nameContext* CSharpParser::method_member_name() {
  Method_member_nameContext *_localctx = _tracker.createInstance<Method_member_nameContext>(_ctx, getState());
  enterRule(_localctx, 424, CSharpParser::RuleMethod_member_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2585);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      setState(2580);
      identifier();
      break;
    }

    case 2: {
      setState(2581);
      identifier();
      setState(2582);
      match(CSharpParser::DOUBLE_COLON);
      setState(2583);
      identifier();
      break;
    }

    default:
      break;
    }
    setState(2594);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2588);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::LT) {
          setState(2587);
          type_argument_list();
        }
        setState(2590);
        match(CSharpParser::DOT);
        setState(2591);
        identifier(); 
      }
      setState(2596);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Operator_declarationContext ------------------------------------------------------------------

CSharpParser::Operator_declarationContext::Operator_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::OPERATOR() {
  return getToken(CSharpParser::OPERATOR, 0);
}

CSharpParser::Overloadable_operatorContext* CSharpParser::Operator_declarationContext::overloadable_operator() {
  return getRuleContext<CSharpParser::Overloadable_operatorContext>(0);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<CSharpParser::Arg_declarationContext *> CSharpParser::Operator_declarationContext::arg_declaration() {
  return getRuleContexts<CSharpParser::Arg_declarationContext>();
}

CSharpParser::Arg_declarationContext* CSharpParser::Operator_declarationContext::arg_declaration(size_t i) {
  return getRuleContext<CSharpParser::Arg_declarationContext>(i);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::BodyContext* CSharpParser::Operator_declarationContext::body() {
  return getRuleContext<CSharpParser::BodyContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Operator_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Operator_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Operator_declarationContext::IN() {
  return getTokens(CSharpParser::IN);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::IN(size_t i) {
  return getToken(CSharpParser::IN, i);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Operator_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleOperator_declaration;
}

void CSharpParser::Operator_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperator_declaration(this);
}

void CSharpParser::Operator_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperator_declaration(this);
}

CSharpParser::Operator_declarationContext* CSharpParser::operator_declaration() {
  Operator_declarationContext *_localctx = _tracker.createInstance<Operator_declarationContext>(_ctx, getState());
  enterRule(_localctx, 426, CSharpParser::RuleOperator_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2597);
    match(CSharpParser::OPERATOR);
    setState(2598);
    overloadable_operator();
    setState(2599);
    match(CSharpParser::OPEN_PARENS);
    setState(2601);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::IN) {
      setState(2600);
      match(CSharpParser::IN);
    }
    setState(2603);
    arg_declaration();
    setState(2609);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COMMA) {
      setState(2604);
      match(CSharpParser::COMMA);
      setState(2606);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::IN) {
        setState(2605);
        match(CSharpParser::IN);
      }
      setState(2608);
      arg_declaration();
    }
    setState(2611);
    match(CSharpParser::CLOSE_PARENS);
    setState(2617);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE:
      case CSharpParser::SEMICOLON: {
        setState(2612);
        body();
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        setState(2613);
        right_arrow();
        setState(2614);
        throwable_expression();
        setState(2615);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arg_declarationContext ------------------------------------------------------------------

CSharpParser::Arg_declarationContext::Arg_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Arg_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Arg_declarationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Arg_declarationContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Arg_declarationContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Arg_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleArg_declaration;
}

void CSharpParser::Arg_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArg_declaration(this);
}

void CSharpParser::Arg_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArg_declaration(this);
}

CSharpParser::Arg_declarationContext* CSharpParser::arg_declaration() {
  Arg_declarationContext *_localctx = _tracker.createInstance<Arg_declarationContext>(_ctx, getState());
  enterRule(_localctx, 428, CSharpParser::RuleArg_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2619);
    type_();
    setState(2620);
    identifier();
    setState(2623);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::ASSIGNMENT) {
      setState(2621);
      match(CSharpParser::ASSIGNMENT);
      setState(2622);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_invocationContext ------------------------------------------------------------------

CSharpParser::Method_invocationContext::Method_invocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Method_invocationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Method_invocationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Argument_listContext* CSharpParser::Method_invocationContext::argument_list() {
  return getRuleContext<CSharpParser::Argument_listContext>(0);
}


size_t CSharpParser::Method_invocationContext::getRuleIndex() const {
  return CSharpParser::RuleMethod_invocation;
}

void CSharpParser::Method_invocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_invocation(this);
}

void CSharpParser::Method_invocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_invocation(this);
}

CSharpParser::Method_invocationContext* CSharpParser::method_invocation() {
  Method_invocationContext *_localctx = _tracker.createInstance<Method_invocationContext>(_ctx, getState());
  enterRule(_localctx, 430, CSharpParser::RuleMethod_invocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2625);
    match(CSharpParser::OPEN_PARENS);
    setState(2627);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BASE)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CHECKED)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DEFAULT)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FALSE)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::IN)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::NEW - 64))
      | (1ULL << (CSharpParser::NULL - 64))
      | (1ULL << (CSharpParser::OBJECT - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::OUT - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REF - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SBYTE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::SHORT - 64))
      | (1ULL << (CSharpParser::SIZEOF - 64))
      | (1ULL << (CSharpParser::STRING - 64))
      | (1ULL << (CSharpParser::THIS - 64))
      | (1ULL << (CSharpParser::TRUE - 64))
      | (1ULL << (CSharpParser::TYPEOF - 64))
      | (1ULL << (CSharpParser::UINT - 64))
      | (1ULL << (CSharpParser::ULONG - 64))
      | (1ULL << (CSharpParser::UNCHECKED - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::USHORT - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::VOID - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
      | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::REAL_LITERAL - 64))
      | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
      | (1ULL << (CSharpParser::REGULAR_STRING - 64))
      | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
      | (1ULL << (CSharpParser::PLUS - 129))
      | (1ULL << (CSharpParser::MINUS - 129))
      | (1ULL << (CSharpParser::STAR - 129))
      | (1ULL << (CSharpParser::AMP - 129))
      | (1ULL << (CSharpParser::CARET - 129))
      | (1ULL << (CSharpParser::BANG - 129))
      | (1ULL << (CSharpParser::TILDE - 129))
      | (1ULL << (CSharpParser::OP_INC - 129))
      | (1ULL << (CSharpParser::OP_DEC - 129))
      | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
      setState(2626);
      argument_list();
    }
    setState(2629);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_creation_expressionContext ------------------------------------------------------------------

CSharpParser::Object_creation_expressionContext::Object_creation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Object_creation_expressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Object_creation_expressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Argument_listContext* CSharpParser::Object_creation_expressionContext::argument_list() {
  return getRuleContext<CSharpParser::Argument_listContext>(0);
}

CSharpParser::Object_or_collection_initializerContext* CSharpParser::Object_creation_expressionContext::object_or_collection_initializer() {
  return getRuleContext<CSharpParser::Object_or_collection_initializerContext>(0);
}


size_t CSharpParser::Object_creation_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleObject_creation_expression;
}

void CSharpParser::Object_creation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_creation_expression(this);
}

void CSharpParser::Object_creation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_creation_expression(this);
}

CSharpParser::Object_creation_expressionContext* CSharpParser::object_creation_expression() {
  Object_creation_expressionContext *_localctx = _tracker.createInstance<Object_creation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 432, CSharpParser::RuleObject_creation_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2631);
    match(CSharpParser::OPEN_PARENS);
    setState(2633);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BASE)
      | (1ULL << CSharpParser::BOOL)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::BYTE)
      | (1ULL << CSharpParser::CHAR)
      | (1ULL << CSharpParser::CHECKED)
      | (1ULL << CSharpParser::DECIMAL)
      | (1ULL << CSharpParser::DEFAULT)
      | (1ULL << CSharpParser::DELEGATE)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DOUBLE)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FALSE)
      | (1ULL << CSharpParser::FLOAT)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::IN)
      | (1ULL << CSharpParser::INT)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET)
      | (1ULL << CSharpParser::LONG))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::NEW - 64))
      | (1ULL << (CSharpParser::NULL - 64))
      | (1ULL << (CSharpParser::OBJECT - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::OUT - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REF - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SBYTE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::SHORT - 64))
      | (1ULL << (CSharpParser::SIZEOF - 64))
      | (1ULL << (CSharpParser::STRING - 64))
      | (1ULL << (CSharpParser::THIS - 64))
      | (1ULL << (CSharpParser::TRUE - 64))
      | (1ULL << (CSharpParser::TYPEOF - 64))
      | (1ULL << (CSharpParser::UINT - 64))
      | (1ULL << (CSharpParser::ULONG - 64))
      | (1ULL << (CSharpParser::UNCHECKED - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::USHORT - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::VOID - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64))
      | (1ULL << (CSharpParser::LITERAL_ACCESS - 64))
      | (1ULL << (CSharpParser::INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::HEX_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::BIN_INTEGER_LITERAL - 64))
      | (1ULL << (CSharpParser::REAL_LITERAL - 64))
      | (1ULL << (CSharpParser::CHARACTER_LITERAL - 64))
      | (1ULL << (CSharpParser::REGULAR_STRING - 64))
      | (1ULL << (CSharpParser::VERBATIUM_STRING - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_REGULAR_STRING_START - 64))
      | (1ULL << (CSharpParser::INTERPOLATED_VERBATIUM_STRING_START - 64)))) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & ((1ULL << (CSharpParser::OPEN_PARENS - 129))
      | (1ULL << (CSharpParser::PLUS - 129))
      | (1ULL << (CSharpParser::MINUS - 129))
      | (1ULL << (CSharpParser::STAR - 129))
      | (1ULL << (CSharpParser::AMP - 129))
      | (1ULL << (CSharpParser::CARET - 129))
      | (1ULL << (CSharpParser::BANG - 129))
      | (1ULL << (CSharpParser::TILDE - 129))
      | (1ULL << (CSharpParser::OP_INC - 129))
      | (1ULL << (CSharpParser::OP_DEC - 129))
      | (1ULL << (CSharpParser::OP_RANGE - 129)))) != 0)) {
      setState(2632);
      argument_list();
    }
    setState(2635);
    match(CSharpParser::CLOSE_PARENS);
    setState(2637);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACE) {
      setState(2636);
      object_or_collection_initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

CSharpParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::IdentifierContext::IDENTIFIER() {
  return getToken(CSharpParser::IDENTIFIER, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ADD() {
  return getToken(CSharpParser::ADD, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ALIAS() {
  return getToken(CSharpParser::ALIAS, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ARGLIST() {
  return getToken(CSharpParser::ARGLIST, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ASCENDING() {
  return getToken(CSharpParser::ASCENDING, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::AWAIT() {
  return getToken(CSharpParser::AWAIT, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::BY() {
  return getToken(CSharpParser::BY, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::DESCENDING() {
  return getToken(CSharpParser::DESCENDING, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::DYNAMIC() {
  return getToken(CSharpParser::DYNAMIC, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::EQUALS() {
  return getToken(CSharpParser::EQUALS, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::FROM() {
  return getToken(CSharpParser::FROM, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::GET() {
  return getToken(CSharpParser::GET, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::GROUP() {
  return getToken(CSharpParser::GROUP, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::INTO() {
  return getToken(CSharpParser::INTO, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::JOIN() {
  return getToken(CSharpParser::JOIN, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::LET() {
  return getToken(CSharpParser::LET, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::NAMEOF() {
  return getToken(CSharpParser::NAMEOF, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ON() {
  return getToken(CSharpParser::ON, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ORDERBY() {
  return getToken(CSharpParser::ORDERBY, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::PARTIAL() {
  return getToken(CSharpParser::PARTIAL, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::REMOVE() {
  return getToken(CSharpParser::REMOVE, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::SELECT() {
  return getToken(CSharpParser::SELECT, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::SET() {
  return getToken(CSharpParser::SET, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::UNMANAGED() {
  return getToken(CSharpParser::UNMANAGED, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::VAR() {
  return getToken(CSharpParser::VAR, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::WHEN() {
  return getToken(CSharpParser::WHEN, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::WHERE() {
  return getToken(CSharpParser::WHERE, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::YIELD() {
  return getToken(CSharpParser::YIELD, 0);
}


size_t CSharpParser::IdentifierContext::getRuleIndex() const {
  return CSharpParser::RuleIdentifier;
}

void CSharpParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void CSharpParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

CSharpParser::IdentifierContext* CSharpParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 434, CSharpParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2639);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << CSharpParser::ADD)
      | (1ULL << CSharpParser::ALIAS)
      | (1ULL << CSharpParser::ARGLIST)
      | (1ULL << CSharpParser::ASCENDING)
      | (1ULL << CSharpParser::ASYNC)
      | (1ULL << CSharpParser::AWAIT)
      | (1ULL << CSharpParser::BY)
      | (1ULL << CSharpParser::DESCENDING)
      | (1ULL << CSharpParser::DYNAMIC)
      | (1ULL << CSharpParser::EQUALS)
      | (1ULL << CSharpParser::FROM)
      | (1ULL << CSharpParser::GET)
      | (1ULL << CSharpParser::GROUP)
      | (1ULL << CSharpParser::INTO)
      | (1ULL << CSharpParser::JOIN)
      | (1ULL << CSharpParser::LET))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (CSharpParser::NAMEOF - 64))
      | (1ULL << (CSharpParser::ON - 64))
      | (1ULL << (CSharpParser::ORDERBY - 64))
      | (1ULL << (CSharpParser::PARTIAL - 64))
      | (1ULL << (CSharpParser::REMOVE - 64))
      | (1ULL << (CSharpParser::SELECT - 64))
      | (1ULL << (CSharpParser::SET - 64))
      | (1ULL << (CSharpParser::UNMANAGED - 64))
      | (1ULL << (CSharpParser::VAR - 64))
      | (1ULL << (CSharpParser::WHEN - 64))
      | (1ULL << (CSharpParser::WHERE - 64))
      | (1ULL << (CSharpParser::YIELD - 64))
      | (1ULL << (CSharpParser::IDENTIFIER - 64)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CSharpParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 187: return right_arrowSempred(dynamic_cast<Right_arrowContext *>(context), predicateIndex);
    case 188: return right_shiftSempred(dynamic_cast<Right_shiftContext *>(context), predicateIndex);
    case 189: return right_shift_assignmentSempred(dynamic_cast<Right_shift_assignmentContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CSharpParser::right_arrowSempred(Right_arrowContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return (dynamic_cast<Right_arrowContext *>(_localctx)->first != nullptr ? dynamic_cast<Right_arrowContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (dynamic_cast<Right_arrowContext *>(_localctx)->second != nullptr ? dynamic_cast<Right_arrowContext *>(_localctx)->second->getTokenIndex() : 0);

  default:
    break;
  }
  return true;
}

bool CSharpParser::right_shiftSempred(Right_shiftContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return (dynamic_cast<Right_shiftContext *>(_localctx)->first != nullptr ? dynamic_cast<Right_shiftContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (dynamic_cast<Right_shiftContext *>(_localctx)->second != nullptr ? dynamic_cast<Right_shiftContext *>(_localctx)->second->getTokenIndex() : 0);

  default:
    break;
  }
  return true;
}

bool CSharpParser::right_shift_assignmentSempred(Right_shift_assignmentContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return (dynamic_cast<Right_shift_assignmentContext *>(_localctx)->first != nullptr ? dynamic_cast<Right_shift_assignmentContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (dynamic_cast<Right_shift_assignmentContext *>(_localctx)->second != nullptr ? dynamic_cast<Right_shift_assignmentContext *>(_localctx)->second->getTokenIndex() : 0);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> CSharpParser::_decisionToDFA;
atn::PredictionContextCache CSharpParser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN CSharpParser::_atn;
std::vector<uint16_t> CSharpParser::_serializedATN;

std::vector<std::string> CSharpParser::_ruleNames = {
  "compilation_unit", "namespace_or_type_name", "type_", "base_type", "tuple_type", 
  "tuple_element", "simple_type", "numeric_type", "integral_type", "floating_point_type", 
  "class_type", "type_argument_list", "argument_list", "argument", "expression", 
  "non_assignment_expression", "assignment", "assignment_operator", "conditional_expression", 
  "null_coalescing_expression", "conditional_or_expression", "conditional_and_expression", 
  "inclusive_or_expression", "exclusive_or_expression", "and_expression", 
  "equality_expression", "relational_expression", "shift_expression", "additive_expression", 
  "multiplicative_expression", "switch_expression", "switch_expression_arms", 
  "switch_expression_arm", "range_expression", "unary_expression", "primary_expression", 
  "primary_expression_start", "throwable_expression", "throw_expression", 
  "member_access", "bracket_expression", "indexer_argument", "predefined_type", 
  "expression_list", "object_or_collection_initializer", "object_initializer", 
  "member_initializer_list", "member_initializer", "initializer_value", 
  "collection_initializer", "element_initializer", "anonymous_object_initializer", 
  "member_declarator_list", "member_declarator", "unbound_type_name", "generic_dimension_specifier", 
  "isType", "isTypePatternArms", "isTypePatternArm", "lambda_expression", 
  "anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
  "explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
  "anonymous_function_body", "query_expression", "from_clause", "query_body", 
  "query_body_clause", "let_clause", "where_clause", "combined_join_clause", 
  "orderby_clause", "ordering", "select_or_group_clause", "query_continuation", 
  "statement", "declarationStatement", "local_function_declaration", "local_function_header", 
  "local_function_modifiers", "local_function_body", "labeled_Statement", 
  "embedded_statement", "simple_embedded_statement", "block", "local_variable_declaration", 
  "local_variable_type", "local_variable_declarator", "local_variable_initializer", 
  "local_constant_declaration", "if_body", "switch_section", "switch_label", 
  "case_guard", "statement_list", "for_initializer", "for_iterator", "catch_clauses", 
  "specific_catch_clause", "general_catch_clause", "exception_filter", "finally_clause", 
  "resource_acquisition", "namespace_declaration", "qualified_identifier", 
  "namespace_body", "extern_alias_directives", "extern_alias_directive", 
  "using_directives", "using_directive", "namespace_member_declarations", 
  "namespace_member_declaration", "type_declaration", "qualified_alias_member", 
  "type_parameter_list", "type_parameter", "class_base", "interface_type_list", 
  "type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
  "type_parameter_constraints", "primary_constraint", "secondary_constraints", 
  "constructor_constraint", "class_body", "class_member_declarations", "class_member_declaration", 
  "all_member_modifiers", "all_member_modifier", "common_member_declaration", 
  "typed_member_declaration", "constant_declarators", "constant_declarator", 
  "variable_declarators", "variable_declarator", "variable_initializer", 
  "return_type", "member_name", "method_body", "formal_parameter_list", 
  "fixed_parameters", "fixed_parameter", "parameter_modifier", "parameter_array", 
  "accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
  "accessor_modifier", "accessor_body", "event_accessor_declarations", "add_accessor_declaration", 
  "remove_accessor_declaration", "overloadable_operator", "conversion_operator_declarator", 
  "constructor_initializer", "body", "struct_interfaces", "struct_body", 
  "struct_member_declaration", "array_type", "rank_specifier", "array_initializer", 
  "variant_type_parameter_list", "variant_type_parameter", "variance_annotation", 
  "interface_base", "interface_body", "interface_member_declaration", "interface_accessors", 
  "enum_base", "enum_body", "enum_member_declaration", "global_attribute_section", 
  "global_attribute_target", "attributes", "attribute_section", "attribute_target", 
  "attribute_list", "attribute", "attribute_argument", "pointer_type", "fixed_pointer_declarators", 
  "fixed_pointer_declarator", "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
  "stackalloc_initializer", "right_arrow", "right_shift", "right_shift_assignment", 
  "literal", "boolean_literal", "string_literal", "interpolated_regular_string", 
  "interpolated_verbatium_string", "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
  "interpolated_string_expression", "keyword", "class_definition", "struct_definition", 
  "interface_definition", "enum_definition", "delegate_definition", "event_declaration", 
  "field_declaration", "property_declaration", "constant_declaration", "indexer_declaration", 
  "destructor_definition", "constructor_declaration", "method_declaration", 
  "method_member_name", "operator_declaration", "arg_declaration", "method_invocation", 
  "object_creation_expression", "identifier"
};

std::vector<std::string> CSharpParser::_literalNames = {
  "", "'\u00EF\u00BB\u00BF'", "", "'/***/'", "", "", "", "", "'#'", "'abstract'", 
  "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", "'async'", "'await'", 
  "'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
  "'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", 
  "'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", 
  "'else'", "'enum'", "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
  "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", 
  "'goto'", "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
  "'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", 
  "'nameof'", "'namespace'", "'new'", "'null'", "'object'", "'on'", "'operator'", 
  "'orderby'", "'out'", "'override'", "'params'", "'partial'", "'private'", 
  "'protected'", "'public'", "'readonly'", "'ref'", "'remove'", "'return'", 
  "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", 
  "'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'true'", 
  "'try'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unmanaged'", 
  "'unsafe'", "'ushort'", "'using'", "'var'", "'virtual'", "'void'", "'volatile'", 
  "'when'", "'where'", "'while'", "'yield'", "", "", "", "", "", "", "", 
  "", "", "", "", "'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", "','", 
  "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", 
  "'!'", "'~'", "'='", "'<'", "'>'", "'\u003F'", "'::'", "'\u003F\u003F'", 
  "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", "'<='", "'>='", 
  "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<'", 
  "'<<='", "'\u003F\u003F='", "'..'", "'{{'", "", "", "", "", "", "", "", 
  "", "", "", "'define'", "'undef'", "'elif'", "'endif'", "'line'", "", 
  "", "", "", "", "", "'hidden'", "", "", "", "'}}'"
};

std::vector<std::string> CSharpParser::_symbolicNames = {
  "", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "EMPTY_DELIMITED_DOC_COMMENT", 
  "DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", 
  "SHARP", "ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "ASYNC", 
  "AWAIT", "BASE", "BOOL", "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", 
  "CHECKED", "CLASS", "CONST", "CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", 
  "DESCENDING", "DO", "DOUBLE", "DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", 
  "EXPLICIT", "EXTERN", "FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", 
  "FROM", "GET", "GOTO", "GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", 
  "INTERNAL", "INTO", "IS", "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", 
  "NEW", "NULL", "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", 
  "PARAMS", "PARTIAL", "PRIVATE", "PROTECTED", "PUBLIC", "READONLY", "REF", 
  "REMOVE", "RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", "SIZEOF", 
  "STACKALLOC", "STATIC", "STRING", "STRUCT", "SWITCH", "THIS", "THROW", 
  "TRUE", "TRY", "TYPEOF", "UINT", "ULONG", "UNCHECKED", "UNMANAGED", "UNSAFE", 
  "USHORT", "USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", "WHEN", "WHERE", 
  "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
  "BIN_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
  "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", "INTERPOLATED_VERBATIUM_STRING_START", 
  "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
  "CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
  "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
  "ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", 
  "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
  "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
  "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
  "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
  "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", 
  "VERBATIUM_DOUBLE_QUOTE_INSIDE", "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", 
  "VERBATIUM_INSIDE_STRING", "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
  "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", 
  "REGION", "ENDREGION", "PRAGMA", "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
  "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE"
};

dfa::Vocabulary CSharpParser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> CSharpParser::_tokenNames;

CSharpParser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static const uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0xc8, 0xa54, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 0x4, 
       0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
       0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 
       0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 0x4, 
       0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 0x11, 
       0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 0x14, 
       0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 0x17, 
       0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 0x1a, 
       0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 0x1d, 
       0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 0x20, 
       0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 0x23, 
       0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 0x26, 
       0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 0x29, 
       0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 0x2c, 
       0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 0x2f, 
       0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 0x32, 
       0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 0x35, 
       0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 0x38, 
       0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 0x3b, 
       0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 0x3e, 
       0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 0x41, 
       0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 0x44, 
       0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 0x47, 
       0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 0x4a, 
       0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 0x4d, 
       0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 0x50, 
       0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 0x53, 
       0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 0x56, 
       0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 0x59, 
       0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 0x5c, 
       0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 0x5f, 
       0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 0x62, 
       0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 0x65, 
       0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 0x68, 
       0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 0x6b, 
       0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 0x6e, 
       0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 0x71, 
       0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 0x74, 
       0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 0x77, 
       0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 0x7a, 
       0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 0x7d, 
       0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 0x80, 
       0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 0x83, 
       0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 0x86, 
       0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 0x89, 
       0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 0x8c, 
       0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 0x8f, 
       0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 0x92, 
       0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 0x95, 
       0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 0x98, 
       0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 0x9b, 
       0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 0x9e, 
       0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 0xa1, 
       0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 0xa4, 
       0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 0xa7, 
       0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 0xaa, 
       0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 0xad, 
       0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 0xb0, 
       0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 0xb3, 
       0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 0xb6, 
       0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 0xb9, 
       0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 0xbc, 
       0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 0xbf, 
       0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 0xc2, 
       0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 0xc5, 
       0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 0xc8, 
       0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 0xcb, 
       0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 0xce, 
       0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 0xd1, 
       0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 0xd4, 
       0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 0xd7, 
       0x9, 0xd7, 0x4, 0xd8, 0x9, 0xd8, 0x4, 0xd9, 0x9, 0xd9, 0x4, 0xda, 
       0x9, 0xda, 0x4, 0xdb, 0x9, 0xdb, 0x3, 0x2, 0x5, 0x2, 0x1b8, 0xa, 
       0x2, 0x3, 0x2, 0x5, 0x2, 0x1bb, 0xa, 0x2, 0x3, 0x2, 0x5, 0x2, 0x1be, 
       0xa, 0x2, 0x3, 0x2, 0x7, 0x2, 0x1c1, 0xa, 0x2, 0xc, 0x2, 0xe, 0x2, 
       0x1c4, 0xb, 0x2, 0x3, 0x2, 0x5, 0x2, 0x1c7, 0xa, 0x2, 0x3, 0x2, 0x3, 
       0x2, 0x3, 0x3, 0x3, 0x3, 0x5, 0x3, 0x1cd, 0xa, 0x3, 0x3, 0x3, 0x5, 
       0x3, 0x1d0, 0xa, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x5, 0x3, 0x1d5, 
       0xa, 0x3, 0x7, 0x3, 0x1d7, 0xa, 0x3, 0xc, 0x3, 0xe, 0x3, 0x1da, 0xb, 
       0x3, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x7, 0x4, 0x1e0, 0xa, 
       0x4, 0xc, 0x4, 0xe, 0x4, 0x1e3, 0xb, 0x4, 0x3, 0x5, 0x3, 0x5, 0x3, 
       0x5, 0x3, 0x5, 0x3, 0x5, 0x5, 0x5, 0x1ea, 0xa, 0x5, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x6, 0x6, 0x1f0, 0xa, 0x6, 0xd, 0x6, 0xe, 
       0x6, 0x1f1, 0x3, 0x6, 0x3, 0x6, 0x3, 0x7, 0x3, 0x7, 0x5, 0x7, 0x1f8, 
       0xa, 0x7, 0x3, 0x8, 0x3, 0x8, 0x5, 0x8, 0x1fc, 0xa, 0x8, 0x3, 0x9, 
       0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 0x201, 0xa, 0x9, 0x3, 0xa, 0x3, 0xa, 
       0x3, 0xb, 0x3, 0xb, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x5, 
       0xc, 0x20b, 0xa, 0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x7, 
       0xd, 0x211, 0xa, 0xd, 0xc, 0xd, 0xe, 0xd, 0x214, 0xb, 0xd, 0x3, 0xd, 
       0x3, 0xd, 0x3, 0xe, 0x3, 0xe, 0x3, 0xe, 0x7, 0xe, 0x21b, 0xa, 0xe, 
       0xc, 0xe, 0xe, 0xe, 0x21e, 0xb, 0xe, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 
       0x5, 0xf, 0x223, 0xa, 0xf, 0x3, 0xf, 0x5, 0xf, 0x226, 0xa, 0xf, 0x3, 
       0xf, 0x3, 0xf, 0x5, 0xf, 0x22a, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 
       0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x232, 0xa, 0x10, 
       0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x237, 0xa, 0x11, 0x3, 
       0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 
       0x12, 0x3, 0x12, 0x5, 0x12, 0x241, 0xa, 0x12, 0x3, 0x13, 0x3, 0x13, 
       0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 
       0x3, 0x13, 0x3, 0x13, 0x3, 0x13, 0x5, 0x13, 0x24e, 0xa, 0x13, 0x3, 
       0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x5, 
       0x14, 0x256, 0xa, 0x14, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 
       0x5, 0x15, 0x25c, 0xa, 0x15, 0x5, 0x15, 0x25e, 0xa, 0x15, 0x3, 0x16, 
       0x3, 0x16, 0x3, 0x16, 0x7, 0x16, 0x263, 0xa, 0x16, 0xc, 0x16, 0xe, 
       0x16, 0x266, 0xb, 0x16, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x7, 0x17, 
       0x26b, 0xa, 0x17, 0xc, 0x17, 0xe, 0x17, 0x26e, 0xb, 0x17, 0x3, 0x18, 
       0x3, 0x18, 0x3, 0x18, 0x7, 0x18, 0x273, 0xa, 0x18, 0xc, 0x18, 0xe, 
       0x18, 0x276, 0xb, 0x18, 0x3, 0x19, 0x3, 0x19, 0x3, 0x19, 0x7, 0x19, 
       0x27b, 0xa, 0x19, 0xc, 0x19, 0xe, 0x19, 0x27e, 0xb, 0x19, 0x3, 0x1a, 
       0x3, 0x1a, 0x3, 0x1a, 0x7, 0x1a, 0x283, 0xa, 0x1a, 0xc, 0x1a, 0xe, 
       0x1a, 0x286, 0xb, 0x1a, 0x3, 0x1b, 0x3, 0x1b, 0x3, 0x1b, 0x7, 0x1b, 
       0x28b, 0xa, 0x1b, 0xc, 0x1b, 0xe, 0x1b, 0x28e, 0xb, 0x1b, 0x3, 0x1c, 
       0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 0x3, 0x1c, 
       0x7, 0x1c, 0x297, 0xa, 0x1c, 0xc, 0x1c, 0xe, 0x1c, 0x29a, 0xb, 0x1c, 
       0x3, 0x1d, 0x3, 0x1d, 0x3, 0x1d, 0x5, 0x1d, 0x29f, 0xa, 0x1d, 0x3, 
       0x1d, 0x7, 0x1d, 0x2a2, 0xa, 0x1d, 0xc, 0x1d, 0xe, 0x1d, 0x2a5, 0xb, 
       0x1d, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x7, 0x1e, 0x2aa, 0xa, 0x1e, 
       0xc, 0x1e, 0xe, 0x1e, 0x2ad, 0xb, 0x1e, 0x3, 0x1f, 0x3, 0x1f, 0x3, 
       0x1f, 0x7, 0x1f, 0x2b2, 0xa, 0x1f, 0xc, 0x1f, 0xe, 0x1f, 0x2b5, 0xb, 
       0x1f, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x5, 
       0x20, 0x2bc, 0xa, 0x20, 0x5, 0x20, 0x2be, 0xa, 0x20, 0x3, 0x20, 0x5, 
       0x20, 0x2c1, 0xa, 0x20, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x7, 0x21, 
       0x2c6, 0xa, 0x21, 0xc, 0x21, 0xe, 0x21, 0x2c9, 0xb, 0x21, 0x3, 0x22, 
       0x3, 0x22, 0x5, 0x22, 0x2cd, 0xa, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 
       0x22, 0x3, 0x23, 0x3, 0x23, 0x5, 0x23, 0x2d4, 0xa, 0x23, 0x3, 0x23, 
       0x3, 0x23, 0x5, 0x23, 0x2d8, 0xa, 0x23, 0x5, 0x23, 0x2da, 0xa, 0x23, 
       0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 
       0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 
       0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 
       0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 
       0x3, 0x24, 0x3, 0x24, 0x5, 0x24, 0x2f6, 0xa, 0x24, 0x3, 0x25, 0x3, 
       0x25, 0x5, 0x25, 0x2fa, 0xa, 0x25, 0x3, 0x25, 0x7, 0x25, 0x2fd, 0xa, 
       0x25, 0xc, 0x25, 0xe, 0x25, 0x300, 0xb, 0x25, 0x3, 0x25, 0x5, 0x25, 
       0x303, 0xa, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 
       0x25, 0x3, 0x25, 0x5, 0x25, 0x30b, 0xa, 0x25, 0x3, 0x25, 0x5, 0x25, 
       0x30e, 0xa, 0x25, 0x3, 0x25, 0x7, 0x25, 0x311, 0xa, 0x25, 0xc, 0x25, 
       0xe, 0x25, 0x314, 0xb, 0x25, 0x3, 0x25, 0x5, 0x25, 0x317, 0xa, 0x25, 
       0x7, 0x25, 0x319, 0xa, 0x25, 0xc, 0x25, 0xe, 0x25, 0x31c, 0xb, 0x25, 
       0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 0x321, 0xa, 0x26, 0x3, 
       0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 
       0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 
       0x26, 0x32f, 0xa, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 
       0x5, 0x26, 0x335, 0xa, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 
       0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x7, 0x26, 0x33f, 
       0xa, 0x26, 0xc, 0x26, 0xe, 0x26, 0x342, 0xb, 0x26, 0x3, 0x26, 0x5, 
       0x26, 0x345, 0xa, 0x26, 0x3, 0x26, 0x6, 0x26, 0x348, 0xa, 0x26, 0xd, 
       0x26, 0xe, 0x26, 0x349, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 0x34e, 0xa, 
       0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 0x354, 
       0xa, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x6, 0x26, 
       0x35a, 0xa, 0x26, 0xd, 0x26, 0xe, 0x26, 0x35b, 0x3, 0x26, 0x3, 0x26, 
       0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 
       0x365, 0xa, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 
       0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 
       0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 
       0x26, 0x377, 0xa, 0x26, 0x3, 0x26, 0x5, 0x26, 0x37a, 0xa, 0x26, 0x3, 
       0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 0x37f, 0xa, 0x26, 0x3, 0x26, 
       0x5, 0x26, 0x382, 0xa, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 
       0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 
       0x26, 0x3, 0x26, 0x7, 0x26, 0x38f, 0xa, 0x26, 0xc, 0x26, 0xe, 0x26, 
       0x392, 0xb, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 0x397, 
       0xa, 0x26, 0x3, 0x27, 0x3, 0x27, 0x5, 0x27, 0x39b, 0xa, 0x27, 0x3, 
       0x28, 0x3, 0x28, 0x3, 0x28, 0x3, 0x29, 0x5, 0x29, 0x3a1, 0xa, 0x29, 
       0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x5, 0x29, 0x3a6, 0xa, 0x29, 0x3, 
       0x2a, 0x5, 0x2a, 0x3a9, 0xa, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 
       0x3, 0x2a, 0x7, 0x2a, 0x3af, 0xa, 0x2a, 0xc, 0x2a, 0xe, 0x2a, 0x3b2, 
       0xb, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 
       0x5, 0x2b, 0x3b9, 0xa, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2c, 0x3, 
       0x2c, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x7, 0x2d, 0x3c2, 0xa, 0x2d, 
       0xc, 0x2d, 0xe, 0x2d, 0x3c5, 0xb, 0x2d, 0x3, 0x2e, 0x3, 0x2e, 0x5, 
       0x2e, 0x3c9, 0xa, 0x2e, 0x3, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 
       0x3ce, 0xa, 0x2f, 0x5, 0x2f, 0x3d0, 0xa, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 
       0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x7, 0x30, 0x3d7, 0xa, 0x30, 0xc, 
       0x30, 0xe, 0x30, 0x3da, 0xb, 0x30, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 
       0x3, 0x31, 0x3, 0x31, 0x5, 0x31, 0x3e1, 0xa, 0x31, 0x3, 0x31, 0x3, 
       0x31, 0x3, 0x31, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x3e8, 0xa, 0x32, 
       0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x7, 0x33, 0x3ee, 0xa, 
       0x33, 0xc, 0x33, 0xe, 0x33, 0x3f1, 0xb, 0x33, 0x3, 0x33, 0x5, 0x33, 
       0x3f4, 0xa, 0x33, 0x3, 0x33, 0x3, 0x33, 0x3, 0x34, 0x3, 0x34, 0x3, 
       0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x3fd, 0xa, 0x34, 0x3, 0x35, 
       0x3, 0x35, 0x3, 0x35, 0x5, 0x35, 0x402, 0xa, 0x35, 0x5, 0x35, 0x404, 
       0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 
       0x7, 0x36, 0x40b, 0xa, 0x36, 0xc, 0x36, 0xe, 0x36, 0x40e, 0xb, 0x36, 
       0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x5, 0x37, 
       0x415, 0xa, 0x37, 0x3, 0x38, 0x3, 0x38, 0x5, 0x38, 0x419, 0xa, 0x38, 
       0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 0x5, 0x38, 0x41e, 0xa, 0x38, 0x5, 
       0x38, 0x420, 0xa, 0x38, 0x3, 0x38, 0x3, 0x38, 0x3, 0x38, 0x5, 0x38, 
       0x425, 0xa, 0x38, 0x7, 0x38, 0x427, 0xa, 0x38, 0xc, 0x38, 0xe, 0x38, 
       0x42a, 0xb, 0x38, 0x3, 0x39, 0x3, 0x39, 0x7, 0x39, 0x42e, 0xa, 0x39, 
       0xc, 0x39, 0xe, 0x39, 0x431, 0xb, 0x39, 0x3, 0x39, 0x3, 0x39, 0x3, 
       0x3a, 0x3, 0x3a, 0x3, 0x3a, 0x7, 0x3a, 0x438, 0xa, 0x3a, 0xc, 0x3a, 
       0xe, 0x3a, 0x43b, 0xb, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x43e, 0xa, 0x3a, 
       0x3, 0x3a, 0x5, 0x3a, 0x441, 0xa, 0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x444, 
       0xa, 0x3a, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x7, 0x3b, 
       0x44a, 0xa, 0x3b, 0xc, 0x3b, 0xe, 0x3b, 0x44d, 0xb, 0x3b, 0x3, 0x3b, 
       0x3, 0x3b, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3d, 
       0x5, 0x3d, 0x456, 0xa, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 
       0x3d, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 
       0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x5, 
       0x3e, 0x467, 0xa, 0x3e, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x7, 0x3f, 
       0x46c, 0xa, 0x3f, 0xc, 0x3f, 0xe, 0x3f, 0x46f, 0xb, 0x3f, 0x3, 0x40, 
       0x5, 0x40, 0x472, 0xa, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x41, 0x3, 0x41, 0x3, 0x41, 0x7, 0x41, 0x47a, 0xa, 0x41, 0xc, 0x41, 
       0xe, 0x41, 0x47d, 0xb, 0x41, 0x3, 0x42, 0x3, 0x42, 0x5, 0x42, 0x481, 
       0xa, 0x42, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x44, 0x3, 0x44, 
       0x5, 0x44, 0x488, 0xa, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x45, 0x7, 0x45, 0x48f, 0xa, 0x45, 0xc, 0x45, 0xe, 0x45, 
       0x492, 0xb, 0x45, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 0x496, 0xa, 0x45, 
       0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x5, 0x46, 
       0x49d, 0xa, 0x46, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 0x3, 
       0x47, 0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 0x3, 0x49, 0x3, 0x49, 0x5, 
       0x49, 0x4a9, 0xa, 0x49, 0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 
       0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 0x3, 0x49, 0x5, 0x49, 
       0x4b4, 0xa, 0x49, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x7, 
       0x4a, 0x4ba, 0xa, 0x4a, 0xc, 0x4a, 0xe, 0x4a, 0x4bd, 0xb, 0x4a, 0x3, 
       0x4b, 0x3, 0x4b, 0x5, 0x4b, 0x4c1, 0xa, 0x4b, 0x3, 0x4c, 0x3, 0x4c, 
       0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x5, 0x4c, 
       0x4ca, 0xa, 0x4c, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 
       0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x5, 0x4e, 0x4d3, 0xa, 0x4e, 0x3, 0x4f, 
       0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 
       0x5, 0x4f, 0x4dc, 0xa, 0x4f, 0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 0x3, 
       0x51, 0x5, 0x51, 0x4e2, 0xa, 0x51, 0x3, 0x51, 0x3, 0x51, 0x3, 0x51, 
       0x5, 0x51, 0x4e7, 0xa, 0x51, 0x3, 0x51, 0x3, 0x51, 0x5, 0x51, 0x4eb, 
       0xa, 0x51, 0x3, 0x51, 0x3, 0x51, 0x5, 0x51, 0x4ef, 0xa, 0x51, 0x3, 
       0x52, 0x3, 0x52, 0x5, 0x52, 0x4f3, 0xa, 0x52, 0x3, 0x52, 0x3, 0x52, 
       0x5, 0x52, 0x4f7, 0xa, 0x52, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 
       0x53, 0x3, 0x53, 0x5, 0x53, 0x4fe, 0xa, 0x53, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 0x506, 0xa, 
       0x55, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 
       0x56, 0x513, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x7, 0x56, 0x51b, 0xa, 0x56, 0xc, 0x56, 0xe, 
       0x56, 0x51e, 0xb, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0x533, 0xa, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x5, 0x56, 0x537, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x5, 0x56, 0x53b, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 
       0x56, 0x540, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0x554, 0xa, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x5, 0x56, 0x559, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x5, 0x56, 0x55e, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0x565, 0xa, 0x56, 0x3, 0x56, 
       0x5, 0x56, 0x568, 0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0x57e, 
       0xa, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 
       0x58a, 0xa, 0x56, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 0x58e, 0xa, 0x57, 
       0x3, 0x57, 0x3, 0x57, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x5, 0x58, 0x596, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 
       0x58, 0x7, 0x58, 0x59c, 0xa, 0x58, 0xc, 0x58, 0xe, 0x58, 0x59f, 0xb, 
       0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 0x5a5, 
       0xa, 0x58, 0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 0x5a9, 0xa, 0x59, 0x3, 
       0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x5, 0x5a, 0x5ae, 0xa, 0x5a, 0x3, 0x5a, 
       0x5, 0x5a, 0x5b1, 0xa, 0x5a, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 0x5, 
       0x5b, 0x5b6, 0xa, 0x5b, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 
       0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x5be, 0xa, 0x5d, 0x3, 0x5e, 0x6, 
       0x5e, 0x5c1, 0xa, 0x5e, 0xd, 0x5e, 0xe, 0x5e, 0x5c2, 0x3, 0x5e, 0x3, 
       0x5e, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x5, 0x5f, 0x5ca, 0xa, 0x5f, 
       0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x5, 0x5f, 0x5d0, 0xa, 
       0x5f, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x61, 0x6, 0x61, 0x5d6, 
       0xa, 0x61, 0xd, 0x61, 0xe, 0x61, 0x5d7, 0x3, 0x62, 0x3, 0x62, 0x3, 
       0x62, 0x3, 0x62, 0x7, 0x62, 0x5de, 0xa, 0x62, 0xc, 0x62, 0xe, 0x62, 
       0x5e1, 0xb, 0x62, 0x5, 0x62, 0x5e3, 0xa, 0x62, 0x3, 0x63, 0x3, 0x63, 
       0x3, 0x63, 0x7, 0x63, 0x5e8, 0xa, 0x63, 0xc, 0x63, 0xe, 0x63, 0x5eb, 
       0xb, 0x63, 0x3, 0x64, 0x3, 0x64, 0x7, 0x64, 0x5ef, 0xa, 0x64, 0xc, 
       0x64, 0xe, 0x64, 0x5f2, 0xb, 0x64, 0x3, 0x64, 0x5, 0x64, 0x5f5, 0xa, 
       0x64, 0x3, 0x64, 0x5, 0x64, 0x5f8, 0xa, 0x64, 0x3, 0x65, 0x3, 0x65, 
       0x3, 0x65, 0x3, 0x65, 0x5, 0x65, 0x5fe, 0xa, 0x65, 0x3, 0x65, 0x3, 
       0x65, 0x5, 0x65, 0x602, 0xa, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x66, 
       0x3, 0x66, 0x5, 0x66, 0x608, 0xa, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 
       0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x68, 0x3, 
       0x68, 0x3, 0x68, 0x3, 0x69, 0x3, 0x69, 0x5, 0x69, 0x616, 0xa, 0x69, 
       0x3, 0x6a, 0x3, 0x6a, 0x3, 0x6a, 0x3, 0x6a, 0x5, 0x6a, 0x61c, 0xa, 
       0x6a, 0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x7, 0x6b, 0x621, 0xa, 0x6b, 
       0xc, 0x6b, 0xe, 0x6b, 0x624, 0xb, 0x6b, 0x3, 0x6c, 0x3, 0x6c, 0x5, 
       0x6c, 0x628, 0xa, 0x6c, 0x3, 0x6c, 0x5, 0x6c, 0x62b, 0xa, 0x6c, 0x3, 
       0x6c, 0x5, 0x6c, 0x62e, 0xa, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6d, 
       0x6, 0x6d, 0x633, 0xa, 0x6d, 0xd, 0x6d, 0xe, 0x6d, 0x634, 0x3, 0x6e, 
       0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6f, 0x6, 0x6f, 
       0x63d, 0xa, 0x6f, 0xd, 0x6f, 0xe, 0x6f, 0x63e, 0x3, 0x70, 0x3, 0x70, 
       0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 
       0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 
       0x3, 0x70, 0x5, 0x70, 0x650, 0xa, 0x70, 0x3, 0x71, 0x6, 0x71, 0x653, 
       0xa, 0x71, 0xd, 0x71, 0xe, 0x71, 0x654, 0x3, 0x72, 0x3, 0x72, 0x5, 
       0x72, 0x659, 0xa, 0x72, 0x3, 0x73, 0x5, 0x73, 0x65c, 0xa, 0x73, 0x3, 
       0x73, 0x5, 0x73, 0x65f, 0xa, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 
       0x3, 0x73, 0x3, 0x73, 0x5, 0x73, 0x666, 0xa, 0x73, 0x3, 0x74, 0x3, 
       0x74, 0x3, 0x74, 0x3, 0x74, 0x5, 0x74, 0x66c, 0xa, 0x74, 0x3, 0x75, 
       0x3, 0x75, 0x3, 0x75, 0x3, 0x75, 0x7, 0x75, 0x672, 0xa, 0x75, 0xc, 
       0x75, 0xe, 0x75, 0x675, 0xb, 0x75, 0x3, 0x75, 0x3, 0x75, 0x3, 0x76, 
       0x5, 0x76, 0x67a, 0xa, 0x76, 0x3, 0x76, 0x3, 0x76, 0x3, 0x77, 0x3, 
       0x77, 0x3, 0x77, 0x3, 0x77, 0x7, 0x77, 0x682, 0xa, 0x77, 0xc, 0x77, 
       0xe, 0x77, 0x685, 0xb, 0x77, 0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x7, 
       0x78, 0x68a, 0xa, 0x78, 0xc, 0x78, 0xe, 0x78, 0x68d, 0xb, 0x78, 0x3, 
       0x79, 0x6, 0x79, 0x690, 0xa, 0x79, 0xd, 0x79, 0xe, 0x79, 0x691, 0x3, 
       0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7b, 0x3, 
       0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x5, 0x7b, 0x69d, 0xa, 0x7b, 0x3, 0x7b, 
       0x3, 0x7b, 0x5, 0x7b, 0x6a1, 0xa, 0x7b, 0x5, 0x7b, 0x6a3, 0xa, 0x7b, 
       0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0x6a8, 0xa, 0x7c, 0x3, 
       0x7c, 0x3, 0x7c, 0x5, 0x7c, 0x6ac, 0xa, 0x7c, 0x3, 0x7d, 0x3, 0x7d, 
       0x3, 0x7d, 0x7, 0x7d, 0x6b1, 0xa, 0x7d, 0xc, 0x7d, 0xe, 0x7d, 0x6b4, 
       0xb, 0x7d, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7f, 
       0x3, 0x7f, 0x5, 0x7f, 0x6bc, 0xa, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 
       0x80, 0x6, 0x80, 0x6c1, 0xa, 0x80, 0xd, 0x80, 0xe, 0x80, 0x6c2, 0x3, 
       0x81, 0x5, 0x81, 0x6c6, 0xa, 0x81, 0x3, 0x81, 0x5, 0x81, 0x6c9, 0xa, 
       0x81, 0x3, 0x81, 0x3, 0x81, 0x5, 0x81, 0x6cd, 0xa, 0x81, 0x3, 0x82, 
       0x6, 0x82, 0x6d0, 0xa, 0x82, 0xd, 0x82, 0xe, 0x82, 0x6d1, 0x3, 0x83, 
       0x3, 0x83, 0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 
       0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 0x5, 0x84, 0x6df, 0xa, 
       0x84, 0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 0x3, 0x84, 0x3, 
       0x84, 0x3, 0x84, 0x3, 0x84, 0x5, 0x84, 0x6e9, 0xa, 0x84, 0x3, 0x85, 
       0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x5, 0x85, 0x6f0, 0xa, 
       0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 
       0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x5, 0x85, 0x6fc, 
       0xa, 0x85, 0x3, 0x86, 0x3, 0x86, 0x3, 0x86, 0x7, 0x86, 0x701, 0xa, 
       0x86, 0xc, 0x86, 0xe, 0x86, 0x704, 0xb, 0x86, 0x3, 0x87, 0x3, 0x87, 
       0x3, 0x87, 0x3, 0x87, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x7, 0x88, 
       0x70d, 0xa, 0x88, 0xc, 0x88, 0xe, 0x88, 0x710, 0xb, 0x88, 0x3, 0x89, 
       0x3, 0x89, 0x3, 0x89, 0x5, 0x89, 0x715, 0xa, 0x89, 0x3, 0x8a, 0x3, 
       0x8a, 0x5, 0x8a, 0x719, 0xa, 0x8a, 0x3, 0x8b, 0x3, 0x8b, 0x5, 0x8b, 
       0x71d, 0xa, 0x8b, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8d, 0x3, 0x8d, 0x5, 
       0x8d, 0x723, 0xa, 0x8d, 0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 
       0x5, 0x8e, 0x729, 0xa, 0x8e, 0x5, 0x8e, 0x72b, 0xa, 0x8e, 0x3, 0x8f, 
       0x3, 0x8f, 0x3, 0x8f, 0x7, 0x8f, 0x730, 0xa, 0x8f, 0xc, 0x8f, 0xe, 
       0x8f, 0x733, 0xb, 0x8f, 0x3, 0x90, 0x5, 0x90, 0x736, 0xa, 0x90, 0x3, 
       0x90, 0x5, 0x90, 0x739, 0xa, 0x90, 0x3, 0x90, 0x3, 0x90, 0x5, 0x90, 
       0x73d, 0xa, 0x90, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 
       0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x5, 0x91, 0x747, 0xa, 0x91, 
       0x3, 0x92, 0x5, 0x92, 0x74a, 0xa, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 
       0x92, 0x3, 0x92, 0x3, 0x93, 0x5, 0x93, 0x751, 0xa, 0x93, 0x3, 0x93, 
       0x5, 0x93, 0x754, 0xa, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x5, 
       0x93, 0x759, 0xa, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x5, 0x93, 
       0x75e, 0xa, 0x93, 0x5, 0x93, 0x760, 0xa, 0x93, 0x3, 0x94, 0x5, 0x94, 
       0x763, 0xa, 0x94, 0x3, 0x94, 0x5, 0x94, 0x766, 0xa, 0x94, 0x3, 0x94, 
       0x3, 0x94, 0x3, 0x94, 0x3, 0x95, 0x5, 0x95, 0x76c, 0xa, 0x95, 0x3, 
       0x95, 0x5, 0x95, 0x76f, 0xa, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 
       0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 
       0x3, 0x96, 0x5, 0x96, 0x77b, 0xa, 0x96, 0x3, 0x97, 0x3, 0x97, 0x5, 
       0x97, 0x77f, 0xa, 0x97, 0x3, 0x98, 0x5, 0x98, 0x782, 0xa, 0x98, 0x3, 
       0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 0x98, 0x3, 
       0x98, 0x3, 0x98, 0x5, 0x98, 0x78c, 0xa, 0x98, 0x3, 0x99, 0x5, 0x99, 
       0x78f, 0xa, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x9a, 0x5, 
       0x9a, 0x795, 0xa, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9b, 
       0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 
       0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 
       0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 
       0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x5, 0x9b, 0x7b0, 0xa, 0x9b, 0x3, 
       0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 0x9c, 0x3, 
       0x9c, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x5, 0x9d, 0x7bd, 
       0xa, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9e, 0x3, 0x9e, 0x5, 0x9e, 
       0x7c3, 0xa, 0x9e, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0xa0, 0x3, 
       0xa0, 0x7, 0xa0, 0x7ca, 0xa, 0xa0, 0xc, 0xa0, 0xe, 0xa0, 0x7cd, 0xb, 
       0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x3, 0xa1, 0x5, 0xa1, 0x7d2, 0xa, 0xa1, 
       0x3, 0xa1, 0x5, 0xa1, 0x7d5, 0xa, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 
       0xa1, 0x3, 0xa1, 0x6, 0xa1, 0x7db, 0xa, 0xa1, 0xd, 0xa1, 0xe, 0xa1, 
       0x7dc, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0x7e1, 0xa, 0xa1, 0x3, 0xa2, 
       0x3, 0xa2, 0x7, 0xa2, 0x7e5, 0xa, 0xa2, 0xc, 0xa2, 0xe, 0xa2, 0x7e8, 
       0xb, 0xa2, 0x3, 0xa2, 0x6, 0xa2, 0x7eb, 0xa, 0xa2, 0xd, 0xa2, 0xe, 
       0xa2, 0x7ec, 0x3, 0xa3, 0x3, 0xa3, 0x7, 0xa3, 0x7f1, 0xa, 0xa3, 0xc, 
       0xa3, 0xe, 0xa3, 0x7f4, 0xb, 0xa3, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa4, 
       0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x7, 0xa4, 0x7fc, 0xa, 0xa4, 0xc, 
       0xa4, 0xe, 0xa4, 0x7ff, 0xb, 0xa4, 0x3, 0xa4, 0x5, 0xa4, 0x802, 0xa, 
       0xa4, 0x5, 0xa4, 0x804, 0xa, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x7, 0xa5, 0x80c, 0xa, 0xa5, 0xc, 
       0xa5, 0xe, 0xa5, 0x80f, 0xb, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa6, 
       0x5, 0xa6, 0x814, 0xa, 0xa6, 0x3, 0xa6, 0x5, 0xa6, 0x817, 0xa, 0xa6, 
       0x3, 0xa6, 0x3, 0xa6, 0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa8, 0x3, 0xa8, 
       0x3, 0xa8, 0x3, 0xa9, 0x3, 0xa9, 0x7, 0xa9, 0x822, 0xa, 0xa9, 0xc, 
       0xa9, 0xe, 0xa9, 0x825, 0xb, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x3, 0xaa, 
       0x5, 0xaa, 0x82a, 0xa, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x82d, 0xa, 0xaa, 
       0x3, 0xaa, 0x5, 0xaa, 0x830, 0xa, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 
       0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x837, 0xa, 0xaa, 0x3, 0xaa, 
       0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x83c, 0xa, 0xaa, 0x3, 0xaa, 0x3, 
       0xaa, 0x5, 0xaa, 0x840, 0xa, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 
       0x844, 0xa, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 
       0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 
       0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x855, 
       0xa, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x858, 0xa, 0xaa, 0x3, 0xaa, 0x3, 
       0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x85d, 0xa, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 
       0x5, 0xaa, 0x861, 0xa, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x865, 
       0xa, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 0x3, 0xaa, 
       0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0x86e, 0xa, 0xaa, 0x3, 0xab, 0x5, 
       0xab, 0x871, 0xa, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x5, 0xab, 
       0x876, 0xa, 0xab, 0x3, 0xab, 0x3, 0xab, 0x5, 0xab, 0x87a, 0xa, 0xab, 
       0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x5, 0xab, 0x87f, 0xa, 0xab, 0x3, 
       0xab, 0x3, 0xab, 0x5, 0xab, 0x883, 0xa, 0xab, 0x5, 0xab, 0x885, 0xa, 
       0xab, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x3, 0xad, 0x7, 0xad, 0x88e, 0xa, 0xad, 0xc, 0xad, 0xe, 0xad, 
       0x891, 0xb, 0xad, 0x3, 0xad, 0x5, 0xad, 0x894, 0xa, 0xad, 0x5, 0xad, 
       0x896, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xae, 0x5, 0xae, 0x89b, 
       0xa, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x5, 0xae, 0x8a0, 0xa, 
       0xae, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x5, 
       0xaf, 0x8a7, 0xa, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xb0, 0x3, 0xb0, 
       0x5, 0xb0, 0x8ad, 0xa, 0xb0, 0x3, 0xb1, 0x6, 0xb1, 0x8b0, 0xa, 0xb1, 
       0xd, 0xb1, 0xe, 0xb1, 0x8b1, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 
       0xb2, 0x5, 0xb2, 0x8b8, 0xa, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x5, 0xb2, 
       0x8bc, 0xa, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb3, 0x3, 0xb3, 0x5, 
       0xb3, 0x8c2, 0xa, 0xb3, 0x3, 0xb4, 0x3, 0xb4, 0x3, 0xb4, 0x7, 0xb4, 
       0x8c7, 0xa, 0xb4, 0xc, 0xb4, 0xe, 0xb4, 0x8ca, 0xb, 0xb4, 0x3, 0xb5, 
       0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb5, 0x7, 0xb5, 0x8d1, 0xa, 
       0xb5, 0xc, 0xb5, 0xe, 0xb5, 0x8d4, 0xb, 0xb5, 0x5, 0xb5, 0x8d6, 0xa, 
       0xb5, 0x3, 0xb5, 0x5, 0xb5, 0x8d9, 0xa, 0xb5, 0x3, 0xb6, 0x3, 0xb6, 
       0x3, 0xb6, 0x5, 0xb6, 0x8de, 0xa, 0xb6, 0x3, 0xb6, 0x3, 0xb6, 0x3, 
       0xb7, 0x3, 0xb7, 0x5, 0xb7, 0x8e4, 0xa, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 
       0x7, 0xb7, 0x8e8, 0xa, 0xb7, 0xc, 0xb7, 0xe, 0xb7, 0x8eb, 0xb, 0xb7, 
       0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x3, 0xb7, 0x5, 0xb7, 0x8f1, 0xa, 
       0xb7, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x7, 0xb8, 0x8f6, 0xa, 0xb8, 
       0xc, 0xb8, 0xe, 0xb8, 0x8f9, 0xb, 0xb8, 0x3, 0xb9, 0x3, 0xb9, 0x3, 
       0xb9, 0x3, 0xb9, 0x3, 0xba, 0x5, 0xba, 0x900, 0xa, 0xba, 0x3, 0xba, 
       0x3, 0xba, 0x5, 0xba, 0x904, 0xa, 0xba, 0x3, 0xbb, 0x3, 0xbb, 0x3, 
       0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 
       0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x5, 0xbc, 0x913, 
       0xa, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x5, 0xbc, 0x917, 0xa, 0xbc, 0x3, 
       0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x7, 0xbc, 0x91e, 
       0xa, 0xbc, 0xc, 0xbc, 0xe, 0xbc, 0x921, 0xb, 0xbc, 0x3, 0xbc, 0x5, 
       0xbc, 0x924, 0xa, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x5, 0xbc, 0x928, 0xa, 
       0xbc, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbe, 0x3, 
       0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbf, 0x3, 0xbf, 0x3, 0xbf, 0x3, 
       0xbf, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 
       0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x5, 0xc0, 0x93e, 0xa, 0xc0, 0x3, 0xc1, 
       0x3, 0xc1, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x5, 0xc2, 
       0x946, 0xa, 0xc2, 0x3, 0xc3, 0x3, 0xc3, 0x7, 0xc3, 0x94a, 0xa, 0xc3, 
       0xc, 0xc3, 0xe, 0xc3, 0x94d, 0xb, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc4, 0x3, 0xc4, 0x7, 0xc4, 0x953, 0xa, 0xc4, 0xc, 0xc4, 0xe, 0xc4, 
       0x956, 0xb, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc5, 0x3, 0xc5, 0x3, 
       0xc5, 0x3, 0xc5, 0x5, 0xc5, 0x95e, 0xa, 0xc5, 0x3, 0xc6, 0x3, 0xc6, 
       0x3, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 0x964, 0xa, 0xc6, 0x3, 0xc7, 0x3, 
       0xc7, 0x3, 0xc7, 0x7, 0xc7, 0x969, 0xa, 0xc7, 0xc, 0xc7, 0xe, 0xc7, 
       0x96c, 0xb, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x6, 0xc7, 0x970, 0xa, 0xc7, 
       0xd, 0xc7, 0xe, 0xc7, 0x971, 0x5, 0xc7, 0x974, 0xa, 0xc7, 0x3, 0xc8, 
       0x3, 0xc8, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x5, 0xc9, 0x97b, 0xa, 
       0xc9, 0x3, 0xc9, 0x5, 0xc9, 0x97e, 0xa, 0xc9, 0x3, 0xc9, 0x5, 0xc9, 
       0x981, 0xa, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x5, 0xc9, 0x985, 0xa, 0xc9, 
       0x3, 0xca, 0x5, 0xca, 0x988, 0xa, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 
       0xca, 0x5, 0xca, 0x98d, 0xa, 0xca, 0x3, 0xca, 0x5, 0xca, 0x990, 0xa, 
       0xca, 0x3, 0xca, 0x5, 0xca, 0x993, 0xa, 0xca, 0x3, 0xca, 0x3, 0xca, 
       0x5, 0xca, 0x997, 0xa, 0xca, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x5, 
       0xcb, 0x99c, 0xa, 0xcb, 0x3, 0xcb, 0x5, 0xcb, 0x99f, 0xa, 0xcb, 0x3, 
       0xcb, 0x5, 0xcb, 0x9a2, 0xa, 0xcb, 0x3, 0xcb, 0x3, 0xcb, 0x5, 0xcb, 
       0x9a6, 0xa, 0xcb, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x5, 0xcc, 0x9ab, 
       0xa, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x5, 0xcc, 0x9af, 0xa, 0xcc, 0x3, 
       0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x9b5, 0xa, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x5, 0xcd, 0x9b9, 0xa, 0xcd, 0x3, 0xcd, 0x3, 
       0xcd, 0x5, 0xcd, 0x9bd, 0xa, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xce, 
       0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 
       0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x5, 0xce, 0x9cb, 0xa, 0xce, 0x3, 
       0xcf, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 
       0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0x9d8, 
       0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 
       0x9de, 0xa, 0xd0, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 
       0xd1, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 
       0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 
       0xd2, 0x5, 0xd2, 0x9f1, 0xa, 0xd2, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 
       0x5, 0xd4, 0x9fc, 0xa, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x5, 0xd4, 0xa00, 
       0xa, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd5, 0x3, 0xd5, 0x5, 0xd5, 
       0xa06, 0xa, 0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x5, 0xd5, 0xa0a, 0xa, 0xd5, 
       0x3, 0xd5, 0x3, 0xd5, 0x5, 0xd5, 0xa0e, 0xa, 0xd5, 0x3, 0xd5, 0x3, 
       0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x5, 0xd5, 0xa15, 0xa, 0xd5, 
       0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x5, 0xd6, 
       0xa1c, 0xa, 0xd6, 0x3, 0xd6, 0x5, 0xd6, 0xa1f, 0xa, 0xd6, 0x3, 0xd6, 
       0x3, 0xd6, 0x7, 0xd6, 0xa23, 0xa, 0xd6, 0xc, 0xd6, 0xe, 0xd6, 0xa26, 
       0xb, 0xd6, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x5, 0xd7, 
       0xa2c, 0xa, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x5, 0xd7, 0xa31, 
       0xa, 0xd7, 0x3, 0xd7, 0x5, 0xd7, 0xa34, 0xa, 0xd7, 0x3, 0xd7, 0x3, 
       0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x5, 0xd7, 0xa3c, 
       0xa, 0xd7, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x5, 0xd8, 
       0xa42, 0xa, 0xd8, 0x3, 0xd9, 0x3, 0xd9, 0x5, 0xd9, 0xa46, 0xa, 0xd9, 
       0x3, 0xd9, 0x3, 0xd9, 0x3, 0xda, 0x3, 0xda, 0x5, 0xda, 0xa4c, 0xa, 
       0xda, 0x3, 0xda, 0x3, 0xda, 0x5, 0xda, 0xa50, 0xa, 0xda, 0x3, 0xdb, 
       0x3, 0xdb, 0x3, 0xdb, 0x2, 0x2, 0xdc, 0x2, 0x4, 0x6, 0x8, 0xa, 0xc, 
       0xe, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 
       0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 
       0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 
       0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 
       0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 
       0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 
       0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 
       0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 
       0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 
       0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 
       0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 
       0x100, 0x102, 0x104, 0x106, 0x108, 0x10a, 0x10c, 0x10e, 0x110, 0x112, 
       0x114, 0x116, 0x118, 0x11a, 0x11c, 0x11e, 0x120, 0x122, 0x124, 0x126, 
       0x128, 0x12a, 0x12c, 0x12e, 0x130, 0x132, 0x134, 0x136, 0x138, 0x13a, 
       0x13c, 0x13e, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14a, 0x14c, 0x14e, 
       0x150, 0x152, 0x154, 0x156, 0x158, 0x15a, 0x15c, 0x15e, 0x160, 0x162, 
       0x164, 0x166, 0x168, 0x16a, 0x16c, 0x16e, 0x170, 0x172, 0x174, 0x176, 
       0x178, 0x17a, 0x17c, 0x17e, 0x180, 0x182, 0x184, 0x186, 0x188, 0x18a, 
       0x18c, 0x18e, 0x190, 0x192, 0x194, 0x196, 0x198, 0x19a, 0x19c, 0x19e, 
       0x1a0, 0x1a2, 0x1a4, 0x1a6, 0x1a8, 0x1aa, 0x1ac, 0x1ae, 0x1b0, 0x1b2, 
       0x1b4, 0x2, 0x15, 0xa, 0x2, 0x17, 0x17, 0x1a, 0x1a, 0x39, 0x39, 0x41, 
       0x41, 0x55, 0x55, 0x59, 0x59, 0x65, 0x66, 0x6a, 0x6a, 0x4, 0x2, 0x24, 
       0x24, 0x2f, 0x2f, 0x5, 0x2, 0x38, 0x38, 0x4a, 0x4a, 0x52, 0x52, 0x3, 
       0x2, 0x9e, 0x9f, 0x4, 0x2, 0x94, 0x95, 0xa0, 0xa1, 0x3, 0x2, 0x89, 
       0x8a, 0x3, 0x2, 0x8b, 0x8d, 0x10, 0x2, 0x14, 0x14, 0x17, 0x17, 0x1a, 
       0x1a, 0x1f, 0x1f, 0x24, 0x24, 0x2f, 0x2f, 0x39, 0x39, 0x41, 0x41, 
       0x46, 0x46, 0x55, 0x55, 0x59, 0x59, 0x5d, 0x5d, 0x65, 0x66, 0x6a, 
       0x6a, 0x4, 0x2, 0x10, 0x10, 0x22, 0x22, 0x4, 0x2, 0x11, 0x11, 0x69, 
       0x69, 0xe, 0x2, 0xb, 0xb, 0x11, 0x11, 0x2b, 0x2b, 0x3b, 0x3b, 0x44, 
       0x44, 0x4b, 0x4b, 0x4d, 0x51, 0x56, 0x56, 0x5c, 0x5c, 0x69, 0x69, 
       0x6d, 0x6d, 0x6f, 0x6f, 0x4, 0x2, 0x2a, 0x2a, 0x37, 0x37, 0x4, 0x2, 
       0x13, 0x13, 0x60, 0x60, 0x4, 0x2, 0x8b, 0x8b, 0x96, 0x96, 0x4, 0x2, 
       0x38, 0x38, 0x4a, 0x4a, 0x4, 0x2, 0x2c, 0x2c, 0x62, 0x62, 0x15, 0x2, 
       0xb, 0xb, 0xf, 0xf, 0x13, 0x15, 0x17, 0x21, 0x23, 0x24, 0x26, 0x27, 
       0x29, 0x31, 0x34, 0x34, 0x36, 0x3b, 0x3d, 0x3d, 0x40, 0x41, 0x43, 
       0x46, 0x48, 0x48, 0x4a, 0x4c, 0x4e, 0x52, 0x54, 0x56, 0x59, 0x6b, 
       0x6d, 0x6f, 0x72, 0x72, 0x3, 0x2, 0x51, 0x52, 0x16, 0x2, 0xc, 0xe, 
       0x10, 0x12, 0x16, 0x16, 0x22, 0x22, 0x25, 0x25, 0x28, 0x28, 0x32, 
       0x33, 0x35, 0x35, 0x3c, 0x3c, 0x3e, 0x3f, 0x42, 0x42, 0x47, 0x47, 
       0x49, 0x49, 0x4d, 0x4d, 0x53, 0x53, 0x57, 0x58, 0x68, 0x68, 0x6c, 
       0x6c, 0x70, 0x71, 0x73, 0x74, 0x2, 0xb62, 0x2, 0x1b7, 0x3, 0x2, 0x2, 
       0x2, 0x4, 0x1cf, 0x3, 0x2, 0x2, 0x2, 0x6, 0x1db, 0x3, 0x2, 0x2, 0x2, 
       0x8, 0x1e9, 0x3, 0x2, 0x2, 0x2, 0xa, 0x1eb, 0x3, 0x2, 0x2, 0x2, 0xc, 
       0x1f5, 0x3, 0x2, 0x2, 0x2, 0xe, 0x1fb, 0x3, 0x2, 0x2, 0x2, 0x10, 
       0x200, 0x3, 0x2, 0x2, 0x2, 0x12, 0x202, 0x3, 0x2, 0x2, 0x2, 0x14, 
       0x204, 0x3, 0x2, 0x2, 0x2, 0x16, 0x20a, 0x3, 0x2, 0x2, 0x2, 0x18, 
       0x20c, 0x3, 0x2, 0x2, 0x2, 0x1a, 0x217, 0x3, 0x2, 0x2, 0x2, 0x1c, 
       0x222, 0x3, 0x2, 0x2, 0x2, 0x1e, 0x231, 0x3, 0x2, 0x2, 0x2, 0x20, 
       0x236, 0x3, 0x2, 0x2, 0x2, 0x22, 0x240, 0x3, 0x2, 0x2, 0x2, 0x24, 
       0x24d, 0x3, 0x2, 0x2, 0x2, 0x26, 0x24f, 0x3, 0x2, 0x2, 0x2, 0x28, 
       0x257, 0x3, 0x2, 0x2, 0x2, 0x2a, 0x25f, 0x3, 0x2, 0x2, 0x2, 0x2c, 
       0x267, 0x3, 0x2, 0x2, 0x2, 0x2e, 0x26f, 0x3, 0x2, 0x2, 0x2, 0x30, 
       0x277, 0x3, 0x2, 0x2, 0x2, 0x32, 0x27f, 0x3, 0x2, 0x2, 0x2, 0x34, 
       0x287, 0x3, 0x2, 0x2, 0x2, 0x36, 0x28f, 0x3, 0x2, 0x2, 0x2, 0x38, 
       0x29b, 0x3, 0x2, 0x2, 0x2, 0x3a, 0x2a6, 0x3, 0x2, 0x2, 0x2, 0x3c, 
       0x2ae, 0x3, 0x2, 0x2, 0x2, 0x3e, 0x2b6, 0x3, 0x2, 0x2, 0x2, 0x40, 
       0x2c2, 0x3, 0x2, 0x2, 0x2, 0x42, 0x2ca, 0x3, 0x2, 0x2, 0x2, 0x44, 
       0x2d9, 0x3, 0x2, 0x2, 0x2, 0x46, 0x2f5, 0x3, 0x2, 0x2, 0x2, 0x48, 
       0x2f7, 0x3, 0x2, 0x2, 0x2, 0x4a, 0x396, 0x3, 0x2, 0x2, 0x2, 0x4c, 
       0x39a, 0x3, 0x2, 0x2, 0x2, 0x4e, 0x39c, 0x3, 0x2, 0x2, 0x2, 0x50, 
       0x3a0, 0x3, 0x2, 0x2, 0x2, 0x52, 0x3a8, 0x3, 0x2, 0x2, 0x2, 0x54, 
       0x3b8, 0x3, 0x2, 0x2, 0x2, 0x56, 0x3bc, 0x3, 0x2, 0x2, 0x2, 0x58, 
       0x3be, 0x3, 0x2, 0x2, 0x2, 0x5a, 0x3c8, 0x3, 0x2, 0x2, 0x2, 0x5c, 
       0x3ca, 0x3, 0x2, 0x2, 0x2, 0x5e, 0x3d3, 0x3, 0x2, 0x2, 0x2, 0x60, 
       0x3e0, 0x3, 0x2, 0x2, 0x2, 0x62, 0x3e7, 0x3, 0x2, 0x2, 0x2, 0x64, 
       0x3e9, 0x3, 0x2, 0x2, 0x2, 0x66, 0x3fc, 0x3, 0x2, 0x2, 0x2, 0x68, 
       0x3fe, 0x3, 0x2, 0x2, 0x2, 0x6a, 0x407, 0x3, 0x2, 0x2, 0x2, 0x6c, 
       0x414, 0x3, 0x2, 0x2, 0x2, 0x6e, 0x416, 0x3, 0x2, 0x2, 0x2, 0x70, 
       0x42b, 0x3, 0x2, 0x2, 0x2, 0x72, 0x434, 0x3, 0x2, 0x2, 0x2, 0x74, 
       0x445, 0x3, 0x2, 0x2, 0x2, 0x76, 0x450, 0x3, 0x2, 0x2, 0x2, 0x78, 
       0x455, 0x3, 0x2, 0x2, 0x2, 0x7a, 0x466, 0x3, 0x2, 0x2, 0x2, 0x7c, 
       0x468, 0x3, 0x2, 0x2, 0x2, 0x7e, 0x471, 0x3, 0x2, 0x2, 0x2, 0x80, 
       0x476, 0x3, 0x2, 0x2, 0x2, 0x82, 0x480, 0x3, 0x2, 0x2, 0x2, 0x84, 
       0x482, 0x3, 0x2, 0x2, 0x2, 0x86, 0x485, 0x3, 0x2, 0x2, 0x2, 0x88, 
       0x490, 0x3, 0x2, 0x2, 0x2, 0x8a, 0x49c, 0x3, 0x2, 0x2, 0x2, 0x8c, 
       0x49e, 0x3, 0x2, 0x2, 0x2, 0x8e, 0x4a3, 0x3, 0x2, 0x2, 0x2, 0x90, 
       0x4a6, 0x3, 0x2, 0x2, 0x2, 0x92, 0x4b5, 0x3, 0x2, 0x2, 0x2, 0x94, 
       0x4be, 0x3, 0x2, 0x2, 0x2, 0x96, 0x4c9, 0x3, 0x2, 0x2, 0x2, 0x98, 
       0x4cb, 0x3, 0x2, 0x2, 0x2, 0x9a, 0x4d2, 0x3, 0x2, 0x2, 0x2, 0x9c, 
       0x4db, 0x3, 0x2, 0x2, 0x2, 0x9e, 0x4dd, 0x3, 0x2, 0x2, 0x2, 0xa0, 
       0x4e1, 0x3, 0x2, 0x2, 0x2, 0xa2, 0x4f6, 0x3, 0x2, 0x2, 0x2, 0xa4, 
       0x4fd, 0x3, 0x2, 0x2, 0x2, 0xa6, 0x4ff, 0x3, 0x2, 0x2, 0x2, 0xa8, 
       0x505, 0x3, 0x2, 0x2, 0x2, 0xaa, 0x589, 0x3, 0x2, 0x2, 0x2, 0xac, 
       0x58b, 0x3, 0x2, 0x2, 0x2, 0xae, 0x5a4, 0x3, 0x2, 0x2, 0x2, 0xb0, 
       0x5a8, 0x3, 0x2, 0x2, 0x2, 0xb2, 0x5aa, 0x3, 0x2, 0x2, 0x2, 0xb4, 
       0x5b5, 0x3, 0x2, 0x2, 0x2, 0xb6, 0x5b7, 0x3, 0x2, 0x2, 0x2, 0xb8, 
       0x5bd, 0x3, 0x2, 0x2, 0x2, 0xba, 0x5c0, 0x3, 0x2, 0x2, 0x2, 0xbc, 
       0x5cf, 0x3, 0x2, 0x2, 0x2, 0xbe, 0x5d1, 0x3, 0x2, 0x2, 0x2, 0xc0, 
       0x5d5, 0x3, 0x2, 0x2, 0x2, 0xc2, 0x5e2, 0x3, 0x2, 0x2, 0x2, 0xc4, 
       0x5e4, 0x3, 0x2, 0x2, 0x2, 0xc6, 0x5f7, 0x3, 0x2, 0x2, 0x2, 0xc8, 
       0x5f9, 0x3, 0x2, 0x2, 0x2, 0xca, 0x605, 0x3, 0x2, 0x2, 0x2, 0xcc, 
       0x60b, 0x3, 0x2, 0x2, 0x2, 0xce, 0x610, 0x3, 0x2, 0x2, 0x2, 0xd0, 
       0x615, 0x3, 0x2, 0x2, 0x2, 0xd2, 0x617, 0x3, 0x2, 0x2, 0x2, 0xd4, 
       0x61d, 0x3, 0x2, 0x2, 0x2, 0xd6, 0x625, 0x3, 0x2, 0x2, 0x2, 0xd8, 
       0x632, 0x3, 0x2, 0x2, 0x2, 0xda, 0x636, 0x3, 0x2, 0x2, 0x2, 0xdc, 
       0x63c, 0x3, 0x2, 0x2, 0x2, 0xde, 0x64f, 0x3, 0x2, 0x2, 0x2, 0xe0, 
       0x652, 0x3, 0x2, 0x2, 0x2, 0xe2, 0x658, 0x3, 0x2, 0x2, 0x2, 0xe4, 
       0x65b, 0x3, 0x2, 0x2, 0x2, 0xe6, 0x667, 0x3, 0x2, 0x2, 0x2, 0xe8, 
       0x66d, 0x3, 0x2, 0x2, 0x2, 0xea, 0x679, 0x3, 0x2, 0x2, 0x2, 0xec, 
       0x67d, 0x3, 0x2, 0x2, 0x2, 0xee, 0x686, 0x3, 0x2, 0x2, 0x2, 0xf0, 
       0x68f, 0x3, 0x2, 0x2, 0x2, 0xf2, 0x693, 0x3, 0x2, 0x2, 0x2, 0xf4, 
       0x6a2, 0x3, 0x2, 0x2, 0x2, 0xf6, 0x6ab, 0x3, 0x2, 0x2, 0x2, 0xf8, 
       0x6ad, 0x3, 0x2, 0x2, 0x2, 0xfa, 0x6b5, 0x3, 0x2, 0x2, 0x2, 0xfc, 
       0x6b9, 0x3, 0x2, 0x2, 0x2, 0xfe, 0x6c0, 0x3, 0x2, 0x2, 0x2, 0x100, 
       0x6c5, 0x3, 0x2, 0x2, 0x2, 0x102, 0x6cf, 0x3, 0x2, 0x2, 0x2, 0x104, 
       0x6d3, 0x3, 0x2, 0x2, 0x2, 0x106, 0x6e8, 0x3, 0x2, 0x2, 0x2, 0x108, 
       0x6ef, 0x3, 0x2, 0x2, 0x2, 0x10a, 0x6fd, 0x3, 0x2, 0x2, 0x2, 0x10c, 
       0x705, 0x3, 0x2, 0x2, 0x2, 0x10e, 0x709, 0x3, 0x2, 0x2, 0x2, 0x110, 
       0x711, 0x3, 0x2, 0x2, 0x2, 0x112, 0x718, 0x3, 0x2, 0x2, 0x2, 0x114, 
       0x71c, 0x3, 0x2, 0x2, 0x2, 0x116, 0x71e, 0x3, 0x2, 0x2, 0x2, 0x118, 
       0x722, 0x3, 0x2, 0x2, 0x2, 0x11a, 0x72a, 0x3, 0x2, 0x2, 0x2, 0x11c, 
       0x72c, 0x3, 0x2, 0x2, 0x2, 0x11e, 0x73c, 0x3, 0x2, 0x2, 0x2, 0x120, 
       0x746, 0x3, 0x2, 0x2, 0x2, 0x122, 0x749, 0x3, 0x2, 0x2, 0x2, 0x124, 
       0x750, 0x3, 0x2, 0x2, 0x2, 0x126, 0x762, 0x3, 0x2, 0x2, 0x2, 0x128, 
       0x76b, 0x3, 0x2, 0x2, 0x2, 0x12a, 0x77a, 0x3, 0x2, 0x2, 0x2, 0x12c, 
       0x77e, 0x3, 0x2, 0x2, 0x2, 0x12e, 0x781, 0x3, 0x2, 0x2, 0x2, 0x130, 
       0x78e, 0x3, 0x2, 0x2, 0x2, 0x132, 0x794, 0x3, 0x2, 0x2, 0x2, 0x134, 
       0x7af, 0x3, 0x2, 0x2, 0x2, 0x136, 0x7b1, 0x3, 0x2, 0x2, 0x2, 0x138, 
       0x7b8, 0x3, 0x2, 0x2, 0x2, 0x13a, 0x7c2, 0x3, 0x2, 0x2, 0x2, 0x13c, 
       0x7c4, 0x3, 0x2, 0x2, 0x2, 0x13e, 0x7c7, 0x3, 0x2, 0x2, 0x2, 0x140, 
       0x7d1, 0x3, 0x2, 0x2, 0x2, 0x142, 0x7e2, 0x3, 0x2, 0x2, 0x2, 0x144, 
       0x7ee, 0x3, 0x2, 0x2, 0x2, 0x146, 0x7f7, 0x3, 0x2, 0x2, 0x2, 0x148, 
       0x807, 0x3, 0x2, 0x2, 0x2, 0x14a, 0x813, 0x3, 0x2, 0x2, 0x2, 0x14c, 
       0x81a, 0x3, 0x2, 0x2, 0x2, 0x14e, 0x81c, 0x3, 0x2, 0x2, 0x2, 0x150, 
       0x81f, 0x3, 0x2, 0x2, 0x2, 0x152, 0x829, 0x3, 0x2, 0x2, 0x2, 0x154, 
       0x870, 0x3, 0x2, 0x2, 0x2, 0x156, 0x886, 0x3, 0x2, 0x2, 0x2, 0x158, 
       0x889, 0x3, 0x2, 0x2, 0x2, 0x15a, 0x89a, 0x3, 0x2, 0x2, 0x2, 0x15c, 
       0x8a1, 0x3, 0x2, 0x2, 0x2, 0x15e, 0x8ac, 0x3, 0x2, 0x2, 0x2, 0x160, 
       0x8af, 0x3, 0x2, 0x2, 0x2, 0x162, 0x8b3, 0x3, 0x2, 0x2, 0x2, 0x164, 
       0x8c1, 0x3, 0x2, 0x2, 0x2, 0x166, 0x8c3, 0x3, 0x2, 0x2, 0x2, 0x168, 
       0x8cb, 0x3, 0x2, 0x2, 0x2, 0x16a, 0x8dd, 0x3, 0x2, 0x2, 0x2, 0x16c, 
       0x8f0, 0x3, 0x2, 0x2, 0x2, 0x16e, 0x8f2, 0x3, 0x2, 0x2, 0x2, 0x170, 
       0x8fa, 0x3, 0x2, 0x2, 0x2, 0x172, 0x903, 0x3, 0x2, 0x2, 0x2, 0x174, 
       0x905, 0x3, 0x2, 0x2, 0x2, 0x176, 0x927, 0x3, 0x2, 0x2, 0x2, 0x178, 
       0x929, 0x3, 0x2, 0x2, 0x2, 0x17a, 0x92d, 0x3, 0x2, 0x2, 0x2, 0x17c, 
       0x931, 0x3, 0x2, 0x2, 0x2, 0x17e, 0x93d, 0x3, 0x2, 0x2, 0x2, 0x180, 
       0x93f, 0x3, 0x2, 0x2, 0x2, 0x182, 0x945, 0x3, 0x2, 0x2, 0x2, 0x184, 
       0x947, 0x3, 0x2, 0x2, 0x2, 0x186, 0x950, 0x3, 0x2, 0x2, 0x2, 0x188, 
       0x95d, 0x3, 0x2, 0x2, 0x2, 0x18a, 0x963, 0x3, 0x2, 0x2, 0x2, 0x18c, 
       0x965, 0x3, 0x2, 0x2, 0x2, 0x18e, 0x975, 0x3, 0x2, 0x2, 0x2, 0x190, 
       0x977, 0x3, 0x2, 0x2, 0x2, 0x192, 0x987, 0x3, 0x2, 0x2, 0x2, 0x194, 
       0x998, 0x3, 0x2, 0x2, 0x2, 0x196, 0x9a7, 0x3, 0x2, 0x2, 0x2, 0x198, 
       0x9b0, 0x3, 0x2, 0x2, 0x2, 0x19a, 0x9c0, 0x3, 0x2, 0x2, 0x2, 0x19c, 
       0x9cc, 0x3, 0x2, 0x2, 0x2, 0x19e, 0x9cf, 0x3, 0x2, 0x2, 0x2, 0x1a0, 
       0x9df, 0x3, 0x2, 0x2, 0x2, 0x1a2, 0x9e4, 0x3, 0x2, 0x2, 0x2, 0x1a4, 
       0x9f2, 0x3, 0x2, 0x2, 0x2, 0x1a6, 0x9f8, 0x3, 0x2, 0x2, 0x2, 0x1a8, 
       0xa03, 0x3, 0x2, 0x2, 0x2, 0x1aa, 0xa1b, 0x3, 0x2, 0x2, 0x2, 0x1ac, 
       0xa27, 0x3, 0x2, 0x2, 0x2, 0x1ae, 0xa3d, 0x3, 0x2, 0x2, 0x2, 0x1b0, 
       0xa43, 0x3, 0x2, 0x2, 0x2, 0x1b2, 0xa49, 0x3, 0x2, 0x2, 0x2, 0x1b4, 
       0xa51, 0x3, 0x2, 0x2, 0x2, 0x1b6, 0x1b8, 0x7, 0x3, 0x2, 0x2, 0x1b7, 
       0x1b6, 0x3, 0x2, 0x2, 0x2, 0x1b7, 0x1b8, 0x3, 0x2, 0x2, 0x2, 0x1b8, 
       0x1ba, 0x3, 0x2, 0x2, 0x2, 0x1b9, 0x1bb, 0x5, 0xd8, 0x6d, 0x2, 0x1ba, 
       0x1b9, 0x3, 0x2, 0x2, 0x2, 0x1ba, 0x1bb, 0x3, 0x2, 0x2, 0x2, 0x1bb, 
       0x1bd, 0x3, 0x2, 0x2, 0x2, 0x1bc, 0x1be, 0x5, 0xdc, 0x6f, 0x2, 0x1bd, 
       0x1bc, 0x3, 0x2, 0x2, 0x2, 0x1bd, 0x1be, 0x3, 0x2, 0x2, 0x2, 0x1be, 
       0x1c2, 0x3, 0x2, 0x2, 0x2, 0x1bf, 0x1c1, 0x5, 0x15c, 0xaf, 0x2, 0x1c0, 
       0x1bf, 0x3, 0x2, 0x2, 0x2, 0x1c1, 0x1c4, 0x3, 0x2, 0x2, 0x2, 0x1c2, 
       0x1c0, 0x3, 0x2, 0x2, 0x2, 0x1c2, 0x1c3, 0x3, 0x2, 0x2, 0x2, 0x1c3, 
       0x1c6, 0x3, 0x2, 0x2, 0x2, 0x1c4, 0x1c2, 0x3, 0x2, 0x2, 0x2, 0x1c5, 
       0x1c7, 0x5, 0xe0, 0x71, 0x2, 0x1c6, 0x1c5, 0x3, 0x2, 0x2, 0x2, 0x1c6, 
       0x1c7, 0x3, 0x2, 0x2, 0x2, 0x1c7, 0x1c8, 0x3, 0x2, 0x2, 0x2, 0x1c8, 
       0x1c9, 0x7, 0x2, 0x2, 0x3, 0x1c9, 0x3, 0x3, 0x2, 0x2, 0x2, 0x1ca, 
       0x1cc, 0x5, 0x1b4, 0xdb, 0x2, 0x1cb, 0x1cd, 0x5, 0x18, 0xd, 0x2, 
       0x1cc, 0x1cb, 0x3, 0x2, 0x2, 0x2, 0x1cc, 0x1cd, 0x3, 0x2, 0x2, 0x2, 
       0x1cd, 0x1d0, 0x3, 0x2, 0x2, 0x2, 0x1ce, 0x1d0, 0x5, 0xe6, 0x74, 
       0x2, 0x1cf, 0x1ca, 0x3, 0x2, 0x2, 0x2, 0x1cf, 0x1ce, 0x3, 0x2, 0x2, 
       0x2, 0x1d0, 0x1d8, 0x3, 0x2, 0x2, 0x2, 0x1d1, 0x1d2, 0x7, 0x85, 0x2, 
       0x2, 0x1d2, 0x1d4, 0x5, 0x1b4, 0xdb, 0x2, 0x1d3, 0x1d5, 0x5, 0x18, 
       0xd, 0x2, 0x1d4, 0x1d3, 0x3, 0x2, 0x2, 0x2, 0x1d4, 0x1d5, 0x3, 0x2, 
       0x2, 0x2, 0x1d5, 0x1d7, 0x3, 0x2, 0x2, 0x2, 0x1d6, 0x1d1, 0x3, 0x2, 
       0x2, 0x2, 0x1d7, 0x1da, 0x3, 0x2, 0x2, 0x2, 0x1d8, 0x1d6, 0x3, 0x2, 
       0x2, 0x2, 0x1d8, 0x1d9, 0x3, 0x2, 0x2, 0x2, 0x1d9, 0x5, 0x3, 0x2, 
       0x2, 0x2, 0x1da, 0x1d8, 0x3, 0x2, 0x2, 0x2, 0x1db, 0x1e1, 0x5, 0x8, 
       0x5, 0x2, 0x1dc, 0x1e0, 0x7, 0x96, 0x2, 0x2, 0x1dd, 0x1e0, 0x5, 0x144, 
       0xa3, 0x2, 0x1de, 0x1e0, 0x7, 0x8b, 0x2, 0x2, 0x1df, 0x1dc, 0x3, 
       0x2, 0x2, 0x2, 0x1df, 0x1dd, 0x3, 0x2, 0x2, 0x2, 0x1df, 0x1de, 0x3, 
       0x2, 0x2, 0x2, 0x1e0, 0x1e3, 0x3, 0x2, 0x2, 0x2, 0x1e1, 0x1df, 0x3, 
       0x2, 0x2, 0x2, 0x1e1, 0x1e2, 0x3, 0x2, 0x2, 0x2, 0x1e2, 0x7, 0x3, 
       0x2, 0x2, 0x2, 0x1e3, 0x1e1, 0x3, 0x2, 0x2, 0x2, 0x1e4, 0x1ea, 0x5, 
       0xe, 0x8, 0x2, 0x1e5, 0x1ea, 0x5, 0x16, 0xc, 0x2, 0x1e6, 0x1e7, 0x7, 
       0x6e, 0x2, 0x2, 0x1e7, 0x1ea, 0x7, 0x8b, 0x2, 0x2, 0x1e8, 0x1ea, 
       0x5, 0xa, 0x6, 0x2, 0x1e9, 0x1e4, 0x3, 0x2, 0x2, 0x2, 0x1e9, 0x1e5, 
       0x3, 0x2, 0x2, 0x2, 0x1e9, 0x1e6, 0x3, 0x2, 0x2, 0x2, 0x1e9, 0x1e8, 
       0x3, 0x2, 0x2, 0x2, 0x1ea, 0x9, 0x3, 0x2, 0x2, 0x2, 0x1eb, 0x1ec, 
       0x7, 0x83, 0x2, 0x2, 0x1ec, 0x1ef, 0x5, 0xc, 0x7, 0x2, 0x1ed, 0x1ee, 
       0x7, 0x86, 0x2, 0x2, 0x1ee, 0x1f0, 0x5, 0xc, 0x7, 0x2, 0x1ef, 0x1ed, 
       0x3, 0x2, 0x2, 0x2, 0x1f0, 0x1f1, 0x3, 0x2, 0x2, 0x2, 0x1f1, 0x1ef, 
       0x3, 0x2, 0x2, 0x2, 0x1f1, 0x1f2, 0x3, 0x2, 0x2, 0x2, 0x1f2, 0x1f3, 
       0x3, 0x2, 0x2, 0x2, 0x1f3, 0x1f4, 0x7, 0x84, 0x2, 0x2, 0x1f4, 0xb, 
       0x3, 0x2, 0x2, 0x2, 0x1f5, 0x1f7, 0x5, 0x6, 0x4, 0x2, 0x1f6, 0x1f8, 
       0x5, 0x1b4, 0xdb, 0x2, 0x1f7, 0x1f6, 0x3, 0x2, 0x2, 0x2, 0x1f7, 0x1f8, 
       0x3, 0x2, 0x2, 0x2, 0x1f8, 0xd, 0x3, 0x2, 0x2, 0x2, 0x1f9, 0x1fc, 
       0x5, 0x10, 0x9, 0x2, 0x1fa, 0x1fc, 0x7, 0x14, 0x2, 0x2, 0x1fb, 0x1f9, 
       0x3, 0x2, 0x2, 0x2, 0x1fb, 0x1fa, 0x3, 0x2, 0x2, 0x2, 0x1fc, 0xf, 
       0x3, 0x2, 0x2, 0x2, 0x1fd, 0x201, 0x5, 0x12, 0xa, 0x2, 0x1fe, 0x201, 
       0x5, 0x14, 0xb, 0x2, 0x1ff, 0x201, 0x7, 0x1f, 0x2, 0x2, 0x200, 0x1fd, 
       0x3, 0x2, 0x2, 0x2, 0x200, 0x1fe, 0x3, 0x2, 0x2, 0x2, 0x200, 0x1ff, 
       0x3, 0x2, 0x2, 0x2, 0x201, 0x11, 0x3, 0x2, 0x2, 0x2, 0x202, 0x203, 
       0x9, 0x2, 0x2, 0x2, 0x203, 0x13, 0x3, 0x2, 0x2, 0x2, 0x204, 0x205, 
       0x9, 0x3, 0x2, 0x2, 0x205, 0x15, 0x3, 0x2, 0x2, 0x2, 0x206, 0x20b, 
       0x5, 0x4, 0x3, 0x2, 0x207, 0x20b, 0x7, 0x46, 0x2, 0x2, 0x208, 0x20b, 
       0x7, 0x25, 0x2, 0x2, 0x209, 0x20b, 0x7, 0x5d, 0x2, 0x2, 0x20a, 0x206, 
       0x3, 0x2, 0x2, 0x2, 0x20a, 0x207, 0x3, 0x2, 0x2, 0x2, 0x20a, 0x208, 
       0x3, 0x2, 0x2, 0x2, 0x20a, 0x209, 0x3, 0x2, 0x2, 0x2, 0x20b, 0x17, 
       0x3, 0x2, 0x2, 0x2, 0x20c, 0x20d, 0x7, 0x94, 0x2, 0x2, 0x20d, 0x212, 
       0x5, 0x6, 0x4, 0x2, 0x20e, 0x20f, 0x7, 0x86, 0x2, 0x2, 0x20f, 0x211, 
       0x5, 0x6, 0x4, 0x2, 0x210, 0x20e, 0x3, 0x2, 0x2, 0x2, 0x211, 0x214, 
       0x3, 0x2, 0x2, 0x2, 0x212, 0x210, 0x3, 0x2, 0x2, 0x2, 0x212, 0x213, 
       0x3, 0x2, 0x2, 0x2, 0x213, 0x215, 0x3, 0x2, 0x2, 0x2, 0x214, 0x212, 
       0x3, 0x2, 0x2, 0x2, 0x215, 0x216, 0x7, 0x95, 0x2, 0x2, 0x216, 0x19, 
       0x3, 0x2, 0x2, 0x2, 0x217, 0x21c, 0x5, 0x1c, 0xf, 0x2, 0x218, 0x219, 
       0x7, 0x86, 0x2, 0x2, 0x219, 0x21b, 0x5, 0x1c, 0xf, 0x2, 0x21a, 0x218, 
       0x3, 0x2, 0x2, 0x2, 0x21b, 0x21e, 0x3, 0x2, 0x2, 0x2, 0x21c, 0x21a, 
       0x3, 0x2, 0x2, 0x2, 0x21c, 0x21d, 0x3, 0x2, 0x2, 0x2, 0x21d, 0x1b, 
       0x3, 0x2, 0x2, 0x2, 0x21e, 0x21c, 0x3, 0x2, 0x2, 0x2, 0x21f, 0x220, 
       0x5, 0x1b4, 0xdb, 0x2, 0x220, 0x221, 0x7, 0x87, 0x2, 0x2, 0x221, 
       0x223, 0x3, 0x2, 0x2, 0x2, 0x222, 0x21f, 0x3, 0x2, 0x2, 0x2, 0x222, 
       0x223, 0x3, 0x2, 0x2, 0x2, 0x223, 0x225, 0x3, 0x2, 0x2, 0x2, 0x224, 
       0x226, 0x9, 0x4, 0x2, 0x2, 0x225, 0x224, 0x3, 0x2, 0x2, 0x2, 0x225, 
       0x226, 0x3, 0x2, 0x2, 0x2, 0x226, 0x229, 0x3, 0x2, 0x2, 0x2, 0x227, 
       0x22a, 0x7, 0x6c, 0x2, 0x2, 0x228, 0x22a, 0x5, 0x6, 0x4, 0x2, 0x229, 
       0x227, 0x3, 0x2, 0x2, 0x2, 0x229, 0x228, 0x3, 0x2, 0x2, 0x2, 0x229, 
       0x22a, 0x3, 0x2, 0x2, 0x2, 0x22a, 0x22b, 0x3, 0x2, 0x2, 0x2, 0x22b, 
       0x22c, 0x5, 0x1e, 0x10, 0x2, 0x22c, 0x1d, 0x3, 0x2, 0x2, 0x2, 0x22d, 
       0x232, 0x5, 0x22, 0x12, 0x2, 0x22e, 0x232, 0x5, 0x20, 0x11, 0x2, 
       0x22f, 0x230, 0x7, 0x52, 0x2, 0x2, 0x230, 0x232, 0x5, 0x20, 0x11, 
       0x2, 0x231, 0x22d, 0x3, 0x2, 0x2, 0x2, 0x231, 0x22e, 0x3, 0x2, 0x2, 
       0x2, 0x231, 0x22f, 0x3, 0x2, 0x2, 0x2, 0x232, 0x1f, 0x3, 0x2, 0x2, 
       0x2, 0x233, 0x237, 0x5, 0x78, 0x3d, 0x2, 0x234, 0x237, 0x5, 0x84, 
       0x43, 0x2, 0x235, 0x237, 0x5, 0x26, 0x14, 0x2, 0x236, 0x233, 0x3, 
       0x2, 0x2, 0x2, 0x236, 0x234, 0x3, 0x2, 0x2, 0x2, 0x236, 0x235, 0x3, 
       0x2, 0x2, 0x2, 0x237, 0x21, 0x3, 0x2, 0x2, 0x2, 0x238, 0x239, 0x5, 
       0x46, 0x24, 0x2, 0x239, 0x23a, 0x5, 0x24, 0x13, 0x2, 0x23a, 0x23b, 
       0x5, 0x1e, 0x10, 0x2, 0x23b, 0x241, 0x3, 0x2, 0x2, 0x2, 0x23c, 0x23d, 
       0x5, 0x46, 0x24, 0x2, 0x23d, 0x23e, 0x7, 0xac, 0x2, 0x2, 0x23e, 0x23f, 
       0x5, 0x4c, 0x27, 0x2, 0x23f, 0x241, 0x3, 0x2, 0x2, 0x2, 0x240, 0x238, 
       0x3, 0x2, 0x2, 0x2, 0x240, 0x23c, 0x3, 0x2, 0x2, 0x2, 0x241, 0x23, 
       0x3, 0x2, 0x2, 0x2, 0x242, 0x24e, 0x7, 0x93, 0x2, 0x2, 0x243, 0x24e, 
       0x7, 0xa2, 0x2, 0x2, 0x244, 0x24e, 0x7, 0xa3, 0x2, 0x2, 0x245, 0x24e, 
       0x7, 0xa4, 0x2, 0x2, 0x246, 0x24e, 0x7, 0xa5, 0x2, 0x2, 0x247, 0x24e, 
       0x7, 0xa6, 0x2, 0x2, 0x248, 0x24e, 0x7, 0xa7, 0x2, 0x2, 0x249, 0x24e, 
       0x7, 0xa8, 0x2, 0x2, 0x24a, 0x24e, 0x7, 0xa9, 0x2, 0x2, 0x24b, 0x24e, 
       0x7, 0xab, 0x2, 0x2, 0x24c, 0x24e, 0x5, 0x17c, 0xbf, 0x2, 0x24d, 
       0x242, 0x3, 0x2, 0x2, 0x2, 0x24d, 0x243, 0x3, 0x2, 0x2, 0x2, 0x24d, 
       0x244, 0x3, 0x2, 0x2, 0x2, 0x24d, 0x245, 0x3, 0x2, 0x2, 0x2, 0x24d, 
       0x246, 0x3, 0x2, 0x2, 0x2, 0x24d, 0x247, 0x3, 0x2, 0x2, 0x2, 0x24d, 
       0x248, 0x3, 0x2, 0x2, 0x2, 0x24d, 0x249, 0x3, 0x2, 0x2, 0x2, 0x24d, 
       0x24a, 0x3, 0x2, 0x2, 0x2, 0x24d, 0x24b, 0x3, 0x2, 0x2, 0x2, 0x24d, 
       0x24c, 0x3, 0x2, 0x2, 0x2, 0x24e, 0x25, 0x3, 0x2, 0x2, 0x2, 0x24f, 
       0x255, 0x5, 0x28, 0x15, 0x2, 0x250, 0x251, 0x7, 0x96, 0x2, 0x2, 0x251, 
       0x252, 0x5, 0x4c, 0x27, 0x2, 0x252, 0x253, 0x7, 0x87, 0x2, 0x2, 0x253, 
       0x254, 0x5, 0x4c, 0x27, 0x2, 0x254, 0x256, 0x3, 0x2, 0x2, 0x2, 0x255, 
       0x250, 0x3, 0x2, 0x2, 0x2, 0x255, 0x256, 0x3, 0x2, 0x2, 0x2, 0x256, 
       0x27, 0x3, 0x2, 0x2, 0x2, 0x257, 0x25d, 0x5, 0x2a, 0x16, 0x2, 0x258, 
       0x25b, 0x7, 0x98, 0x2, 0x2, 0x259, 0x25c, 0x5, 0x28, 0x15, 0x2, 0x25a, 
       0x25c, 0x5, 0x4e, 0x28, 0x2, 0x25b, 0x259, 0x3, 0x2, 0x2, 0x2, 0x25b, 
       0x25a, 0x3, 0x2, 0x2, 0x2, 0x25c, 0x25e, 0x3, 0x2, 0x2, 0x2, 0x25d, 
       0x258, 0x3, 0x2, 0x2, 0x2, 0x25d, 0x25e, 0x3, 0x2, 0x2, 0x2, 0x25e, 
       0x29, 0x3, 0x2, 0x2, 0x2, 0x25f, 0x264, 0x5, 0x2c, 0x17, 0x2, 0x260, 
       0x261, 0x7, 0x9c, 0x2, 0x2, 0x261, 0x263, 0x5, 0x2c, 0x17, 0x2, 0x262, 
       0x260, 0x3, 0x2, 0x2, 0x2, 0x263, 0x266, 0x3, 0x2, 0x2, 0x2, 0x264, 
       0x262, 0x3, 0x2, 0x2, 0x2, 0x264, 0x265, 0x3, 0x2, 0x2, 0x2, 0x265, 
       0x2b, 0x3, 0x2, 0x2, 0x2, 0x266, 0x264, 0x3, 0x2, 0x2, 0x2, 0x267, 
       0x26c, 0x5, 0x2e, 0x18, 0x2, 0x268, 0x269, 0x7, 0x9b, 0x2, 0x2, 0x269, 
       0x26b, 0x5, 0x2e, 0x18, 0x2, 0x26a, 0x268, 0x3, 0x2, 0x2, 0x2, 0x26b, 
       0x26e, 0x3, 0x2, 0x2, 0x2, 0x26c, 0x26a, 0x3, 0x2, 0x2, 0x2, 0x26c, 
       0x26d, 0x3, 0x2, 0x2, 0x2, 0x26d, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x26e, 
       0x26c, 0x3, 0x2, 0x2, 0x2, 0x26f, 0x274, 0x5, 0x30, 0x19, 0x2, 0x270, 
       0x271, 0x7, 0x8f, 0x2, 0x2, 0x271, 0x273, 0x5, 0x30, 0x19, 0x2, 0x272, 
       0x270, 0x3, 0x2, 0x2, 0x2, 0x273, 0x276, 0x3, 0x2, 0x2, 0x2, 0x274, 
       0x272, 0x3, 0x2, 0x2, 0x2, 0x274, 0x275, 0x3, 0x2, 0x2, 0x2, 0x275, 
       0x2f, 0x3, 0x2, 0x2, 0x2, 0x276, 0x274, 0x3, 0x2, 0x2, 0x2, 0x277, 
       0x27c, 0x5, 0x32, 0x1a, 0x2, 0x278, 0x279, 0x7, 0x90, 0x2, 0x2, 0x279, 
       0x27b, 0x5, 0x32, 0x1a, 0x2, 0x27a, 0x278, 0x3, 0x2, 0x2, 0x2, 0x27b, 
       0x27e, 0x3, 0x2, 0x2, 0x2, 0x27c, 0x27a, 0x3, 0x2, 0x2, 0x2, 0x27c, 
       0x27d, 0x3, 0x2, 0x2, 0x2, 0x27d, 0x31, 0x3, 0x2, 0x2, 0x2, 0x27e, 
       0x27c, 0x3, 0x2, 0x2, 0x2, 0x27f, 0x284, 0x5, 0x34, 0x1b, 0x2, 0x280, 
       0x281, 0x7, 0x8e, 0x2, 0x2, 0x281, 0x283, 0x5, 0x34, 0x1b, 0x2, 0x282, 
       0x280, 0x3, 0x2, 0x2, 0x2, 0x283, 0x286, 0x3, 0x2, 0x2, 0x2, 0x284, 
       0x282, 0x3, 0x2, 0x2, 0x2, 0x284, 0x285, 0x3, 0x2, 0x2, 0x2, 0x285, 
       0x33, 0x3, 0x2, 0x2, 0x2, 0x286, 0x284, 0x3, 0x2, 0x2, 0x2, 0x287, 
       0x28c, 0x5, 0x36, 0x1c, 0x2, 0x288, 0x289, 0x9, 0x5, 0x2, 0x2, 0x289, 
       0x28b, 0x5, 0x36, 0x1c, 0x2, 0x28a, 0x288, 0x3, 0x2, 0x2, 0x2, 0x28b, 
       0x28e, 0x3, 0x2, 0x2, 0x2, 0x28c, 0x28a, 0x3, 0x2, 0x2, 0x2, 0x28c, 
       0x28d, 0x3, 0x2, 0x2, 0x2, 0x28d, 0x35, 0x3, 0x2, 0x2, 0x2, 0x28e, 
       0x28c, 0x3, 0x2, 0x2, 0x2, 0x28f, 0x298, 0x5, 0x38, 0x1d, 0x2, 0x290, 
       0x291, 0x9, 0x6, 0x2, 0x2, 0x291, 0x297, 0x5, 0x38, 0x1d, 0x2, 0x292, 
       0x293, 0x7, 0x3d, 0x2, 0x2, 0x293, 0x297, 0x5, 0x72, 0x3a, 0x2, 0x294, 
       0x295, 0x7, 0xf, 0x2, 0x2, 0x295, 0x297, 0x5, 0x6, 0x4, 0x2, 0x296, 
       0x290, 0x3, 0x2, 0x2, 0x2, 0x296, 0x292, 0x3, 0x2, 0x2, 0x2, 0x296, 
       0x294, 0x3, 0x2, 0x2, 0x2, 0x297, 0x29a, 0x3, 0x2, 0x2, 0x2, 0x298, 
       0x296, 0x3, 0x2, 0x2, 0x2, 0x298, 0x299, 0x3, 0x2, 0x2, 0x2, 0x299, 
       0x37, 0x3, 0x2, 0x2, 0x2, 0x29a, 0x298, 0x3, 0x2, 0x2, 0x2, 0x29b, 
       0x2a3, 0x5, 0x3a, 0x1e, 0x2, 0x29c, 0x29f, 0x7, 0xaa, 0x2, 0x2, 0x29d, 
       0x29f, 0x5, 0x17a, 0xbe, 0x2, 0x29e, 0x29c, 0x3, 0x2, 0x2, 0x2, 0x29e, 
       0x29d, 0x3, 0x2, 0x2, 0x2, 0x29f, 0x2a0, 0x3, 0x2, 0x2, 0x2, 0x2a0, 
       0x2a2, 0x5, 0x3a, 0x1e, 0x2, 0x2a1, 0x29e, 0x3, 0x2, 0x2, 0x2, 0x2a2, 
       0x2a5, 0x3, 0x2, 0x2, 0x2, 0x2a3, 0x2a1, 0x3, 0x2, 0x2, 0x2, 0x2a3, 
       0x2a4, 0x3, 0x2, 0x2, 0x2, 0x2a4, 0x39, 0x3, 0x2, 0x2, 0x2, 0x2a5, 
       0x2a3, 0x3, 0x2, 0x2, 0x2, 0x2a6, 0x2ab, 0x5, 0x3c, 0x1f, 0x2, 0x2a7, 
       0x2a8, 0x9, 0x7, 0x2, 0x2, 0x2a8, 0x2aa, 0x5, 0x3c, 0x1f, 0x2, 0x2a9, 
       0x2a7, 0x3, 0x2, 0x2, 0x2, 0x2aa, 0x2ad, 0x3, 0x2, 0x2, 0x2, 0x2ab, 
       0x2a9, 0x3, 0x2, 0x2, 0x2, 0x2ab, 0x2ac, 0x3, 0x2, 0x2, 0x2, 0x2ac, 
       0x3b, 0x3, 0x2, 0x2, 0x2, 0x2ad, 0x2ab, 0x3, 0x2, 0x2, 0x2, 0x2ae, 
       0x2b3, 0x5, 0x3e, 0x20, 0x2, 0x2af, 0x2b0, 0x9, 0x8, 0x2, 0x2, 0x2b0, 
       0x2b2, 0x5, 0x3e, 0x20, 0x2, 0x2b1, 0x2af, 0x3, 0x2, 0x2, 0x2, 0x2b2, 
       0x2b5, 0x3, 0x2, 0x2, 0x2, 0x2b3, 0x2b1, 0x3, 0x2, 0x2, 0x2, 0x2b3, 
       0x2b4, 0x3, 0x2, 0x2, 0x2, 0x2b4, 0x3d, 0x3, 0x2, 0x2, 0x2, 0x2b5, 
       0x2b3, 0x3, 0x2, 0x2, 0x2, 0x2b6, 0x2c0, 0x5, 0x44, 0x23, 0x2, 0x2b7, 
       0x2b8, 0x7, 0x5f, 0x2, 0x2, 0x2b8, 0x2bd, 0x7, 0x7f, 0x2, 0x2, 0x2b9, 
       0x2bb, 0x5, 0x40, 0x21, 0x2, 0x2ba, 0x2bc, 0x7, 0x86, 0x2, 0x2, 0x2bb, 
       0x2ba, 0x3, 0x2, 0x2, 0x2, 0x2bb, 0x2bc, 0x3, 0x2, 0x2, 0x2, 0x2bc, 
       0x2be, 0x3, 0x2, 0x2, 0x2, 0x2bd, 0x2b9, 0x3, 0x2, 0x2, 0x2, 0x2bd, 
       0x2be, 0x3, 0x2, 0x2, 0x2, 0x2be, 0x2bf, 0x3, 0x2, 0x2, 0x2, 0x2bf, 
       0x2c1, 0x7, 0x80, 0x2, 0x2, 0x2c0, 0x2b7, 0x3, 0x2, 0x2, 0x2, 0x2c0, 
       0x2c1, 0x3, 0x2, 0x2, 0x2, 0x2c1, 0x3f, 0x3, 0x2, 0x2, 0x2, 0x2c2, 
       0x2c7, 0x5, 0x42, 0x22, 0x2, 0x2c3, 0x2c4, 0x7, 0x86, 0x2, 0x2, 0x2c4, 
       0x2c6, 0x5, 0x42, 0x22, 0x2, 0x2c5, 0x2c3, 0x3, 0x2, 0x2, 0x2, 0x2c6, 
       0x2c9, 0x3, 0x2, 0x2, 0x2, 0x2c7, 0x2c5, 0x3, 0x2, 0x2, 0x2, 0x2c7, 
       0x2c8, 0x3, 0x2, 0x2, 0x2, 0x2c8, 0x41, 0x3, 0x2, 0x2, 0x2, 0x2c9, 
       0x2c7, 0x3, 0x2, 0x2, 0x2, 0x2ca, 0x2cc, 0x5, 0x1e, 0x10, 0x2, 0x2cb, 
       0x2cd, 0x5, 0xbe, 0x60, 0x2, 0x2cc, 0x2cb, 0x3, 0x2, 0x2, 0x2, 0x2cc, 
       0x2cd, 0x3, 0x2, 0x2, 0x2, 0x2cd, 0x2ce, 0x3, 0x2, 0x2, 0x2, 0x2ce, 
       0x2cf, 0x5, 0x178, 0xbd, 0x2, 0x2cf, 0x2d0, 0x5, 0x4c, 0x27, 0x2, 
       0x2d0, 0x43, 0x3, 0x2, 0x2, 0x2, 0x2d1, 0x2da, 0x5, 0x46, 0x24, 0x2, 
       0x2d2, 0x2d4, 0x5, 0x46, 0x24, 0x2, 0x2d3, 0x2d2, 0x3, 0x2, 0x2, 
       0x2, 0x2d3, 0x2d4, 0x3, 0x2, 0x2, 0x2, 0x2d4, 0x2d5, 0x3, 0x2, 0x2, 
       0x2, 0x2d5, 0x2d7, 0x7, 0xad, 0x2, 0x2, 0x2d6, 0x2d8, 0x5, 0x46, 
       0x24, 0x2, 0x2d7, 0x2d6, 0x3, 0x2, 0x2, 0x2, 0x2d7, 0x2d8, 0x3, 0x2, 
       0x2, 0x2, 0x2d8, 0x2da, 0x3, 0x2, 0x2, 0x2, 0x2d9, 0x2d1, 0x3, 0x2, 
       0x2, 0x2, 0x2d9, 0x2d3, 0x3, 0x2, 0x2, 0x2, 0x2da, 0x45, 0x3, 0x2, 
       0x2, 0x2, 0x2db, 0x2f6, 0x5, 0x48, 0x25, 0x2, 0x2dc, 0x2dd, 0x7, 
       0x89, 0x2, 0x2, 0x2dd, 0x2f6, 0x5, 0x46, 0x24, 0x2, 0x2de, 0x2df, 
       0x7, 0x8a, 0x2, 0x2, 0x2df, 0x2f6, 0x5, 0x46, 0x24, 0x2, 0x2e0, 0x2e1, 
       0x7, 0x91, 0x2, 0x2, 0x2e1, 0x2f6, 0x5, 0x46, 0x24, 0x2, 0x2e2, 0x2e3, 
       0x7, 0x92, 0x2, 0x2, 0x2e3, 0x2f6, 0x5, 0x46, 0x24, 0x2, 0x2e4, 0x2e5, 
       0x7, 0x99, 0x2, 0x2, 0x2e5, 0x2f6, 0x5, 0x46, 0x24, 0x2, 0x2e6, 0x2e7, 
       0x7, 0x9a, 0x2, 0x2, 0x2e7, 0x2f6, 0x5, 0x46, 0x24, 0x2, 0x2e8, 0x2e9, 
       0x7, 0x83, 0x2, 0x2, 0x2e9, 0x2ea, 0x5, 0x6, 0x4, 0x2, 0x2ea, 0x2eb, 
       0x7, 0x84, 0x2, 0x2, 0x2eb, 0x2ec, 0x5, 0x46, 0x24, 0x2, 0x2ec, 0x2f6, 
       0x3, 0x2, 0x2, 0x2, 0x2ed, 0x2ee, 0x7, 0x12, 0x2, 0x2, 0x2ee, 0x2f6, 
       0x5, 0x46, 0x24, 0x2, 0x2ef, 0x2f0, 0x7, 0x8e, 0x2, 0x2, 0x2f0, 0x2f6, 
       0x5, 0x46, 0x24, 0x2, 0x2f1, 0x2f2, 0x7, 0x8b, 0x2, 0x2, 0x2f2, 0x2f6, 
       0x5, 0x46, 0x24, 0x2, 0x2f3, 0x2f4, 0x7, 0x90, 0x2, 0x2, 0x2f4, 0x2f6, 
       0x5, 0x46, 0x24, 0x2, 0x2f5, 0x2db, 0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2dc, 
       0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2de, 0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2e0, 
       0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2e2, 0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2e4, 
       0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2e6, 0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2e8, 
       0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2ed, 0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2ef, 
       0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2f1, 0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2f3, 
       0x3, 0x2, 0x2, 0x2, 0x2f6, 0x47, 0x3, 0x2, 0x2, 0x2, 0x2f7, 0x2f9, 
       0x5, 0x4a, 0x26, 0x2, 0x2f8, 0x2fa, 0x7, 0x91, 0x2, 0x2, 0x2f9, 0x2f8, 
       0x3, 0x2, 0x2, 0x2, 0x2f9, 0x2fa, 0x3, 0x2, 0x2, 0x2, 0x2fa, 0x2fe, 
       0x3, 0x2, 0x2, 0x2, 0x2fb, 0x2fd, 0x5, 0x52, 0x2a, 0x2, 0x2fc, 0x2fb, 
       0x3, 0x2, 0x2, 0x2, 0x2fd, 0x300, 0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2fc, 
       0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2ff, 0x3, 0x2, 0x2, 0x2, 0x2ff, 0x302, 
       0x3, 0x2, 0x2, 0x2, 0x300, 0x2fe, 0x3, 0x2, 0x2, 0x2, 0x301, 0x303, 
       0x7, 0x91, 0x2, 0x2, 0x302, 0x301, 0x3, 0x2, 0x2, 0x2, 0x302, 0x303, 
       0x3, 0x2, 0x2, 0x2, 0x303, 0x31a, 0x3, 0x2, 0x2, 0x2, 0x304, 0x30b, 
       0x5, 0x50, 0x29, 0x2, 0x305, 0x30b, 0x5, 0x1b0, 0xd9, 0x2, 0x306, 
       0x30b, 0x7, 0x99, 0x2, 0x2, 0x307, 0x30b, 0x7, 0x9a, 0x2, 0x2, 0x308, 
       0x309, 0x7, 0x9d, 0x2, 0x2, 0x309, 0x30b, 0x5, 0x1b4, 0xdb, 0x2, 
       0x30a, 0x304, 0x3, 0x2, 0x2, 0x2, 0x30a, 0x305, 0x3, 0x2, 0x2, 0x2, 
       0x30a, 0x306, 0x3, 0x2, 0x2, 0x2, 0x30a, 0x307, 0x3, 0x2, 0x2, 0x2, 
       0x30a, 0x308, 0x3, 0x2, 0x2, 0x2, 0x30b, 0x30d, 0x3, 0x2, 0x2, 0x2, 
       0x30c, 0x30e, 0x7, 0x91, 0x2, 0x2, 0x30d, 0x30c, 0x3, 0x2, 0x2, 0x2, 
       0x30d, 0x30e, 0x3, 0x2, 0x2, 0x2, 0x30e, 0x312, 0x3, 0x2, 0x2, 0x2, 
       0x30f, 0x311, 0x5, 0x52, 0x2a, 0x2, 0x310, 0x30f, 0x3, 0x2, 0x2, 
       0x2, 0x311, 0x314, 0x3, 0x2, 0x2, 0x2, 0x312, 0x310, 0x3, 0x2, 0x2, 
       0x2, 0x312, 0x313, 0x3, 0x2, 0x2, 0x2, 0x313, 0x316, 0x3, 0x2, 0x2, 
       0x2, 0x314, 0x312, 0x3, 0x2, 0x2, 0x2, 0x315, 0x317, 0x7, 0x91, 0x2, 
       0x2, 0x316, 0x315, 0x3, 0x2, 0x2, 0x2, 0x316, 0x317, 0x3, 0x2, 0x2, 
       0x2, 0x317, 0x319, 0x3, 0x2, 0x2, 0x2, 0x318, 0x30a, 0x3, 0x2, 0x2, 
       0x2, 0x319, 0x31c, 0x3, 0x2, 0x2, 0x2, 0x31a, 0x318, 0x3, 0x2, 0x2, 
       0x2, 0x31a, 0x31b, 0x3, 0x2, 0x2, 0x2, 0x31b, 0x49, 0x3, 0x2, 0x2, 
       0x2, 0x31c, 0x31a, 0x3, 0x2, 0x2, 0x2, 0x31d, 0x397, 0x5, 0x17e, 
       0xc0, 0x2, 0x31e, 0x320, 0x5, 0x1b4, 0xdb, 0x2, 0x31f, 0x321, 0x5, 
       0x18, 0xd, 0x2, 0x320, 0x31f, 0x3, 0x2, 0x2, 0x2, 0x320, 0x321, 0x3, 
       0x2, 0x2, 0x2, 0x321, 0x397, 0x3, 0x2, 0x2, 0x2, 0x322, 0x323, 0x7, 
       0x83, 0x2, 0x2, 0x323, 0x324, 0x5, 0x1e, 0x10, 0x2, 0x324, 0x325, 
       0x7, 0x84, 0x2, 0x2, 0x325, 0x397, 0x3, 0x2, 0x2, 0x2, 0x326, 0x397, 
       0x5, 0x56, 0x2c, 0x2, 0x327, 0x397, 0x5, 0xe6, 0x74, 0x2, 0x328, 
       0x397, 0x7, 0x75, 0x2, 0x2, 0x329, 0x397, 0x7, 0x60, 0x2, 0x2, 0x32a, 
       0x334, 0x7, 0x13, 0x2, 0x2, 0x32b, 0x32c, 0x7, 0x85, 0x2, 0x2, 0x32c, 
       0x32e, 0x5, 0x1b4, 0xdb, 0x2, 0x32d, 0x32f, 0x5, 0x18, 0xd, 0x2, 
       0x32e, 0x32d, 0x3, 0x2, 0x2, 0x2, 0x32e, 0x32f, 0x3, 0x2, 0x2, 0x2, 
       0x32f, 0x335, 0x3, 0x2, 0x2, 0x2, 0x330, 0x331, 0x7, 0x81, 0x2, 0x2, 
       0x331, 0x332, 0x5, 0x58, 0x2d, 0x2, 0x332, 0x333, 0x7, 0x82, 0x2, 
       0x2, 0x333, 0x335, 0x3, 0x2, 0x2, 0x2, 0x334, 0x32b, 0x3, 0x2, 0x2, 
       0x2, 0x334, 0x330, 0x3, 0x2, 0x2, 0x2, 0x335, 0x397, 0x3, 0x2, 0x2, 
       0x2, 0x336, 0x353, 0x7, 0x44, 0x2, 0x2, 0x337, 0x34d, 0x5, 0x6, 0x4, 
       0x2, 0x338, 0x34e, 0x5, 0x1b2, 0xda, 0x2, 0x339, 0x34e, 0x5, 0x5a, 
       0x2e, 0x2, 0x33a, 0x33b, 0x7, 0x81, 0x2, 0x2, 0x33b, 0x33c, 0x5, 
       0x58, 0x2d, 0x2, 0x33c, 0x340, 0x7, 0x82, 0x2, 0x2, 0x33d, 0x33f, 
       0x5, 0x144, 0xa3, 0x2, 0x33e, 0x33d, 0x3, 0x2, 0x2, 0x2, 0x33f, 0x342, 
       0x3, 0x2, 0x2, 0x2, 0x340, 0x33e, 0x3, 0x2, 0x2, 0x2, 0x340, 0x341, 
       0x3, 0x2, 0x2, 0x2, 0x341, 0x344, 0x3, 0x2, 0x2, 0x2, 0x342, 0x340, 
       0x3, 0x2, 0x2, 0x2, 0x343, 0x345, 0x5, 0x146, 0xa4, 0x2, 0x344, 0x343, 
       0x3, 0x2, 0x2, 0x2, 0x344, 0x345, 0x3, 0x2, 0x2, 0x2, 0x345, 0x34e, 
       0x3, 0x2, 0x2, 0x2, 0x346, 0x348, 0x5, 0x144, 0xa3, 0x2, 0x347, 0x346, 
       0x3, 0x2, 0x2, 0x2, 0x348, 0x349, 0x3, 0x2, 0x2, 0x2, 0x349, 0x347, 
       0x3, 0x2, 0x2, 0x2, 0x349, 0x34a, 0x3, 0x2, 0x2, 0x2, 0x34a, 0x34b, 
       0x3, 0x2, 0x2, 0x2, 0x34b, 0x34c, 0x5, 0x146, 0xa4, 0x2, 0x34c, 0x34e, 
       0x3, 0x2, 0x2, 0x2, 0x34d, 0x338, 0x3, 0x2, 0x2, 0x2, 0x34d, 0x339, 
       0x3, 0x2, 0x2, 0x2, 0x34d, 0x33a, 0x3, 0x2, 0x2, 0x2, 0x34d, 0x347, 
       0x3, 0x2, 0x2, 0x2, 0x34e, 0x354, 0x3, 0x2, 0x2, 0x2, 0x34f, 0x354, 
       0x5, 0x68, 0x35, 0x2, 0x350, 0x351, 0x5, 0x144, 0xa3, 0x2, 0x351, 
       0x352, 0x5, 0x146, 0xa4, 0x2, 0x352, 0x354, 0x3, 0x2, 0x2, 0x2, 0x353, 
       0x337, 0x3, 0x2, 0x2, 0x2, 0x353, 0x34f, 0x3, 0x2, 0x2, 0x2, 0x353, 
       0x350, 0x3, 0x2, 0x2, 0x2, 0x354, 0x397, 0x3, 0x2, 0x2, 0x2, 0x355, 
       0x356, 0x7, 0x83, 0x2, 0x2, 0x356, 0x359, 0x5, 0x1c, 0xf, 0x2, 0x357, 
       0x358, 0x7, 0x86, 0x2, 0x2, 0x358, 0x35a, 0x5, 0x1c, 0xf, 0x2, 0x359, 
       0x357, 0x3, 0x2, 0x2, 0x2, 0x35a, 0x35b, 0x3, 0x2, 0x2, 0x2, 0x35b, 
       0x359, 0x3, 0x2, 0x2, 0x2, 0x35b, 0x35c, 0x3, 0x2, 0x2, 0x2, 0x35c, 
       0x35d, 0x3, 0x2, 0x2, 0x2, 0x35d, 0x35e, 0x7, 0x84, 0x2, 0x2, 0x35e, 
       0x397, 0x3, 0x2, 0x2, 0x2, 0x35f, 0x360, 0x7, 0x64, 0x2, 0x2, 0x360, 
       0x364, 0x7, 0x83, 0x2, 0x2, 0x361, 0x365, 0x5, 0x6e, 0x38, 0x2, 0x362, 
       0x365, 0x5, 0x6, 0x4, 0x2, 0x363, 0x365, 0x7, 0x6e, 0x2, 0x2, 0x364, 
       0x361, 0x3, 0x2, 0x2, 0x2, 0x364, 0x362, 0x3, 0x2, 0x2, 0x2, 0x364, 
       0x363, 0x3, 0x2, 0x2, 0x2, 0x365, 0x366, 0x3, 0x2, 0x2, 0x2, 0x366, 
       0x397, 0x7, 0x84, 0x2, 0x2, 0x367, 0x368, 0x7, 0x1b, 0x2, 0x2, 0x368, 
       0x369, 0x7, 0x83, 0x2, 0x2, 0x369, 0x36a, 0x5, 0x1e, 0x10, 0x2, 0x36a, 
       0x36b, 0x7, 0x84, 0x2, 0x2, 0x36b, 0x397, 0x3, 0x2, 0x2, 0x2, 0x36c, 
       0x36d, 0x7, 0x67, 0x2, 0x2, 0x36d, 0x36e, 0x7, 0x83, 0x2, 0x2, 0x36e, 
       0x36f, 0x5, 0x1e, 0x10, 0x2, 0x36f, 0x370, 0x7, 0x84, 0x2, 0x2, 0x370, 
       0x397, 0x3, 0x2, 0x2, 0x2, 0x371, 0x376, 0x7, 0x20, 0x2, 0x2, 0x372, 
       0x373, 0x7, 0x83, 0x2, 0x2, 0x373, 0x374, 0x5, 0x6, 0x4, 0x2, 0x374, 
       0x375, 0x7, 0x84, 0x2, 0x2, 0x375, 0x377, 0x3, 0x2, 0x2, 0x2, 0x376, 
       0x372, 0x3, 0x2, 0x2, 0x2, 0x376, 0x377, 0x3, 0x2, 0x2, 0x2, 0x377, 
       0x397, 0x3, 0x2, 0x2, 0x2, 0x378, 0x37a, 0x7, 0x11, 0x2, 0x2, 0x379, 
       0x378, 0x3, 0x2, 0x2, 0x2, 0x379, 0x37a, 0x3, 0x2, 0x2, 0x2, 0x37a, 
       0x37b, 0x3, 0x2, 0x2, 0x2, 0x37b, 0x381, 0x7, 0x21, 0x2, 0x2, 0x37c, 
       0x37e, 0x7, 0x83, 0x2, 0x2, 0x37d, 0x37f, 0x5, 0x7c, 0x3f, 0x2, 0x37e, 
       0x37d, 0x3, 0x2, 0x2, 0x2, 0x37e, 0x37f, 0x3, 0x2, 0x2, 0x2, 0x37f, 
       0x380, 0x3, 0x2, 0x2, 0x2, 0x380, 0x382, 0x7, 0x84, 0x2, 0x2, 0x381, 
       0x37c, 0x3, 0x2, 0x2, 0x2, 0x381, 0x382, 0x3, 0x2, 0x2, 0x2, 0x382, 
       0x383, 0x3, 0x2, 0x2, 0x2, 0x383, 0x397, 0x5, 0xac, 0x57, 0x2, 0x384, 
       0x385, 0x7, 0x5a, 0x2, 0x2, 0x385, 0x386, 0x7, 0x83, 0x2, 0x2, 0x386, 
       0x387, 0x5, 0x6, 0x4, 0x2, 0x387, 0x388, 0x7, 0x84, 0x2, 0x2, 0x388, 
       0x397, 0x3, 0x2, 0x2, 0x2, 0x389, 0x38a, 0x7, 0x42, 0x2, 0x2, 0x38a, 
       0x390, 0x7, 0x83, 0x2, 0x2, 0x38b, 0x38c, 0x5, 0x1b4, 0xdb, 0x2, 
       0x38c, 0x38d, 0x7, 0x85, 0x2, 0x2, 0x38d, 0x38f, 0x3, 0x2, 0x2, 0x2, 
       0x38e, 0x38b, 0x3, 0x2, 0x2, 0x2, 0x38f, 0x392, 0x3, 0x2, 0x2, 0x2, 
       0x390, 0x38e, 0x3, 0x2, 0x2, 0x2, 0x390, 0x391, 0x3, 0x2, 0x2, 0x2, 
       0x391, 0x393, 0x3, 0x2, 0x2, 0x2, 0x392, 0x390, 0x3, 0x2, 0x2, 0x2, 
       0x393, 0x394, 0x5, 0x1b4, 0xdb, 0x2, 0x394, 0x395, 0x7, 0x84, 0x2, 
       0x2, 0x395, 0x397, 0x3, 0x2, 0x2, 0x2, 0x396, 0x31d, 0x3, 0x2, 0x2, 
       0x2, 0x396, 0x31e, 0x3, 0x2, 0x2, 0x2, 0x396, 0x322, 0x3, 0x2, 0x2, 
       0x2, 0x396, 0x326, 0x3, 0x2, 0x2, 0x2, 0x396, 0x327, 0x3, 0x2, 0x2, 
       0x2, 0x396, 0x328, 0x3, 0x2, 0x2, 0x2, 0x396, 0x329, 0x3, 0x2, 0x2, 
       0x2, 0x396, 0x32a, 0x3, 0x2, 0x2, 0x2, 0x396, 0x336, 0x3, 0x2, 0x2, 
       0x2, 0x396, 0x355, 0x3, 0x2, 0x2, 0x2, 0x396, 0x35f, 0x3, 0x2, 0x2, 
       0x2, 0x396, 0x367, 0x3, 0x2, 0x2, 0x2, 0x396, 0x36c, 0x3, 0x2, 0x2, 
       0x2, 0x396, 0x371, 0x3, 0x2, 0x2, 0x2, 0x396, 0x379, 0x3, 0x2, 0x2, 
       0x2, 0x396, 0x384, 0x3, 0x2, 0x2, 0x2, 0x396, 0x389, 0x3, 0x2, 0x2, 
       0x2, 0x397, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x398, 0x39b, 0x5, 0x1e, 0x10, 
       0x2, 0x399, 0x39b, 0x5, 0x4e, 0x28, 0x2, 0x39a, 0x398, 0x3, 0x2, 
       0x2, 0x2, 0x39a, 0x399, 0x3, 0x2, 0x2, 0x2, 0x39b, 0x4d, 0x3, 0x2, 
       0x2, 0x2, 0x39c, 0x39d, 0x7, 0x61, 0x2, 0x2, 0x39d, 0x39e, 0x5, 0x1e, 
       0x10, 0x2, 0x39e, 0x4f, 0x3, 0x2, 0x2, 0x2, 0x39f, 0x3a1, 0x7, 0x96, 
       0x2, 0x2, 0x3a0, 0x39f, 0x3, 0x2, 0x2, 0x2, 0x3a0, 0x3a1, 0x3, 0x2, 
       0x2, 0x2, 0x3a1, 0x3a2, 0x3, 0x2, 0x2, 0x2, 0x3a2, 0x3a3, 0x7, 0x85, 
       0x2, 0x2, 0x3a3, 0x3a5, 0x5, 0x1b4, 0xdb, 0x2, 0x3a4, 0x3a6, 0x5, 
       0x18, 0xd, 0x2, 0x3a5, 0x3a4, 0x3, 0x2, 0x2, 0x2, 0x3a5, 0x3a6, 0x3, 
       0x2, 0x2, 0x2, 0x3a6, 0x51, 0x3, 0x2, 0x2, 0x2, 0x3a7, 0x3a9, 0x7, 
       0x96, 0x2, 0x2, 0x3a8, 0x3a7, 0x3, 0x2, 0x2, 0x2, 0x3a8, 0x3a9, 0x3, 
       0x2, 0x2, 0x2, 0x3a9, 0x3aa, 0x3, 0x2, 0x2, 0x2, 0x3aa, 0x3ab, 0x7, 
       0x81, 0x2, 0x2, 0x3ab, 0x3b0, 0x5, 0x54, 0x2b, 0x2, 0x3ac, 0x3ad, 
       0x7, 0x86, 0x2, 0x2, 0x3ad, 0x3af, 0x5, 0x54, 0x2b, 0x2, 0x3ae, 0x3ac, 
       0x3, 0x2, 0x2, 0x2, 0x3af, 0x3b2, 0x3, 0x2, 0x2, 0x2, 0x3b0, 0x3ae, 
       0x3, 0x2, 0x2, 0x2, 0x3b0, 0x3b1, 0x3, 0x2, 0x2, 0x2, 0x3b1, 0x3b3, 
       0x3, 0x2, 0x2, 0x2, 0x3b2, 0x3b0, 0x3, 0x2, 0x2, 0x2, 0x3b3, 0x3b4, 
       0x7, 0x82, 0x2, 0x2, 0x3b4, 0x53, 0x3, 0x2, 0x2, 0x2, 0x3b5, 0x3b6, 
       0x5, 0x1b4, 0xdb, 0x2, 0x3b6, 0x3b7, 0x7, 0x87, 0x2, 0x2, 0x3b7, 
       0x3b9, 0x3, 0x2, 0x2, 0x2, 0x3b8, 0x3b5, 0x3, 0x2, 0x2, 0x2, 0x3b8, 
       0x3b9, 0x3, 0x2, 0x2, 0x2, 0x3b9, 0x3ba, 0x3, 0x2, 0x2, 0x2, 0x3ba, 
       0x3bb, 0x5, 0x1e, 0x10, 0x2, 0x3bb, 0x55, 0x3, 0x2, 0x2, 0x2, 0x3bc, 
       0x3bd, 0x9, 0x9, 0x2, 0x2, 0x3bd, 0x57, 0x3, 0x2, 0x2, 0x2, 0x3be, 
       0x3c3, 0x5, 0x1e, 0x10, 0x2, 0x3bf, 0x3c0, 0x7, 0x86, 0x2, 0x2, 0x3c0, 
       0x3c2, 0x5, 0x1e, 0x10, 0x2, 0x3c1, 0x3bf, 0x3, 0x2, 0x2, 0x2, 0x3c2, 
       0x3c5, 0x3, 0x2, 0x2, 0x2, 0x3c3, 0x3c1, 0x3, 0x2, 0x2, 0x2, 0x3c3, 
       0x3c4, 0x3, 0x2, 0x2, 0x2, 0x3c4, 0x59, 0x3, 0x2, 0x2, 0x2, 0x3c5, 
       0x3c3, 0x3, 0x2, 0x2, 0x2, 0x3c6, 0x3c9, 0x5, 0x5c, 0x2f, 0x2, 0x3c7, 
       0x3c9, 0x5, 0x64, 0x33, 0x2, 0x3c8, 0x3c6, 0x3, 0x2, 0x2, 0x2, 0x3c8, 
       0x3c7, 0x3, 0x2, 0x2, 0x2, 0x3c9, 0x5b, 0x3, 0x2, 0x2, 0x2, 0x3ca, 
       0x3cf, 0x7, 0x7f, 0x2, 0x2, 0x3cb, 0x3cd, 0x5, 0x5e, 0x30, 0x2, 0x3cc, 
       0x3ce, 0x7, 0x86, 0x2, 0x2, 0x3cd, 0x3cc, 0x3, 0x2, 0x2, 0x2, 0x3cd, 
       0x3ce, 0x3, 0x2, 0x2, 0x2, 0x3ce, 0x3d0, 0x3, 0x2, 0x2, 0x2, 0x3cf, 
       0x3cb, 0x3, 0x2, 0x2, 0x2, 0x3cf, 0x3d0, 0x3, 0x2, 0x2, 0x2, 0x3d0, 
       0x3d1, 0x3, 0x2, 0x2, 0x2, 0x3d1, 0x3d2, 0x7, 0x80, 0x2, 0x2, 0x3d2, 
       0x5d, 0x3, 0x2, 0x2, 0x2, 0x3d3, 0x3d8, 0x5, 0x60, 0x31, 0x2, 0x3d4, 
       0x3d5, 0x7, 0x86, 0x2, 0x2, 0x3d5, 0x3d7, 0x5, 0x60, 0x31, 0x2, 0x3d6, 
       0x3d4, 0x3, 0x2, 0x2, 0x2, 0x3d7, 0x3da, 0x3, 0x2, 0x2, 0x2, 0x3d8, 
       0x3d6, 0x3, 0x2, 0x2, 0x2, 0x3d8, 0x3d9, 0x3, 0x2, 0x2, 0x2, 0x3d9, 
       0x5f, 0x3, 0x2, 0x2, 0x2, 0x3da, 0x3d8, 0x3, 0x2, 0x2, 0x2, 0x3db, 
       0x3e1, 0x5, 0x1b4, 0xdb, 0x2, 0x3dc, 0x3dd, 0x7, 0x81, 0x2, 0x2, 
       0x3dd, 0x3de, 0x5, 0x1e, 0x10, 0x2, 0x3de, 0x3df, 0x7, 0x82, 0x2, 
       0x2, 0x3df, 0x3e1, 0x3, 0x2, 0x2, 0x2, 0x3e0, 0x3db, 0x3, 0x2, 0x2, 
       0x2, 0x3e0, 0x3dc, 0x3, 0x2, 0x2, 0x2, 0x3e1, 0x3e2, 0x3, 0x2, 0x2, 
       0x2, 0x3e2, 0x3e3, 0x7, 0x93, 0x2, 0x2, 0x3e3, 0x3e4, 0x5, 0x62, 
       0x32, 0x2, 0x3e4, 0x61, 0x3, 0x2, 0x2, 0x2, 0x3e5, 0x3e8, 0x5, 0x1e, 
       0x10, 0x2, 0x3e6, 0x3e8, 0x5, 0x5a, 0x2e, 0x2, 0x3e7, 0x3e5, 0x3, 
       0x2, 0x2, 0x2, 0x3e7, 0x3e6, 0x3, 0x2, 0x2, 0x2, 0x3e8, 0x63, 0x3, 
       0x2, 0x2, 0x2, 0x3e9, 0x3ea, 0x7, 0x7f, 0x2, 0x2, 0x3ea, 0x3ef, 0x5, 
       0x66, 0x34, 0x2, 0x3eb, 0x3ec, 0x7, 0x86, 0x2, 0x2, 0x3ec, 0x3ee, 
       0x5, 0x66, 0x34, 0x2, 0x3ed, 0x3eb, 0x3, 0x2, 0x2, 0x2, 0x3ee, 0x3f1, 
       0x3, 0x2, 0x2, 0x2, 0x3ef, 0x3ed, 0x3, 0x2, 0x2, 0x2, 0x3ef, 0x3f0, 
       0x3, 0x2, 0x2, 0x2, 0x3f0, 0x3f3, 0x3, 0x2, 0x2, 0x2, 0x3f1, 0x3ef, 
       0x3, 0x2, 0x2, 0x2, 0x3f2, 0x3f4, 0x7, 0x86, 0x2, 0x2, 0x3f3, 0x3f2, 
       0x3, 0x2, 0x2, 0x2, 0x3f3, 0x3f4, 0x3, 0x2, 0x2, 0x2, 0x3f4, 0x3f5, 
       0x3, 0x2, 0x2, 0x2, 0x3f5, 0x3f6, 0x7, 0x80, 0x2, 0x2, 0x3f6, 0x65, 
       0x3, 0x2, 0x2, 0x2, 0x3f7, 0x3fd, 0x5, 0x20, 0x11, 0x2, 0x3f8, 0x3f9, 
       0x7, 0x7f, 0x2, 0x2, 0x3f9, 0x3fa, 0x5, 0x58, 0x2d, 0x2, 0x3fa, 0x3fb, 
       0x7, 0x80, 0x2, 0x2, 0x3fb, 0x3fd, 0x3, 0x2, 0x2, 0x2, 0x3fc, 0x3f7, 
       0x3, 0x2, 0x2, 0x2, 0x3fc, 0x3f8, 0x3, 0x2, 0x2, 0x2, 0x3fd, 0x67, 
       0x3, 0x2, 0x2, 0x2, 0x3fe, 0x403, 0x7, 0x7f, 0x2, 0x2, 0x3ff, 0x401, 
       0x5, 0x6a, 0x36, 0x2, 0x400, 0x402, 0x7, 0x86, 0x2, 0x2, 0x401, 0x400, 
       0x3, 0x2, 0x2, 0x2, 0x401, 0x402, 0x3, 0x2, 0x2, 0x2, 0x402, 0x404, 
       0x3, 0x2, 0x2, 0x2, 0x403, 0x3ff, 0x3, 0x2, 0x2, 0x2, 0x403, 0x404, 
       0x3, 0x2, 0x2, 0x2, 0x404, 0x405, 0x3, 0x2, 0x2, 0x2, 0x405, 0x406, 
       0x7, 0x80, 0x2, 0x2, 0x406, 0x69, 0x3, 0x2, 0x2, 0x2, 0x407, 0x40c, 
       0x5, 0x6c, 0x37, 0x2, 0x408, 0x409, 0x7, 0x86, 0x2, 0x2, 0x409, 0x40b, 
       0x5, 0x6c, 0x37, 0x2, 0x40a, 0x408, 0x3, 0x2, 0x2, 0x2, 0x40b, 0x40e, 
       0x3, 0x2, 0x2, 0x2, 0x40c, 0x40a, 0x3, 0x2, 0x2, 0x2, 0x40c, 0x40d, 
       0x3, 0x2, 0x2, 0x2, 0x40d, 0x6b, 0x3, 0x2, 0x2, 0x2, 0x40e, 0x40c, 
       0x3, 0x2, 0x2, 0x2, 0x40f, 0x415, 0x5, 0x48, 0x25, 0x2, 0x410, 0x411, 
       0x5, 0x1b4, 0xdb, 0x2, 0x411, 0x412, 0x7, 0x93, 0x2, 0x2, 0x412, 
       0x413, 0x5, 0x1e, 0x10, 0x2, 0x413, 0x415, 0x3, 0x2, 0x2, 0x2, 0x414, 
       0x40f, 0x3, 0x2, 0x2, 0x2, 0x414, 0x410, 0x3, 0x2, 0x2, 0x2, 0x415, 
       0x6d, 0x3, 0x2, 0x2, 0x2, 0x416, 0x41f, 0x5, 0x1b4, 0xdb, 0x2, 0x417, 
       0x419, 0x5, 0x70, 0x39, 0x2, 0x418, 0x417, 0x3, 0x2, 0x2, 0x2, 0x418, 
       0x419, 0x3, 0x2, 0x2, 0x2, 0x419, 0x420, 0x3, 0x2, 0x2, 0x2, 0x41a, 
       0x41b, 0x7, 0x97, 0x2, 0x2, 0x41b, 0x41d, 0x5, 0x1b4, 0xdb, 0x2, 
       0x41c, 0x41e, 0x5, 0x70, 0x39, 0x2, 0x41d, 0x41c, 0x3, 0x2, 0x2, 
       0x2, 0x41d, 0x41e, 0x3, 0x2, 0x2, 0x2, 0x41e, 0x420, 0x3, 0x2, 0x2, 
       0x2, 0x41f, 0x418, 0x3, 0x2, 0x2, 0x2, 0x41f, 0x41a, 0x3, 0x2, 0x2, 
       0x2, 0x420, 0x428, 0x3, 0x2, 0x2, 0x2, 0x421, 0x422, 0x7, 0x85, 0x2, 
       0x2, 0x422, 0x424, 0x5, 0x1b4, 0xdb, 0x2, 0x423, 0x425, 0x5, 0x70, 
       0x39, 0x2, 0x424, 0x423, 0x3, 0x2, 0x2, 0x2, 0x424, 0x425, 0x3, 0x2, 
       0x2, 0x2, 0x425, 0x427, 0x3, 0x2, 0x2, 0x2, 0x426, 0x421, 0x3, 0x2, 
       0x2, 0x2, 0x427, 0x42a, 0x3, 0x2, 0x2, 0x2, 0x428, 0x426, 0x3, 0x2, 
       0x2, 0x2, 0x428, 0x429, 0x3, 0x2, 0x2, 0x2, 0x429, 0x6f, 0x3, 0x2, 
       0x2, 0x2, 0x42a, 0x428, 0x3, 0x2, 0x2, 0x2, 0x42b, 0x42f, 0x7, 0x94, 
       0x2, 0x2, 0x42c, 0x42e, 0x7, 0x86, 0x2, 0x2, 0x42d, 0x42c, 0x3, 0x2, 
       0x2, 0x2, 0x42e, 0x431, 0x3, 0x2, 0x2, 0x2, 0x42f, 0x42d, 0x3, 0x2, 
       0x2, 0x2, 0x42f, 0x430, 0x3, 0x2, 0x2, 0x2, 0x430, 0x432, 0x3, 0x2, 
       0x2, 0x2, 0x431, 0x42f, 0x3, 0x2, 0x2, 0x2, 0x432, 0x433, 0x7, 0x95, 
       0x2, 0x2, 0x433, 0x71, 0x3, 0x2, 0x2, 0x2, 0x434, 0x439, 0x5, 0x8, 
       0x5, 0x2, 0x435, 0x438, 0x5, 0x144, 0xa3, 0x2, 0x436, 0x438, 0x7, 
       0x8b, 0x2, 0x2, 0x437, 0x435, 0x3, 0x2, 0x2, 0x2, 0x437, 0x436, 0x3, 
       0x2, 0x2, 0x2, 0x438, 0x43b, 0x3, 0x2, 0x2, 0x2, 0x439, 0x437, 0x3, 
       0x2, 0x2, 0x2, 0x439, 0x43a, 0x3, 0x2, 0x2, 0x2, 0x43a, 0x43d, 0x3, 
       0x2, 0x2, 0x2, 0x43b, 0x439, 0x3, 0x2, 0x2, 0x2, 0x43c, 0x43e, 0x7, 
       0x96, 0x2, 0x2, 0x43d, 0x43c, 0x3, 0x2, 0x2, 0x2, 0x43d, 0x43e, 0x3, 
       0x2, 0x2, 0x2, 0x43e, 0x440, 0x3, 0x2, 0x2, 0x2, 0x43f, 0x441, 0x5, 
       0x74, 0x3b, 0x2, 0x440, 0x43f, 0x3, 0x2, 0x2, 0x2, 0x440, 0x441, 
       0x3, 0x2, 0x2, 0x2, 0x441, 0x443, 0x3, 0x2, 0x2, 0x2, 0x442, 0x444, 
       0x5, 0x1b4, 0xdb, 0x2, 0x443, 0x442, 0x3, 0x2, 0x2, 0x2, 0x443, 0x444, 
       0x3, 0x2, 0x2, 0x2, 0x444, 0x73, 0x3, 0x2, 0x2, 0x2, 0x445, 0x446, 
       0x7, 0x7f, 0x2, 0x2, 0x446, 0x44b, 0x5, 0x76, 0x3c, 0x2, 0x447, 0x448, 
       0x7, 0x86, 0x2, 0x2, 0x448, 0x44a, 0x5, 0x76, 0x3c, 0x2, 0x449, 0x447, 
       0x3, 0x2, 0x2, 0x2, 0x44a, 0x44d, 0x3, 0x2, 0x2, 0x2, 0x44b, 0x449, 
       0x3, 0x2, 0x2, 0x2, 0x44b, 0x44c, 0x3, 0x2, 0x2, 0x2, 0x44c, 0x44e, 
       0x3, 0x2, 0x2, 0x2, 0x44d, 0x44b, 0x3, 0x2, 0x2, 0x2, 0x44e, 0x44f, 
       0x7, 0x80, 0x2, 0x2, 0x44f, 0x75, 0x3, 0x2, 0x2, 0x2, 0x450, 0x451, 
       0x5, 0x1b4, 0xdb, 0x2, 0x451, 0x452, 0x7, 0x87, 0x2, 0x2, 0x452, 
       0x453, 0x5, 0x1e, 0x10, 0x2, 0x453, 0x77, 0x3, 0x2, 0x2, 0x2, 0x454, 
       0x456, 0x7, 0x11, 0x2, 0x2, 0x455, 0x454, 0x3, 0x2, 0x2, 0x2, 0x455, 
       0x456, 0x3, 0x2, 0x2, 0x2, 0x456, 0x457, 0x3, 0x2, 0x2, 0x2, 0x457, 
       0x458, 0x5, 0x7a, 0x3e, 0x2, 0x458, 0x459, 0x5, 0x178, 0xbd, 0x2, 
       0x459, 0x45a, 0x5, 0x82, 0x42, 0x2, 0x45a, 0x79, 0x3, 0x2, 0x2, 0x2, 
       0x45b, 0x45c, 0x7, 0x83, 0x2, 0x2, 0x45c, 0x467, 0x7, 0x84, 0x2, 
       0x2, 0x45d, 0x45e, 0x7, 0x83, 0x2, 0x2, 0x45e, 0x45f, 0x5, 0x7c, 
       0x3f, 0x2, 0x45f, 0x460, 0x7, 0x84, 0x2, 0x2, 0x460, 0x467, 0x3, 
       0x2, 0x2, 0x2, 0x461, 0x462, 0x7, 0x83, 0x2, 0x2, 0x462, 0x463, 0x5, 
       0x80, 0x41, 0x2, 0x463, 0x464, 0x7, 0x84, 0x2, 0x2, 0x464, 0x467, 
       0x3, 0x2, 0x2, 0x2, 0x465, 0x467, 0x5, 0x1b4, 0xdb, 0x2, 0x466, 0x45b, 
       0x3, 0x2, 0x2, 0x2, 0x466, 0x45d, 0x3, 0x2, 0x2, 0x2, 0x466, 0x461, 
       0x3, 0x2, 0x2, 0x2, 0x466, 0x465, 0x3, 0x2, 0x2, 0x2, 0x467, 0x7b, 
       0x3, 0x2, 0x2, 0x2, 0x468, 0x46d, 0x5, 0x7e, 0x40, 0x2, 0x469, 0x46a, 
       0x7, 0x86, 0x2, 0x2, 0x46a, 0x46c, 0x5, 0x7e, 0x40, 0x2, 0x46b, 0x469, 
       0x3, 0x2, 0x2, 0x2, 0x46c, 0x46f, 0x3, 0x2, 0x2, 0x2, 0x46d, 0x46b, 
       0x3, 0x2, 0x2, 0x2, 0x46d, 0x46e, 0x3, 0x2, 0x2, 0x2, 0x46e, 0x7d, 
       0x3, 0x2, 0x2, 0x2, 0x46f, 0x46d, 0x3, 0x2, 0x2, 0x2, 0x470, 0x472, 
       0x9, 0x4, 0x2, 0x2, 0x471, 0x470, 0x3, 0x2, 0x2, 0x2, 0x471, 0x472, 
       0x3, 0x2, 0x2, 0x2, 0x472, 0x473, 0x3, 0x2, 0x2, 0x2, 0x473, 0x474, 
       0x5, 0x6, 0x4, 0x2, 0x474, 0x475, 0x5, 0x1b4, 0xdb, 0x2, 0x475, 0x7f, 
       0x3, 0x2, 0x2, 0x2, 0x476, 0x47b, 0x5, 0x1b4, 0xdb, 0x2, 0x477, 0x478, 
       0x7, 0x86, 0x2, 0x2, 0x478, 0x47a, 0x5, 0x1b4, 0xdb, 0x2, 0x479, 
       0x477, 0x3, 0x2, 0x2, 0x2, 0x47a, 0x47d, 0x3, 0x2, 0x2, 0x2, 0x47b, 
       0x479, 0x3, 0x2, 0x2, 0x2, 0x47b, 0x47c, 0x3, 0x2, 0x2, 0x2, 0x47c, 
       0x81, 0x3, 0x2, 0x2, 0x2, 0x47d, 0x47b, 0x3, 0x2, 0x2, 0x2, 0x47e, 
       0x481, 0x5, 0x4c, 0x27, 0x2, 0x47f, 0x481, 0x5, 0xac, 0x57, 0x2, 
       0x480, 0x47e, 0x3, 0x2, 0x2, 0x2, 0x480, 0x47f, 0x3, 0x2, 0x2, 0x2, 
       0x481, 0x83, 0x3, 0x2, 0x2, 0x2, 0x482, 0x483, 0x5, 0x86, 0x44, 0x2, 
       0x483, 0x484, 0x5, 0x88, 0x45, 0x2, 0x484, 0x85, 0x3, 0x2, 0x2, 0x2, 
       0x485, 0x487, 0x7, 0x32, 0x2, 0x2, 0x486, 0x488, 0x5, 0x6, 0x4, 0x2, 
       0x487, 0x486, 0x3, 0x2, 0x2, 0x2, 0x487, 0x488, 0x3, 0x2, 0x2, 0x2, 
       0x488, 0x489, 0x3, 0x2, 0x2, 0x2, 0x489, 0x48a, 0x5, 0x1b4, 0xdb, 
       0x2, 0x48a, 0x48b, 0x7, 0x38, 0x2, 0x2, 0x48b, 0x48c, 0x5, 0x1e, 
       0x10, 0x2, 0x48c, 0x87, 0x3, 0x2, 0x2, 0x2, 0x48d, 0x48f, 0x5, 0x8a, 
       0x46, 0x2, 0x48e, 0x48d, 0x3, 0x2, 0x2, 0x2, 0x48f, 0x492, 0x3, 0x2, 
       0x2, 0x2, 0x490, 0x48e, 0x3, 0x2, 0x2, 0x2, 0x490, 0x491, 0x3, 0x2, 
       0x2, 0x2, 0x491, 0x493, 0x3, 0x2, 0x2, 0x2, 0x492, 0x490, 0x3, 0x2, 
       0x2, 0x2, 0x493, 0x495, 0x5, 0x96, 0x4c, 0x2, 0x494, 0x496, 0x5, 
       0x98, 0x4d, 0x2, 0x495, 0x494, 0x3, 0x2, 0x2, 0x2, 0x495, 0x496, 
       0x3, 0x2, 0x2, 0x2, 0x496, 0x89, 0x3, 0x2, 0x2, 0x2, 0x497, 0x49d, 
       0x5, 0x86, 0x44, 0x2, 0x498, 0x49d, 0x5, 0x8c, 0x47, 0x2, 0x499, 
       0x49d, 0x5, 0x8e, 0x48, 0x2, 0x49a, 0x49d, 0x5, 0x90, 0x49, 0x2, 
       0x49b, 0x49d, 0x5, 0x92, 0x4a, 0x2, 0x49c, 0x497, 0x3, 0x2, 0x2, 
       0x2, 0x49c, 0x498, 0x3, 0x2, 0x2, 0x2, 0x49c, 0x499, 0x3, 0x2, 0x2, 
       0x2, 0x49c, 0x49a, 0x3, 0x2, 0x2, 0x2, 0x49c, 0x49b, 0x3, 0x2, 0x2, 
       0x2, 0x49d, 0x8b, 0x3, 0x2, 0x2, 0x2, 0x49e, 0x49f, 0x7, 0x3f, 0x2, 
       0x2, 0x49f, 0x4a0, 0x5, 0x1b4, 0xdb, 0x2, 0x4a0, 0x4a1, 0x7, 0x93, 
       0x2, 0x2, 0x4a1, 0x4a2, 0x5, 0x1e, 0x10, 0x2, 0x4a2, 0x8d, 0x3, 0x2, 
       0x2, 0x2, 0x4a3, 0x4a4, 0x7, 0x71, 0x2, 0x2, 0x4a4, 0x4a5, 0x5, 0x1e, 
       0x10, 0x2, 0x4a5, 0x8f, 0x3, 0x2, 0x2, 0x2, 0x4a6, 0x4a8, 0x7, 0x3e, 
       0x2, 0x2, 0x4a7, 0x4a9, 0x5, 0x6, 0x4, 0x2, 0x4a8, 0x4a7, 0x3, 0x2, 
       0x2, 0x2, 0x4a8, 0x4a9, 0x3, 0x2, 0x2, 0x2, 0x4a9, 0x4aa, 0x3, 0x2, 
       0x2, 0x2, 0x4aa, 0x4ab, 0x5, 0x1b4, 0xdb, 0x2, 0x4ab, 0x4ac, 0x7, 
       0x38, 0x2, 0x2, 0x4ac, 0x4ad, 0x5, 0x1e, 0x10, 0x2, 0x4ad, 0x4ae, 
       0x7, 0x47, 0x2, 0x2, 0x4ae, 0x4af, 0x5, 0x1e, 0x10, 0x2, 0x4af, 0x4b0, 
       0x7, 0x28, 0x2, 0x2, 0x4b0, 0x4b3, 0x5, 0x1e, 0x10, 0x2, 0x4b1, 0x4b2, 
       0x7, 0x3c, 0x2, 0x2, 0x4b2, 0x4b4, 0x5, 0x1b4, 0xdb, 0x2, 0x4b3, 
       0x4b1, 0x3, 0x2, 0x2, 0x2, 0x4b3, 0x4b4, 0x3, 0x2, 0x2, 0x2, 0x4b4, 
       0x91, 0x3, 0x2, 0x2, 0x2, 0x4b5, 0x4b6, 0x7, 0x49, 0x2, 0x2, 0x4b6, 
       0x4bb, 0x5, 0x94, 0x4b, 0x2, 0x4b7, 0x4b8, 0x7, 0x86, 0x2, 0x2, 0x4b8, 
       0x4ba, 0x5, 0x94, 0x4b, 0x2, 0x4b9, 0x4b7, 0x3, 0x2, 0x2, 0x2, 0x4ba, 
       0x4bd, 0x3, 0x2, 0x2, 0x2, 0x4bb, 0x4b9, 0x3, 0x2, 0x2, 0x2, 0x4bb, 
       0x4bc, 0x3, 0x2, 0x2, 0x2, 0x4bc, 0x93, 0x3, 0x2, 0x2, 0x2, 0x4bd, 
       0x4bb, 0x3, 0x2, 0x2, 0x2, 0x4be, 0x4c0, 0x5, 0x1e, 0x10, 0x2, 0x4bf, 
       0x4c1, 0x9, 0xa, 0x2, 0x2, 0x4c0, 0x4bf, 0x3, 0x2, 0x2, 0x2, 0x4c0, 
       0x4c1, 0x3, 0x2, 0x2, 0x2, 0x4c1, 0x95, 0x3, 0x2, 0x2, 0x2, 0x4c2, 
       0x4c3, 0x7, 0x57, 0x2, 0x2, 0x4c3, 0x4ca, 0x5, 0x1e, 0x10, 0x2, 0x4c4, 
       0x4c5, 0x7, 0x35, 0x2, 0x2, 0x4c5, 0x4c6, 0x5, 0x1e, 0x10, 0x2, 0x4c6, 
       0x4c7, 0x7, 0x16, 0x2, 0x2, 0x4c7, 0x4c8, 0x5, 0x1e, 0x10, 0x2, 0x4c8, 
       0x4ca, 0x3, 0x2, 0x2, 0x2, 0x4c9, 0x4c2, 0x3, 0x2, 0x2, 0x2, 0x4c9, 
       0x4c4, 0x3, 0x2, 0x2, 0x2, 0x4ca, 0x97, 0x3, 0x2, 0x2, 0x2, 0x4cb, 
       0x4cc, 0x7, 0x3c, 0x2, 0x2, 0x4cc, 0x4cd, 0x5, 0x1b4, 0xdb, 0x2, 
       0x4cd, 0x4ce, 0x5, 0x88, 0x45, 0x2, 0x4ce, 0x99, 0x3, 0x2, 0x2, 0x2, 
       0x4cf, 0x4d3, 0x5, 0xa6, 0x54, 0x2, 0x4d0, 0x4d3, 0x5, 0x9c, 0x4f, 
       0x2, 0x4d1, 0x4d3, 0x5, 0xa8, 0x55, 0x2, 0x4d2, 0x4cf, 0x3, 0x2, 
       0x2, 0x2, 0x4d2, 0x4d0, 0x3, 0x2, 0x2, 0x2, 0x4d2, 0x4d1, 0x3, 0x2, 
       0x2, 0x2, 0x4d3, 0x9b, 0x3, 0x2, 0x2, 0x2, 0x4d4, 0x4d5, 0x5, 0xae, 
       0x58, 0x2, 0x4d5, 0x4d6, 0x7, 0x88, 0x2, 0x2, 0x4d6, 0x4dc, 0x3, 
       0x2, 0x2, 0x2, 0x4d7, 0x4d8, 0x5, 0xb6, 0x5c, 0x2, 0x4d8, 0x4d9, 
       0x7, 0x88, 0x2, 0x2, 0x4d9, 0x4dc, 0x3, 0x2, 0x2, 0x2, 0x4da, 0x4dc, 
       0x5, 0x9e, 0x50, 0x2, 0x4db, 0x4d4, 0x3, 0x2, 0x2, 0x2, 0x4db, 0x4d7, 
       0x3, 0x2, 0x2, 0x2, 0x4db, 0x4da, 0x3, 0x2, 0x2, 0x2, 0x4dc, 0x9d, 
       0x3, 0x2, 0x2, 0x2, 0x4dd, 0x4de, 0x5, 0xa0, 0x51, 0x2, 0x4de, 0x4df, 
       0x5, 0xa4, 0x53, 0x2, 0x4df, 0x9f, 0x3, 0x2, 0x2, 0x2, 0x4e0, 0x4e2, 
       0x5, 0xa2, 0x52, 0x2, 0x4e1, 0x4e0, 0x3, 0x2, 0x2, 0x2, 0x4e1, 0x4e2, 
       0x3, 0x2, 0x2, 0x2, 0x4e2, 0x4e3, 0x3, 0x2, 0x2, 0x2, 0x4e3, 0x4e4, 
       0x5, 0x114, 0x8b, 0x2, 0x4e4, 0x4e6, 0x5, 0x1b4, 0xdb, 0x2, 0x4e5, 
       0x4e7, 0x5, 0xe8, 0x75, 0x2, 0x4e6, 0x4e5, 0x3, 0x2, 0x2, 0x2, 0x4e6, 
       0x4e7, 0x3, 0x2, 0x2, 0x2, 0x4e7, 0x4e8, 0x3, 0x2, 0x2, 0x2, 0x4e8, 
       0x4ea, 0x7, 0x83, 0x2, 0x2, 0x4e9, 0x4eb, 0x5, 0x11a, 0x8e, 0x2, 
       0x4ea, 0x4e9, 0x3, 0x2, 0x2, 0x2, 0x4ea, 0x4eb, 0x3, 0x2, 0x2, 0x2, 
       0x4eb, 0x4ec, 0x3, 0x2, 0x2, 0x2, 0x4ec, 0x4ee, 0x7, 0x84, 0x2, 0x2, 
       0x4ed, 0x4ef, 0x5, 0xf0, 0x79, 0x2, 0x4ee, 0x4ed, 0x3, 0x2, 0x2, 
       0x2, 0x4ee, 0x4ef, 0x3, 0x2, 0x2, 0x2, 0x4ef, 0xa1, 0x3, 0x2, 0x2, 
       0x2, 0x4f0, 0x4f2, 0x9, 0xb, 0x2, 0x2, 0x4f1, 0x4f3, 0x7, 0x5c, 0x2, 
       0x2, 0x4f2, 0x4f1, 0x3, 0x2, 0x2, 0x2, 0x4f2, 0x4f3, 0x3, 0x2, 0x2, 
       0x2, 0x4f3, 0x4f7, 0x3, 0x2, 0x2, 0x2, 0x4f4, 0x4f5, 0x7, 0x5c, 0x2, 
       0x2, 0x4f5, 0x4f7, 0x9, 0xb, 0x2, 0x2, 0x4f6, 0x4f0, 0x3, 0x2, 0x2, 
       0x2, 0x4f6, 0x4f4, 0x3, 0x2, 0x2, 0x2, 0x4f7, 0xa3, 0x3, 0x2, 0x2, 
       0x2, 0x4f8, 0x4fe, 0x5, 0xac, 0x57, 0x2, 0x4f9, 0x4fa, 0x5, 0x178, 
       0xbd, 0x2, 0x4fa, 0x4fb, 0x5, 0x4c, 0x27, 0x2, 0x4fb, 0x4fc, 0x7, 
       0x88, 0x2, 0x2, 0x4fc, 0x4fe, 0x3, 0x2, 0x2, 0x2, 0x4fd, 0x4f8, 0x3, 
       0x2, 0x2, 0x2, 0x4fd, 0x4f9, 0x3, 0x2, 0x2, 0x2, 0x4fe, 0xa5, 0x3, 
       0x2, 0x2, 0x2, 0x4ff, 0x500, 0x5, 0x1b4, 0xdb, 0x2, 0x500, 0x501, 
       0x7, 0x87, 0x2, 0x2, 0x501, 0x502, 0x5, 0x9a, 0x4e, 0x2, 0x502, 0xa7, 
       0x3, 0x2, 0x2, 0x2, 0x503, 0x506, 0x5, 0xac, 0x57, 0x2, 0x504, 0x506, 
       0x5, 0xaa, 0x56, 0x2, 0x505, 0x503, 0x3, 0x2, 0x2, 0x2, 0x505, 0x504, 
       0x3, 0x2, 0x2, 0x2, 0x506, 0xa9, 0x3, 0x2, 0x2, 0x2, 0x507, 0x58a, 
       0x7, 0x88, 0x2, 0x2, 0x508, 0x509, 0x5, 0x1e, 0x10, 0x2, 0x509, 0x50a, 
       0x7, 0x88, 0x2, 0x2, 0x50a, 0x58a, 0x3, 0x2, 0x2, 0x2, 0x50b, 0x50c, 
       0x7, 0x36, 0x2, 0x2, 0x50c, 0x50d, 0x7, 0x83, 0x2, 0x2, 0x50d, 0x50e, 
       0x5, 0x1e, 0x10, 0x2, 0x50e, 0x50f, 0x7, 0x84, 0x2, 0x2, 0x50f, 0x512, 
       0x5, 0xb8, 0x5d, 0x2, 0x510, 0x511, 0x7, 0x26, 0x2, 0x2, 0x511, 0x513, 
       0x5, 0xb8, 0x5d, 0x2, 0x512, 0x510, 0x3, 0x2, 0x2, 0x2, 0x512, 0x513, 
       0x3, 0x2, 0x2, 0x2, 0x513, 0x58a, 0x3, 0x2, 0x2, 0x2, 0x514, 0x515, 
       0x7, 0x5f, 0x2, 0x2, 0x515, 0x516, 0x7, 0x83, 0x2, 0x2, 0x516, 0x517, 
       0x5, 0x1e, 0x10, 0x2, 0x517, 0x518, 0x7, 0x84, 0x2, 0x2, 0x518, 0x51c, 
       0x7, 0x7f, 0x2, 0x2, 0x519, 0x51b, 0x5, 0xba, 0x5e, 0x2, 0x51a, 0x519, 
       0x3, 0x2, 0x2, 0x2, 0x51b, 0x51e, 0x3, 0x2, 0x2, 0x2, 0x51c, 0x51a, 
       0x3, 0x2, 0x2, 0x2, 0x51c, 0x51d, 0x3, 0x2, 0x2, 0x2, 0x51d, 0x51f, 
       0x3, 0x2, 0x2, 0x2, 0x51e, 0x51c, 0x3, 0x2, 0x2, 0x2, 0x51f, 0x520, 
       0x7, 0x80, 0x2, 0x2, 0x520, 0x58a, 0x3, 0x2, 0x2, 0x2, 0x521, 0x522, 
       0x7, 0x72, 0x2, 0x2, 0x522, 0x523, 0x7, 0x83, 0x2, 0x2, 0x523, 0x524, 
       0x5, 0x1e, 0x10, 0x2, 0x524, 0x525, 0x7, 0x84, 0x2, 0x2, 0x525, 0x526, 
       0x5, 0xa8, 0x55, 0x2, 0x526, 0x58a, 0x3, 0x2, 0x2, 0x2, 0x527, 0x528, 
       0x7, 0x23, 0x2, 0x2, 0x528, 0x529, 0x5, 0xa8, 0x55, 0x2, 0x529, 0x52a, 
       0x7, 0x72, 0x2, 0x2, 0x52a, 0x52b, 0x7, 0x83, 0x2, 0x2, 0x52b, 0x52c, 
       0x5, 0x1e, 0x10, 0x2, 0x52c, 0x52d, 0x7, 0x84, 0x2, 0x2, 0x52d, 0x52e, 
       0x7, 0x88, 0x2, 0x2, 0x52e, 0x58a, 0x3, 0x2, 0x2, 0x2, 0x52f, 0x530, 
       0x7, 0x30, 0x2, 0x2, 0x530, 0x532, 0x7, 0x83, 0x2, 0x2, 0x531, 0x533, 
       0x5, 0xc2, 0x62, 0x2, 0x532, 0x531, 0x3, 0x2, 0x2, 0x2, 0x532, 0x533, 
       0x3, 0x2, 0x2, 0x2, 0x533, 0x534, 0x3, 0x2, 0x2, 0x2, 0x534, 0x536, 
       0x7, 0x88, 0x2, 0x2, 0x535, 0x537, 0x5, 0x1e, 0x10, 0x2, 0x536, 0x535, 
       0x3, 0x2, 0x2, 0x2, 0x536, 0x537, 0x3, 0x2, 0x2, 0x2, 0x537, 0x538, 
       0x3, 0x2, 0x2, 0x2, 0x538, 0x53a, 0x7, 0x88, 0x2, 0x2, 0x539, 0x53b, 
       0x5, 0xc4, 0x63, 0x2, 0x53a, 0x539, 0x3, 0x2, 0x2, 0x2, 0x53a, 0x53b, 
       0x3, 0x2, 0x2, 0x2, 0x53b, 0x53c, 0x3, 0x2, 0x2, 0x2, 0x53c, 0x53d, 
       0x7, 0x84, 0x2, 0x2, 0x53d, 0x58a, 0x5, 0xa8, 0x55, 0x2, 0x53e, 0x540, 
       0x7, 0x12, 0x2, 0x2, 0x53f, 0x53e, 0x3, 0x2, 0x2, 0x2, 0x53f, 0x540, 
       0x3, 0x2, 0x2, 0x2, 0x540, 0x541, 0x3, 0x2, 0x2, 0x2, 0x541, 0x542, 
       0x7, 0x31, 0x2, 0x2, 0x542, 0x543, 0x7, 0x83, 0x2, 0x2, 0x543, 0x544, 
       0x5, 0xb0, 0x59, 0x2, 0x544, 0x545, 0x5, 0x1b4, 0xdb, 0x2, 0x545, 
       0x546, 0x7, 0x38, 0x2, 0x2, 0x546, 0x547, 0x5, 0x1e, 0x10, 0x2, 0x547, 
       0x548, 0x7, 0x84, 0x2, 0x2, 0x548, 0x549, 0x5, 0xa8, 0x55, 0x2, 0x549, 
       0x58a, 0x3, 0x2, 0x2, 0x2, 0x54a, 0x54b, 0x7, 0x15, 0x2, 0x2, 0x54b, 
       0x58a, 0x7, 0x88, 0x2, 0x2, 0x54c, 0x54d, 0x7, 0x1e, 0x2, 0x2, 0x54d, 
       0x58a, 0x7, 0x88, 0x2, 0x2, 0x54e, 0x553, 0x7, 0x34, 0x2, 0x2, 0x54f, 
       0x554, 0x5, 0x1b4, 0xdb, 0x2, 0x550, 0x551, 0x7, 0x18, 0x2, 0x2, 
       0x551, 0x554, 0x5, 0x1e, 0x10, 0x2, 0x552, 0x554, 0x7, 0x20, 0x2, 
       0x2, 0x553, 0x54f, 0x3, 0x2, 0x2, 0x2, 0x553, 0x550, 0x3, 0x2, 0x2, 
       0x2, 0x553, 0x552, 0x3, 0x2, 0x2, 0x2, 0x554, 0x555, 0x3, 0x2, 0x2, 
       0x2, 0x555, 0x58a, 0x7, 0x88, 0x2, 0x2, 0x556, 0x558, 0x7, 0x54, 
       0x2, 0x2, 0x557, 0x559, 0x5, 0x1e, 0x10, 0x2, 0x558, 0x557, 0x3, 
       0x2, 0x2, 0x2, 0x558, 0x559, 0x3, 0x2, 0x2, 0x2, 0x559, 0x55a, 0x3, 
       0x2, 0x2, 0x2, 0x55a, 0x58a, 0x7, 0x88, 0x2, 0x2, 0x55b, 0x55d, 0x7, 
       0x61, 0x2, 0x2, 0x55c, 0x55e, 0x5, 0x1e, 0x10, 0x2, 0x55d, 0x55c, 
       0x3, 0x2, 0x2, 0x2, 0x55d, 0x55e, 0x3, 0x2, 0x2, 0x2, 0x55e, 0x55f, 
       0x3, 0x2, 0x2, 0x2, 0x55f, 0x58a, 0x7, 0x88, 0x2, 0x2, 0x560, 0x561, 
       0x7, 0x63, 0x2, 0x2, 0x561, 0x567, 0x5, 0xac, 0x57, 0x2, 0x562, 0x564, 
       0x5, 0xc6, 0x64, 0x2, 0x563, 0x565, 0x5, 0xce, 0x68, 0x2, 0x564, 
       0x563, 0x3, 0x2, 0x2, 0x2, 0x564, 0x565, 0x3, 0x2, 0x2, 0x2, 0x565, 
       0x568, 0x3, 0x2, 0x2, 0x2, 0x566, 0x568, 0x5, 0xce, 0x68, 0x2, 0x567, 
       0x562, 0x3, 0x2, 0x2, 0x2, 0x567, 0x566, 0x3, 0x2, 0x2, 0x2, 0x568, 
       0x58a, 0x3, 0x2, 0x2, 0x2, 0x569, 0x56a, 0x7, 0x1b, 0x2, 0x2, 0x56a, 
       0x58a, 0x5, 0xac, 0x57, 0x2, 0x56b, 0x56c, 0x7, 0x67, 0x2, 0x2, 0x56c, 
       0x58a, 0x5, 0xac, 0x57, 0x2, 0x56d, 0x56e, 0x7, 0x40, 0x2, 0x2, 0x56e, 
       0x56f, 0x7, 0x83, 0x2, 0x2, 0x56f, 0x570, 0x5, 0x1e, 0x10, 0x2, 0x570, 
       0x571, 0x7, 0x84, 0x2, 0x2, 0x571, 0x572, 0x5, 0xa8, 0x55, 0x2, 0x572, 
       0x58a, 0x3, 0x2, 0x2, 0x2, 0x573, 0x574, 0x7, 0x6b, 0x2, 0x2, 0x574, 
       0x575, 0x7, 0x83, 0x2, 0x2, 0x575, 0x576, 0x5, 0xd0, 0x69, 0x2, 0x576, 
       0x577, 0x7, 0x84, 0x2, 0x2, 0x577, 0x578, 0x5, 0xa8, 0x55, 0x2, 0x578, 
       0x58a, 0x3, 0x2, 0x2, 0x2, 0x579, 0x57d, 0x7, 0x73, 0x2, 0x2, 0x57a, 
       0x57b, 0x7, 0x54, 0x2, 0x2, 0x57b, 0x57e, 0x5, 0x1e, 0x10, 0x2, 0x57c, 
       0x57e, 0x7, 0x15, 0x2, 0x2, 0x57d, 0x57a, 0x3, 0x2, 0x2, 0x2, 0x57d, 
       0x57c, 0x3, 0x2, 0x2, 0x2, 0x57e, 0x57f, 0x3, 0x2, 0x2, 0x2, 0x57f, 
       0x58a, 0x7, 0x88, 0x2, 0x2, 0x580, 0x581, 0x7, 0x69, 0x2, 0x2, 0x581, 
       0x58a, 0x5, 0xac, 0x57, 0x2, 0x582, 0x583, 0x7, 0x2e, 0x2, 0x2, 0x583, 
       0x584, 0x7, 0x83, 0x2, 0x2, 0x584, 0x585, 0x5, 0x16c, 0xb7, 0x2, 
       0x585, 0x586, 0x5, 0x16e, 0xb8, 0x2, 0x586, 0x587, 0x7, 0x84, 0x2, 
       0x2, 0x587, 0x588, 0x5, 0xa8, 0x55, 0x2, 0x588, 0x58a, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x507, 0x3, 0x2, 0x2, 0x2, 0x589, 0x508, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x50b, 0x3, 0x2, 0x2, 0x2, 0x589, 0x514, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x521, 0x3, 0x2, 0x2, 0x2, 0x589, 0x527, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x52f, 0x3, 0x2, 0x2, 0x2, 0x589, 0x53f, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x54a, 0x3, 0x2, 0x2, 0x2, 0x589, 0x54c, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x54e, 0x3, 0x2, 0x2, 0x2, 0x589, 0x556, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x55b, 0x3, 0x2, 0x2, 0x2, 0x589, 0x560, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x569, 0x3, 0x2, 0x2, 0x2, 0x589, 0x56b, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x56d, 0x3, 0x2, 0x2, 0x2, 0x589, 0x573, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x579, 0x3, 0x2, 0x2, 0x2, 0x589, 0x580, 0x3, 0x2, 
       0x2, 0x2, 0x589, 0x582, 0x3, 0x2, 0x2, 0x2, 0x58a, 0xab, 0x3, 0x2, 
       0x2, 0x2, 0x58b, 0x58d, 0x7, 0x7f, 0x2, 0x2, 0x58c, 0x58e, 0x5, 0xc0, 
       0x61, 0x2, 0x58d, 0x58c, 0x3, 0x2, 0x2, 0x2, 0x58d, 0x58e, 0x3, 0x2, 
       0x2, 0x2, 0x58e, 0x58f, 0x3, 0x2, 0x2, 0x2, 0x58f, 0x590, 0x7, 0x80, 
       0x2, 0x2, 0x590, 0xad, 0x3, 0x2, 0x2, 0x2, 0x591, 0x596, 0x7, 0x6b, 
       0x2, 0x2, 0x592, 0x596, 0x7, 0x52, 0x2, 0x2, 0x593, 0x594, 0x7, 0x52, 
       0x2, 0x2, 0x594, 0x596, 0x7, 0x51, 0x2, 0x2, 0x595, 0x591, 0x3, 0x2, 
       0x2, 0x2, 0x595, 0x592, 0x3, 0x2, 0x2, 0x2, 0x595, 0x593, 0x3, 0x2, 
       0x2, 0x2, 0x595, 0x596, 0x3, 0x2, 0x2, 0x2, 0x596, 0x597, 0x3, 0x2, 
       0x2, 0x2, 0x597, 0x598, 0x5, 0xb0, 0x59, 0x2, 0x598, 0x59d, 0x5, 
       0xb2, 0x5a, 0x2, 0x599, 0x59a, 0x7, 0x86, 0x2, 0x2, 0x59a, 0x59c, 
       0x5, 0xb2, 0x5a, 0x2, 0x59b, 0x599, 0x3, 0x2, 0x2, 0x2, 0x59c, 0x59f, 
       0x3, 0x2, 0x2, 0x2, 0x59d, 0x59b, 0x3, 0x2, 0x2, 0x2, 0x59d, 0x59e, 
       0x3, 0x2, 0x2, 0x2, 0x59e, 0x5a5, 0x3, 0x2, 0x2, 0x2, 0x59f, 0x59d, 
       0x3, 0x2, 0x2, 0x2, 0x5a0, 0x5a1, 0x7, 0x2e, 0x2, 0x2, 0x5a1, 0x5a2, 
       0x5, 0x16c, 0xb7, 0x2, 0x5a2, 0x5a3, 0x5, 0x16e, 0xb8, 0x2, 0x5a3, 
       0x5a5, 0x3, 0x2, 0x2, 0x2, 0x5a4, 0x595, 0x3, 0x2, 0x2, 0x2, 0x5a4, 
       0x5a0, 0x3, 0x2, 0x2, 0x2, 0x5a5, 0xaf, 0x3, 0x2, 0x2, 0x2, 0x5a6, 
       0x5a9, 0x7, 0x6c, 0x2, 0x2, 0x5a7, 0x5a9, 0x5, 0x6, 0x4, 0x2, 0x5a8, 
       0x5a6, 0x3, 0x2, 0x2, 0x2, 0x5a8, 0x5a7, 0x3, 0x2, 0x2, 0x2, 0x5a9, 
       0xb1, 0x3, 0x2, 0x2, 0x2, 0x5aa, 0x5b0, 0x5, 0x1b4, 0xdb, 0x2, 0x5ab, 
       0x5ad, 0x7, 0x93, 0x2, 0x2, 0x5ac, 0x5ae, 0x7, 0x52, 0x2, 0x2, 0x5ad, 
       0x5ac, 0x3, 0x2, 0x2, 0x2, 0x5ad, 0x5ae, 0x3, 0x2, 0x2, 0x2, 0x5ae, 
       0x5af, 0x3, 0x2, 0x2, 0x2, 0x5af, 0x5b1, 0x5, 0xb4, 0x5b, 0x2, 0x5b0, 
       0x5ab, 0x3, 0x2, 0x2, 0x2, 0x5b0, 0x5b1, 0x3, 0x2, 0x2, 0x2, 0x5b1, 
       0xb3, 0x3, 0x2, 0x2, 0x2, 0x5b2, 0x5b6, 0x5, 0x1e, 0x10, 0x2, 0x5b3, 
       0x5b6, 0x5, 0x146, 0xa4, 0x2, 0x5b4, 0x5b6, 0x5, 0x176, 0xbc, 0x2, 
       0x5b5, 0x5b2, 0x3, 0x2, 0x2, 0x2, 0x5b5, 0x5b3, 0x3, 0x2, 0x2, 0x2, 
       0x5b5, 0x5b4, 0x3, 0x2, 0x2, 0x2, 0x5b6, 0xb5, 0x3, 0x2, 0x2, 0x2, 
       0x5b7, 0x5b8, 0x7, 0x1d, 0x2, 0x2, 0x5b8, 0x5b9, 0x5, 0x6, 0x4, 0x2, 
       0x5b9, 0x5ba, 0x5, 0x10a, 0x86, 0x2, 0x5ba, 0xb7, 0x3, 0x2, 0x2, 
       0x2, 0x5bb, 0x5be, 0x5, 0xac, 0x57, 0x2, 0x5bc, 0x5be, 0x5, 0xaa, 
       0x56, 0x2, 0x5bd, 0x5bb, 0x3, 0x2, 0x2, 0x2, 0x5bd, 0x5bc, 0x3, 0x2, 
       0x2, 0x2, 0x5be, 0xb9, 0x3, 0x2, 0x2, 0x2, 0x5bf, 0x5c1, 0x5, 0xbc, 
       0x5f, 0x2, 0x5c0, 0x5bf, 0x3, 0x2, 0x2, 0x2, 0x5c1, 0x5c2, 0x3, 0x2, 
       0x2, 0x2, 0x5c2, 0x5c0, 0x3, 0x2, 0x2, 0x2, 0x5c2, 0x5c3, 0x3, 0x2, 
       0x2, 0x2, 0x5c3, 0x5c4, 0x3, 0x2, 0x2, 0x2, 0x5c4, 0x5c5, 0x5, 0xc0, 
       0x61, 0x2, 0x5c5, 0xbb, 0x3, 0x2, 0x2, 0x2, 0x5c6, 0x5c7, 0x7, 0x18, 
       0x2, 0x2, 0x5c7, 0x5c9, 0x5, 0x1e, 0x10, 0x2, 0x5c8, 0x5ca, 0x5, 
       0xbe, 0x60, 0x2, 0x5c9, 0x5c8, 0x3, 0x2, 0x2, 0x2, 0x5c9, 0x5ca, 
       0x3, 0x2, 0x2, 0x2, 0x5ca, 0x5cb, 0x3, 0x2, 0x2, 0x2, 0x5cb, 0x5cc, 
       0x7, 0x87, 0x2, 0x2, 0x5cc, 0x5d0, 0x3, 0x2, 0x2, 0x2, 0x5cd, 0x5ce, 
       0x7, 0x20, 0x2, 0x2, 0x5ce, 0x5d0, 0x7, 0x87, 0x2, 0x2, 0x5cf, 0x5c6, 
       0x3, 0x2, 0x2, 0x2, 0x5cf, 0x5cd, 0x3, 0x2, 0x2, 0x2, 0x5d0, 0xbd, 
       0x3, 0x2, 0x2, 0x2, 0x5d1, 0x5d2, 0x7, 0x70, 0x2, 0x2, 0x5d2, 0x5d3, 
       0x5, 0x1e, 0x10, 0x2, 0x5d3, 0xbf, 0x3, 0x2, 0x2, 0x2, 0x5d4, 0x5d6, 
       0x5, 0x9a, 0x4e, 0x2, 0x5d5, 0x5d4, 0x3, 0x2, 0x2, 0x2, 0x5d6, 0x5d7, 
       0x3, 0x2, 0x2, 0x2, 0x5d7, 0x5d5, 0x3, 0x2, 0x2, 0x2, 0x5d7, 0x5d8, 
       0x3, 0x2, 0x2, 0x2, 0x5d8, 0xc1, 0x3, 0x2, 0x2, 0x2, 0x5d9, 0x5e3, 
       0x5, 0xae, 0x58, 0x2, 0x5da, 0x5df, 0x5, 0x1e, 0x10, 0x2, 0x5db, 
       0x5dc, 0x7, 0x86, 0x2, 0x2, 0x5dc, 0x5de, 0x5, 0x1e, 0x10, 0x2, 0x5dd, 
       0x5db, 0x3, 0x2, 0x2, 0x2, 0x5de, 0x5e1, 0x3, 0x2, 0x2, 0x2, 0x5df, 
       0x5dd, 0x3, 0x2, 0x2, 0x2, 0x5df, 0x5e0, 0x3, 0x2, 0x2, 0x2, 0x5e0, 
       0x5e3, 0x3, 0x2, 0x2, 0x2, 0x5e1, 0x5df, 0x3, 0x2, 0x2, 0x2, 0x5e2, 
       0x5d9, 0x3, 0x2, 0x2, 0x2, 0x5e2, 0x5da, 0x3, 0x2, 0x2, 0x2, 0x5e3, 
       0xc3, 0x3, 0x2, 0x2, 0x2, 0x5e4, 0x5e9, 0x5, 0x1e, 0x10, 0x2, 0x5e5, 
       0x5e6, 0x7, 0x86, 0x2, 0x2, 0x5e6, 0x5e8, 0x5, 0x1e, 0x10, 0x2, 0x5e7, 
       0x5e5, 0x3, 0x2, 0x2, 0x2, 0x5e8, 0x5eb, 0x3, 0x2, 0x2, 0x2, 0x5e9, 
       0x5e7, 0x3, 0x2, 0x2, 0x2, 0x5e9, 0x5ea, 0x3, 0x2, 0x2, 0x2, 0x5ea, 
       0xc5, 0x3, 0x2, 0x2, 0x2, 0x5eb, 0x5e9, 0x3, 0x2, 0x2, 0x2, 0x5ec, 
       0x5f0, 0x5, 0xc8, 0x65, 0x2, 0x5ed, 0x5ef, 0x5, 0xc8, 0x65, 0x2, 
       0x5ee, 0x5ed, 0x3, 0x2, 0x2, 0x2, 0x5ef, 0x5f2, 0x3, 0x2, 0x2, 0x2, 
       0x5f0, 0x5ee, 0x3, 0x2, 0x2, 0x2, 0x5f0, 0x5f1, 0x3, 0x2, 0x2, 0x2, 
       0x5f1, 0x5f4, 0x3, 0x2, 0x2, 0x2, 0x5f2, 0x5f0, 0x3, 0x2, 0x2, 0x2, 
       0x5f3, 0x5f5, 0x5, 0xca, 0x66, 0x2, 0x5f4, 0x5f3, 0x3, 0x2, 0x2, 
       0x2, 0x5f4, 0x5f5, 0x3, 0x2, 0x2, 0x2, 0x5f5, 0x5f8, 0x3, 0x2, 0x2, 
       0x2, 0x5f6, 0x5f8, 0x5, 0xca, 0x66, 0x2, 0x5f7, 0x5ec, 0x3, 0x2, 
       0x2, 0x2, 0x5f7, 0x5f6, 0x3, 0x2, 0x2, 0x2, 0x5f8, 0xc7, 0x3, 0x2, 
       0x2, 0x2, 0x5f9, 0x5fa, 0x7, 0x19, 0x2, 0x2, 0x5fa, 0x5fb, 0x7, 0x83, 
       0x2, 0x2, 0x5fb, 0x5fd, 0x5, 0x16, 0xc, 0x2, 0x5fc, 0x5fe, 0x5, 0x1b4, 
       0xdb, 0x2, 0x5fd, 0x5fc, 0x3, 0x2, 0x2, 0x2, 0x5fd, 0x5fe, 0x3, 0x2, 
       0x2, 0x2, 0x5fe, 0x5ff, 0x3, 0x2, 0x2, 0x2, 0x5ff, 0x601, 0x7, 0x84, 
       0x2, 0x2, 0x600, 0x602, 0x5, 0xcc, 0x67, 0x2, 0x601, 0x600, 0x3, 
       0x2, 0x2, 0x2, 0x601, 0x602, 0x3, 0x2, 0x2, 0x2, 0x602, 0x603, 0x3, 
       0x2, 0x2, 0x2, 0x603, 0x604, 0x5, 0xac, 0x57, 0x2, 0x604, 0xc9, 0x3, 
       0x2, 0x2, 0x2, 0x605, 0x607, 0x7, 0x19, 0x2, 0x2, 0x606, 0x608, 0x5, 
       0xcc, 0x67, 0x2, 0x607, 0x606, 0x3, 0x2, 0x2, 0x2, 0x607, 0x608, 
       0x3, 0x2, 0x2, 0x2, 0x608, 0x609, 0x3, 0x2, 0x2, 0x2, 0x609, 0x60a, 
       0x5, 0xac, 0x57, 0x2, 0x60a, 0xcb, 0x3, 0x2, 0x2, 0x2, 0x60b, 0x60c, 
       0x7, 0x70, 0x2, 0x2, 0x60c, 0x60d, 0x7, 0x83, 0x2, 0x2, 0x60d, 0x60e, 
       0x5, 0x1e, 0x10, 0x2, 0x60e, 0x60f, 0x7, 0x84, 0x2, 0x2, 0x60f, 0xcd, 
       0x3, 0x2, 0x2, 0x2, 0x610, 0x611, 0x7, 0x2d, 0x2, 0x2, 0x611, 0x612, 
       0x5, 0xac, 0x57, 0x2, 0x612, 0xcf, 0x3, 0x2, 0x2, 0x2, 0x613, 0x616, 
       0x5, 0xae, 0x58, 0x2, 0x614, 0x616, 0x5, 0x1e, 0x10, 0x2, 0x615, 
       0x613, 0x3, 0x2, 0x2, 0x2, 0x615, 0x614, 0x3, 0x2, 0x2, 0x2, 0x616, 
       0xd1, 0x3, 0x2, 0x2, 0x2, 0x617, 0x618, 0x7, 0x43, 0x2, 0x2, 0x618, 
       0x619, 0x5, 0xd4, 0x6b, 0x2, 0x619, 0x61b, 0x5, 0xd6, 0x6c, 0x2, 
       0x61a, 0x61c, 0x7, 0x88, 0x2, 0x2, 0x61b, 0x61a, 0x3, 0x2, 0x2, 0x2, 
       0x61b, 0x61c, 0x3, 0x2, 0x2, 0x2, 0x61c, 0xd3, 0x3, 0x2, 0x2, 0x2, 
       0x61d, 0x622, 0x5, 0x1b4, 0xdb, 0x2, 0x61e, 0x61f, 0x7, 0x85, 0x2, 
       0x2, 0x61f, 0x621, 0x5, 0x1b4, 0xdb, 0x2, 0x620, 0x61e, 0x3, 0x2, 
       0x2, 0x2, 0x621, 0x624, 0x3, 0x2, 0x2, 0x2, 0x622, 0x620, 0x3, 0x2, 
       0x2, 0x2, 0x622, 0x623, 0x3, 0x2, 0x2, 0x2, 0x623, 0xd5, 0x3, 0x2, 
       0x2, 0x2, 0x624, 0x622, 0x3, 0x2, 0x2, 0x2, 0x625, 0x627, 0x7, 0x7f, 
       0x2, 0x2, 0x626, 0x628, 0x5, 0xd8, 0x6d, 0x2, 0x627, 0x626, 0x3, 
       0x2, 0x2, 0x2, 0x627, 0x628, 0x3, 0x2, 0x2, 0x2, 0x628, 0x62a, 0x3, 
       0x2, 0x2, 0x2, 0x629, 0x62b, 0x5, 0xdc, 0x6f, 0x2, 0x62a, 0x629, 
       0x3, 0x2, 0x2, 0x2, 0x62a, 0x62b, 0x3, 0x2, 0x2, 0x2, 0x62b, 0x62d, 
       0x3, 0x2, 0x2, 0x2, 0x62c, 0x62e, 0x5, 0xe0, 0x71, 0x2, 0x62d, 0x62c, 
       0x3, 0x2, 0x2, 0x2, 0x62d, 0x62e, 0x3, 0x2, 0x2, 0x2, 0x62e, 0x62f, 
       0x3, 0x2, 0x2, 0x2, 0x62f, 0x630, 0x7, 0x80, 0x2, 0x2, 0x630, 0xd7, 
       0x3, 0x2, 0x2, 0x2, 0x631, 0x633, 0x5, 0xda, 0x6e, 0x2, 0x632, 0x631, 
       0x3, 0x2, 0x2, 0x2, 0x633, 0x634, 0x3, 0x2, 0x2, 0x2, 0x634, 0x632, 
       0x3, 0x2, 0x2, 0x2, 0x634, 0x635, 0x3, 0x2, 0x2, 0x2, 0x635, 0xd9, 
       0x3, 0x2, 0x2, 0x2, 0x636, 0x637, 0x7, 0x2b, 0x2, 0x2, 0x637, 0x638, 
       0x7, 0xd, 0x2, 0x2, 0x638, 0x639, 0x5, 0x1b4, 0xdb, 0x2, 0x639, 0x63a, 
       0x7, 0x88, 0x2, 0x2, 0x63a, 0xdb, 0x3, 0x2, 0x2, 0x2, 0x63b, 0x63d, 
       0x5, 0xde, 0x70, 0x2, 0x63c, 0x63b, 0x3, 0x2, 0x2, 0x2, 0x63d, 0x63e, 
       0x3, 0x2, 0x2, 0x2, 0x63e, 0x63c, 0x3, 0x2, 0x2, 0x2, 0x63e, 0x63f, 
       0x3, 0x2, 0x2, 0x2, 0x63f, 0xdd, 0x3, 0x2, 0x2, 0x2, 0x640, 0x641, 
       0x7, 0x6b, 0x2, 0x2, 0x641, 0x642, 0x5, 0x1b4, 0xdb, 0x2, 0x642, 
       0x643, 0x7, 0x93, 0x2, 0x2, 0x643, 0x644, 0x5, 0x4, 0x3, 0x2, 0x644, 
       0x645, 0x7, 0x88, 0x2, 0x2, 0x645, 0x650, 0x3, 0x2, 0x2, 0x2, 0x646, 
       0x647, 0x7, 0x6b, 0x2, 0x2, 0x647, 0x648, 0x5, 0x4, 0x3, 0x2, 0x648, 
       0x649, 0x7, 0x88, 0x2, 0x2, 0x649, 0x650, 0x3, 0x2, 0x2, 0x2, 0x64a, 
       0x64b, 0x7, 0x6b, 0x2, 0x2, 0x64b, 0x64c, 0x7, 0x5c, 0x2, 0x2, 0x64c, 
       0x64d, 0x5, 0x4, 0x3, 0x2, 0x64d, 0x64e, 0x7, 0x88, 0x2, 0x2, 0x64e, 
       0x650, 0x3, 0x2, 0x2, 0x2, 0x64f, 0x640, 0x3, 0x2, 0x2, 0x2, 0x64f, 
       0x646, 0x3, 0x2, 0x2, 0x2, 0x64f, 0x64a, 0x3, 0x2, 0x2, 0x2, 0x650, 
       0xdf, 0x3, 0x2, 0x2, 0x2, 0x651, 0x653, 0x5, 0xe2, 0x72, 0x2, 0x652, 
       0x651, 0x3, 0x2, 0x2, 0x2, 0x653, 0x654, 0x3, 0x2, 0x2, 0x2, 0x654, 
       0x652, 0x3, 0x2, 0x2, 0x2, 0x654, 0x655, 0x3, 0x2, 0x2, 0x2, 0x655, 
       0xe1, 0x3, 0x2, 0x2, 0x2, 0x656, 0x659, 0x5, 0xd2, 0x6a, 0x2, 0x657, 
       0x659, 0x5, 0xe4, 0x73, 0x2, 0x658, 0x656, 0x3, 0x2, 0x2, 0x2, 0x658, 
       0x657, 0x3, 0x2, 0x2, 0x2, 0x659, 0xe3, 0x3, 0x2, 0x2, 0x2, 0x65a, 
       0x65c, 0x5, 0x160, 0xb1, 0x2, 0x65b, 0x65a, 0x3, 0x2, 0x2, 0x2, 0x65b, 
       0x65c, 0x3, 0x2, 0x2, 0x2, 0x65c, 0x65e, 0x3, 0x2, 0x2, 0x2, 0x65d, 
       0x65f, 0x5, 0x102, 0x82, 0x2, 0x65e, 0x65d, 0x3, 0x2, 0x2, 0x2, 0x65e, 
       0x65f, 0x3, 0x2, 0x2, 0x2, 0x65f, 0x665, 0x3, 0x2, 0x2, 0x2, 0x660, 
       0x666, 0x5, 0x190, 0xc9, 0x2, 0x661, 0x666, 0x5, 0x192, 0xca, 0x2, 
       0x662, 0x666, 0x5, 0x194, 0xcb, 0x2, 0x663, 0x666, 0x5, 0x196, 0xcc, 
       0x2, 0x664, 0x666, 0x5, 0x198, 0xcd, 0x2, 0x665, 0x660, 0x3, 0x2, 
       0x2, 0x2, 0x665, 0x661, 0x3, 0x2, 0x2, 0x2, 0x665, 0x662, 0x3, 0x2, 
       0x2, 0x2, 0x665, 0x663, 0x3, 0x2, 0x2, 0x2, 0x665, 0x664, 0x3, 0x2, 
       0x2, 0x2, 0x666, 0xe5, 0x3, 0x2, 0x2, 0x2, 0x667, 0x668, 0x5, 0x1b4, 
       0xdb, 0x2, 0x668, 0x669, 0x7, 0x97, 0x2, 0x2, 0x669, 0x66b, 0x5, 
       0x1b4, 0xdb, 0x2, 0x66a, 0x66c, 0x5, 0x18, 0xd, 0x2, 0x66b, 0x66a, 
       0x3, 0x2, 0x2, 0x2, 0x66b, 0x66c, 0x3, 0x2, 0x2, 0x2, 0x66c, 0xe7, 
       0x3, 0x2, 0x2, 0x2, 0x66d, 0x66e, 0x7, 0x94, 0x2, 0x2, 0x66e, 0x673, 
       0x5, 0xea, 0x76, 0x2, 0x66f, 0x670, 0x7, 0x86, 0x2, 0x2, 0x670, 0x672, 
       0x5, 0xea, 0x76, 0x2, 0x671, 0x66f, 0x3, 0x2, 0x2, 0x2, 0x672, 0x675, 
       0x3, 0x2, 0x2, 0x2, 0x673, 0x671, 0x3, 0x2, 0x2, 0x2, 0x673, 0x674, 
       0x3, 0x2, 0x2, 0x2, 0x674, 0x676, 0x3, 0x2, 0x2, 0x2, 0x675, 0x673, 
       0x3, 0x2, 0x2, 0x2, 0x676, 0x677, 0x7, 0x95, 0x2, 0x2, 0x677, 0xe9, 
       0x3, 0x2, 0x2, 0x2, 0x678, 0x67a, 0x5, 0x160, 0xb1, 0x2, 0x679, 0x678, 
       0x3, 0x2, 0x2, 0x2, 0x679, 0x67a, 0x3, 0x2, 0x2, 0x2, 0x67a, 0x67b, 
       0x3, 0x2, 0x2, 0x2, 0x67b, 0x67c, 0x5, 0x1b4, 0xdb, 0x2, 0x67c, 0xeb, 
       0x3, 0x2, 0x2, 0x2, 0x67d, 0x67e, 0x7, 0x87, 0x2, 0x2, 0x67e, 0x683, 
       0x5, 0x16, 0xc, 0x2, 0x67f, 0x680, 0x7, 0x86, 0x2, 0x2, 0x680, 0x682, 
       0x5, 0x4, 0x3, 0x2, 0x681, 0x67f, 0x3, 0x2, 0x2, 0x2, 0x682, 0x685, 
       0x3, 0x2, 0x2, 0x2, 0x683, 0x681, 0x3, 0x2, 0x2, 0x2, 0x683, 0x684, 
       0x3, 0x2, 0x2, 0x2, 0x684, 0xed, 0x3, 0x2, 0x2, 0x2, 0x685, 0x683, 
       0x3, 0x2, 0x2, 0x2, 0x686, 0x68b, 0x5, 0x4, 0x3, 0x2, 0x687, 0x688, 
       0x7, 0x86, 0x2, 0x2, 0x688, 0x68a, 0x5, 0x4, 0x3, 0x2, 0x689, 0x687, 
       0x3, 0x2, 0x2, 0x2, 0x68a, 0x68d, 0x3, 0x2, 0x2, 0x2, 0x68b, 0x689, 
       0x3, 0x2, 0x2, 0x2, 0x68b, 0x68c, 0x3, 0x2, 0x2, 0x2, 0x68c, 0xef, 
       0x3, 0x2, 0x2, 0x2, 0x68d, 0x68b, 0x3, 0x2, 0x2, 0x2, 0x68e, 0x690, 
       0x5, 0xf2, 0x7a, 0x2, 0x68f, 0x68e, 0x3, 0x2, 0x2, 0x2, 0x690, 0x691, 
       0x3, 0x2, 0x2, 0x2, 0x691, 0x68f, 0x3, 0x2, 0x2, 0x2, 0x691, 0x692, 
       0x3, 0x2, 0x2, 0x2, 0x692, 0xf1, 0x3, 0x2, 0x2, 0x2, 0x693, 0x694, 
       0x7, 0x71, 0x2, 0x2, 0x694, 0x695, 0x5, 0x1b4, 0xdb, 0x2, 0x695, 
       0x696, 0x7, 0x87, 0x2, 0x2, 0x696, 0x697, 0x5, 0xf4, 0x7b, 0x2, 0x697, 
       0xf3, 0x3, 0x2, 0x2, 0x2, 0x698, 0x6a3, 0x5, 0xfa, 0x7e, 0x2, 0x699, 
       0x69c, 0x5, 0xf6, 0x7c, 0x2, 0x69a, 0x69b, 0x7, 0x86, 0x2, 0x2, 0x69b, 
       0x69d, 0x5, 0xf8, 0x7d, 0x2, 0x69c, 0x69a, 0x3, 0x2, 0x2, 0x2, 0x69c, 
       0x69d, 0x3, 0x2, 0x2, 0x2, 0x69d, 0x6a0, 0x3, 0x2, 0x2, 0x2, 0x69e, 
       0x69f, 0x7, 0x86, 0x2, 0x2, 0x69f, 0x6a1, 0x5, 0xfa, 0x7e, 0x2, 0x6a0, 
       0x69e, 0x3, 0x2, 0x2, 0x2, 0x6a0, 0x6a1, 0x3, 0x2, 0x2, 0x2, 0x6a1, 
       0x6a3, 0x3, 0x2, 0x2, 0x2, 0x6a2, 0x698, 0x3, 0x2, 0x2, 0x2, 0x6a2, 
       0x699, 0x3, 0x2, 0x2, 0x2, 0x6a3, 0xf5, 0x3, 0x2, 0x2, 0x2, 0x6a4, 
       0x6ac, 0x5, 0x16, 0xc, 0x2, 0x6a5, 0x6a7, 0x7, 0x1c, 0x2, 0x2, 0x6a6, 
       0x6a8, 0x7, 0x96, 0x2, 0x2, 0x6a7, 0x6a6, 0x3, 0x2, 0x2, 0x2, 0x6a7, 
       0x6a8, 0x3, 0x2, 0x2, 0x2, 0x6a8, 0x6ac, 0x3, 0x2, 0x2, 0x2, 0x6a9, 
       0x6ac, 0x7, 0x5e, 0x2, 0x2, 0x6aa, 0x6ac, 0x7, 0x68, 0x2, 0x2, 0x6ab, 
       0x6a4, 0x3, 0x2, 0x2, 0x2, 0x6ab, 0x6a5, 0x3, 0x2, 0x2, 0x2, 0x6ab, 
       0x6a9, 0x3, 0x2, 0x2, 0x2, 0x6ab, 0x6aa, 0x3, 0x2, 0x2, 0x2, 0x6ac, 
       0xf7, 0x3, 0x2, 0x2, 0x2, 0x6ad, 0x6b2, 0x5, 0x4, 0x3, 0x2, 0x6ae, 
       0x6af, 0x7, 0x86, 0x2, 0x2, 0x6af, 0x6b1, 0x5, 0x4, 0x3, 0x2, 0x6b0, 
       0x6ae, 0x3, 0x2, 0x2, 0x2, 0x6b1, 0x6b4, 0x3, 0x2, 0x2, 0x2, 0x6b2, 
       0x6b0, 0x3, 0x2, 0x2, 0x2, 0x6b2, 0x6b3, 0x3, 0x2, 0x2, 0x2, 0x6b3, 
       0xf9, 0x3, 0x2, 0x2, 0x2, 0x6b4, 0x6b2, 0x3, 0x2, 0x2, 0x2, 0x6b5, 
       0x6b6, 0x7, 0x44, 0x2, 0x2, 0x6b6, 0x6b7, 0x7, 0x83, 0x2, 0x2, 0x6b7, 
       0x6b8, 0x7, 0x84, 0x2, 0x2, 0x6b8, 0xfb, 0x3, 0x2, 0x2, 0x2, 0x6b9, 
       0x6bb, 0x7, 0x7f, 0x2, 0x2, 0x6ba, 0x6bc, 0x5, 0xfe, 0x80, 0x2, 0x6bb, 
       0x6ba, 0x3, 0x2, 0x2, 0x2, 0x6bb, 0x6bc, 0x3, 0x2, 0x2, 0x2, 0x6bc, 
       0x6bd, 0x3, 0x2, 0x2, 0x2, 0x6bd, 0x6be, 0x7, 0x80, 0x2, 0x2, 0x6be, 
       0xfd, 0x3, 0x2, 0x2, 0x2, 0x6bf, 0x6c1, 0x5, 0x100, 0x81, 0x2, 0x6c0, 
       0x6bf, 0x3, 0x2, 0x2, 0x2, 0x6c1, 0x6c2, 0x3, 0x2, 0x2, 0x2, 0x6c2, 
       0x6c0, 0x3, 0x2, 0x2, 0x2, 0x6c2, 0x6c3, 0x3, 0x2, 0x2, 0x2, 0x6c3, 
       0xff, 0x3, 0x2, 0x2, 0x2, 0x6c4, 0x6c6, 0x5, 0x160, 0xb1, 0x2, 0x6c5, 
       0x6c4, 0x3, 0x2, 0x2, 0x2, 0x6c5, 0x6c6, 0x3, 0x2, 0x2, 0x2, 0x6c6, 
       0x6c8, 0x3, 0x2, 0x2, 0x2, 0x6c7, 0x6c9, 0x5, 0x102, 0x82, 0x2, 0x6c8, 
       0x6c7, 0x3, 0x2, 0x2, 0x2, 0x6c8, 0x6c9, 0x3, 0x2, 0x2, 0x2, 0x6c9, 
       0x6cc, 0x3, 0x2, 0x2, 0x2, 0x6ca, 0x6cd, 0x5, 0x106, 0x84, 0x2, 0x6cb, 
       0x6cd, 0x5, 0x1a4, 0xd3, 0x2, 0x6cc, 0x6ca, 0x3, 0x2, 0x2, 0x2, 0x6cc, 
       0x6cb, 0x3, 0x2, 0x2, 0x2, 0x6cd, 0x101, 0x3, 0x2, 0x2, 0x2, 0x6ce, 
       0x6d0, 0x5, 0x104, 0x83, 0x2, 0x6cf, 0x6ce, 0x3, 0x2, 0x2, 0x2, 0x6d0, 
       0x6d1, 0x3, 0x2, 0x2, 0x2, 0x6d1, 0x6cf, 0x3, 0x2, 0x2, 0x2, 0x6d1, 
       0x6d2, 0x3, 0x2, 0x2, 0x2, 0x6d2, 0x103, 0x3, 0x2, 0x2, 0x2, 0x6d3, 
       0x6d4, 0x9, 0xc, 0x2, 0x2, 0x6d4, 0x105, 0x3, 0x2, 0x2, 0x2, 0x6d5, 
       0x6e9, 0x5, 0x1a0, 0xd1, 0x2, 0x6d6, 0x6e9, 0x5, 0x108, 0x85, 0x2, 
       0x6d7, 0x6e9, 0x5, 0x19a, 0xce, 0x2, 0x6d8, 0x6de, 0x5, 0x136, 0x9c, 
       0x2, 0x6d9, 0x6df, 0x5, 0x13a, 0x9e, 0x2, 0x6da, 0x6db, 0x5, 0x178, 
       0xbd, 0x2, 0x6db, 0x6dc, 0x5, 0x4c, 0x27, 0x2, 0x6dc, 0x6dd, 0x7, 
       0x88, 0x2, 0x2, 0x6dd, 0x6df, 0x3, 0x2, 0x2, 0x2, 0x6de, 0x6d9, 0x3, 
       0x2, 0x2, 0x2, 0x6de, 0x6da, 0x3, 0x2, 0x2, 0x2, 0x6df, 0x6e9, 0x3, 
       0x2, 0x2, 0x2, 0x6e0, 0x6e9, 0x5, 0x1a6, 0xd4, 0x2, 0x6e1, 0x6e2, 
       0x7, 0x6e, 0x2, 0x2, 0x6e2, 0x6e9, 0x5, 0x1a8, 0xd5, 0x2, 0x6e3, 
       0x6e9, 0x5, 0x190, 0xc9, 0x2, 0x6e4, 0x6e9, 0x5, 0x192, 0xca, 0x2, 
       0x6e5, 0x6e9, 0x5, 0x194, 0xcb, 0x2, 0x6e6, 0x6e9, 0x5, 0x196, 0xcc, 
       0x2, 0x6e7, 0x6e9, 0x5, 0x198, 0xcd, 0x2, 0x6e8, 0x6d5, 0x3, 0x2, 
       0x2, 0x2, 0x6e8, 0x6d6, 0x3, 0x2, 0x2, 0x2, 0x6e8, 0x6d7, 0x3, 0x2, 
       0x2, 0x2, 0x6e8, 0x6d8, 0x3, 0x2, 0x2, 0x2, 0x6e8, 0x6e0, 0x3, 0x2, 
       0x2, 0x2, 0x6e8, 0x6e1, 0x3, 0x2, 0x2, 0x2, 0x6e8, 0x6e3, 0x3, 0x2, 
       0x2, 0x2, 0x6e8, 0x6e4, 0x3, 0x2, 0x2, 0x2, 0x6e8, 0x6e5, 0x3, 0x2, 
       0x2, 0x2, 0x6e8, 0x6e6, 0x3, 0x2, 0x2, 0x2, 0x6e8, 0x6e7, 0x3, 0x2, 
       0x2, 0x2, 0x6e9, 0x107, 0x3, 0x2, 0x2, 0x2, 0x6ea, 0x6f0, 0x7, 0x52, 
       0x2, 0x2, 0x6eb, 0x6ec, 0x7, 0x51, 0x2, 0x2, 0x6ec, 0x6f0, 0x7, 0x52, 
       0x2, 0x2, 0x6ed, 0x6ee, 0x7, 0x52, 0x2, 0x2, 0x6ee, 0x6f0, 0x7, 0x51, 
       0x2, 0x2, 0x6ef, 0x6ea, 0x3, 0x2, 0x2, 0x2, 0x6ef, 0x6eb, 0x3, 0x2, 
       0x2, 0x2, 0x6ef, 0x6ed, 0x3, 0x2, 0x2, 0x2, 0x6ef, 0x6f0, 0x3, 0x2, 
       0x2, 0x2, 0x6f0, 0x6f1, 0x3, 0x2, 0x2, 0x2, 0x6f1, 0x6fb, 0x5, 0x6, 
       0x4, 0x2, 0x6f2, 0x6f3, 0x5, 0x4, 0x3, 0x2, 0x6f3, 0x6f4, 0x7, 0x85, 
       0x2, 0x2, 0x6f4, 0x6f5, 0x5, 0x1a2, 0xd2, 0x2, 0x6f5, 0x6fc, 0x3, 
       0x2, 0x2, 0x2, 0x6f6, 0x6fc, 0x5, 0x1a8, 0xd5, 0x2, 0x6f7, 0x6fc, 
       0x5, 0x19e, 0xd0, 0x2, 0x6f8, 0x6fc, 0x5, 0x1a2, 0xd2, 0x2, 0x6f9, 
       0x6fc, 0x5, 0x1ac, 0xd7, 0x2, 0x6fa, 0x6fc, 0x5, 0x19c, 0xcf, 0x2, 
       0x6fb, 0x6f2, 0x3, 0x2, 0x2, 0x2, 0x6fb, 0x6f6, 0x3, 0x2, 0x2, 0x2, 
       0x6fb, 0x6f7, 0x3, 0x2, 0x2, 0x2, 0x6fb, 0x6f8, 0x3, 0x2, 0x2, 0x2, 
       0x6fb, 0x6f9, 0x3, 0x2, 0x2, 0x2, 0x6fb, 0x6fa, 0x3, 0x2, 0x2, 0x2, 
       0x6fc, 0x109, 0x3, 0x2, 0x2, 0x2, 0x6fd, 0x702, 0x5, 0x10c, 0x87, 
       0x2, 0x6fe, 0x6ff, 0x7, 0x86, 0x2, 0x2, 0x6ff, 0x701, 0x5, 0x10c, 
       0x87, 0x2, 0x700, 0x6fe, 0x3, 0x2, 0x2, 0x2, 0x701, 0x704, 0x3, 0x2, 
       0x2, 0x2, 0x702, 0x700, 0x3, 0x2, 0x2, 0x2, 0x702, 0x703, 0x3, 0x2, 
       0x2, 0x2, 0x703, 0x10b, 0x3, 0x2, 0x2, 0x2, 0x704, 0x702, 0x3, 0x2, 
       0x2, 0x2, 0x705, 0x706, 0x5, 0x1b4, 0xdb, 0x2, 0x706, 0x707, 0x7, 
       0x93, 0x2, 0x2, 0x707, 0x708, 0x5, 0x1e, 0x10, 0x2, 0x708, 0x10d, 
       0x3, 0x2, 0x2, 0x2, 0x709, 0x70e, 0x5, 0x110, 0x89, 0x2, 0x70a, 0x70b, 
       0x7, 0x86, 0x2, 0x2, 0x70b, 0x70d, 0x5, 0x110, 0x89, 0x2, 0x70c, 
       0x70a, 0x3, 0x2, 0x2, 0x2, 0x70d, 0x710, 0x3, 0x2, 0x2, 0x2, 0x70e, 
       0x70c, 0x3, 0x2, 0x2, 0x2, 0x70e, 0x70f, 0x3, 0x2, 0x2, 0x2, 0x70f, 
       0x10f, 0x3, 0x2, 0x2, 0x2, 0x710, 0x70e, 0x3, 0x2, 0x2, 0x2, 0x711, 
       0x714, 0x5, 0x1b4, 0xdb, 0x2, 0x712, 0x713, 0x7, 0x93, 0x2, 0x2, 
       0x713, 0x715, 0x5, 0x112, 0x8a, 0x2, 0x714, 0x712, 0x3, 0x2, 0x2, 
       0x2, 0x714, 0x715, 0x3, 0x2, 0x2, 0x2, 0x715, 0x111, 0x3, 0x2, 0x2, 
       0x2, 0x716, 0x719, 0x5, 0x1e, 0x10, 0x2, 0x717, 0x719, 0x5, 0x146, 
       0xa4, 0x2, 0x718, 0x716, 0x3, 0x2, 0x2, 0x2, 0x718, 0x717, 0x3, 0x2, 
       0x2, 0x2, 0x719, 0x113, 0x3, 0x2, 0x2, 0x2, 0x71a, 0x71d, 0x5, 0x6, 
       0x4, 0x2, 0x71b, 0x71d, 0x7, 0x6e, 0x2, 0x2, 0x71c, 0x71a, 0x3, 0x2, 
       0x2, 0x2, 0x71c, 0x71b, 0x3, 0x2, 0x2, 0x2, 0x71d, 0x115, 0x3, 0x2, 
       0x2, 0x2, 0x71e, 0x71f, 0x5, 0x4, 0x3, 0x2, 0x71f, 0x117, 0x3, 0x2, 
       0x2, 0x2, 0x720, 0x723, 0x5, 0xac, 0x57, 0x2, 0x721, 0x723, 0x7, 
       0x88, 0x2, 0x2, 0x722, 0x720, 0x3, 0x2, 0x2, 0x2, 0x722, 0x721, 0x3, 
       0x2, 0x2, 0x2, 0x723, 0x119, 0x3, 0x2, 0x2, 0x2, 0x724, 0x72b, 0x5, 
       0x122, 0x92, 0x2, 0x725, 0x728, 0x5, 0x11c, 0x8f, 0x2, 0x726, 0x727, 
       0x7, 0x86, 0x2, 0x2, 0x727, 0x729, 0x5, 0x122, 0x92, 0x2, 0x728, 
       0x726, 0x3, 0x2, 0x2, 0x2, 0x728, 0x729, 0x3, 0x2, 0x2, 0x2, 0x729, 
       0x72b, 0x3, 0x2, 0x2, 0x2, 0x72a, 0x724, 0x3, 0x2, 0x2, 0x2, 0x72a, 
       0x725, 0x3, 0x2, 0x2, 0x2, 0x72b, 0x11b, 0x3, 0x2, 0x2, 0x2, 0x72c, 
       0x731, 0x5, 0x11e, 0x90, 0x2, 0x72d, 0x72e, 0x7, 0x86, 0x2, 0x2, 
       0x72e, 0x730, 0x5, 0x11e, 0x90, 0x2, 0x72f, 0x72d, 0x3, 0x2, 0x2, 
       0x2, 0x730, 0x733, 0x3, 0x2, 0x2, 0x2, 0x731, 0x72f, 0x3, 0x2, 0x2, 
       0x2, 0x731, 0x732, 0x3, 0x2, 0x2, 0x2, 0x732, 0x11d, 0x3, 0x2, 0x2, 
       0x2, 0x733, 0x731, 0x3, 0x2, 0x2, 0x2, 0x734, 0x736, 0x5, 0x160, 
       0xb1, 0x2, 0x735, 0x734, 0x3, 0x2, 0x2, 0x2, 0x735, 0x736, 0x3, 0x2, 
       0x2, 0x2, 0x736, 0x738, 0x3, 0x2, 0x2, 0x2, 0x737, 0x739, 0x5, 0x120, 
       0x91, 0x2, 0x738, 0x737, 0x3, 0x2, 0x2, 0x2, 0x738, 0x739, 0x3, 0x2, 
       0x2, 0x2, 0x739, 0x73a, 0x3, 0x2, 0x2, 0x2, 0x73a, 0x73d, 0x5, 0x1ae, 
       0xd8, 0x2, 0x73b, 0x73d, 0x7, 0xe, 0x2, 0x2, 0x73c, 0x735, 0x3, 0x2, 
       0x2, 0x2, 0x73c, 0x73b, 0x3, 0x2, 0x2, 0x2, 0x73d, 0x11f, 0x3, 0x2, 
       0x2, 0x2, 0x73e, 0x747, 0x7, 0x52, 0x2, 0x2, 0x73f, 0x747, 0x7, 0x4a, 
       0x2, 0x2, 0x740, 0x747, 0x7, 0x38, 0x2, 0x2, 0x741, 0x742, 0x7, 0x52, 
       0x2, 0x2, 0x742, 0x747, 0x7, 0x60, 0x2, 0x2, 0x743, 0x744, 0x7, 0x38, 
       0x2, 0x2, 0x744, 0x747, 0x7, 0x60, 0x2, 0x2, 0x745, 0x747, 0x7, 0x60, 
       0x2, 0x2, 0x746, 0x73e, 0x3, 0x2, 0x2, 0x2, 0x746, 0x73f, 0x3, 0x2, 
       0x2, 0x2, 0x746, 0x740, 0x3, 0x2, 0x2, 0x2, 0x746, 0x741, 0x3, 0x2, 
       0x2, 0x2, 0x746, 0x743, 0x3, 0x2, 0x2, 0x2, 0x746, 0x745, 0x3, 0x2, 
       0x2, 0x2, 0x747, 0x121, 0x3, 0x2, 0x2, 0x2, 0x748, 0x74a, 0x5, 0x160, 
       0xb1, 0x2, 0x749, 0x748, 0x3, 0x2, 0x2, 0x2, 0x749, 0x74a, 0x3, 0x2, 
       0x2, 0x2, 0x74a, 0x74b, 0x3, 0x2, 0x2, 0x2, 0x74b, 0x74c, 0x7, 0x4c, 
       0x2, 0x2, 0x74c, 0x74d, 0x5, 0x142, 0xa2, 0x2, 0x74d, 0x74e, 0x5, 
       0x1b4, 0xdb, 0x2, 0x74e, 0x123, 0x3, 0x2, 0x2, 0x2, 0x74f, 0x751, 
       0x5, 0x160, 0xb1, 0x2, 0x750, 0x74f, 0x3, 0x2, 0x2, 0x2, 0x750, 0x751, 
       0x3, 0x2, 0x2, 0x2, 0x751, 0x753, 0x3, 0x2, 0x2, 0x2, 0x752, 0x754, 
       0x5, 0x12a, 0x96, 0x2, 0x753, 0x752, 0x3, 0x2, 0x2, 0x2, 0x753, 0x754, 
       0x3, 0x2, 0x2, 0x2, 0x754, 0x75f, 0x3, 0x2, 0x2, 0x2, 0x755, 0x756, 
       0x7, 0x33, 0x2, 0x2, 0x756, 0x758, 0x5, 0x12c, 0x97, 0x2, 0x757, 
       0x759, 0x5, 0x128, 0x95, 0x2, 0x758, 0x757, 0x3, 0x2, 0x2, 0x2, 0x758, 
       0x759, 0x3, 0x2, 0x2, 0x2, 0x759, 0x760, 0x3, 0x2, 0x2, 0x2, 0x75a, 
       0x75b, 0x7, 0x58, 0x2, 0x2, 0x75b, 0x75d, 0x5, 0x12c, 0x97, 0x2, 
       0x75c, 0x75e, 0x5, 0x126, 0x94, 0x2, 0x75d, 0x75c, 0x3, 0x2, 0x2, 
       0x2, 0x75d, 0x75e, 0x3, 0x2, 0x2, 0x2, 0x75e, 0x760, 0x3, 0x2, 0x2, 
       0x2, 0x75f, 0x755, 0x3, 0x2, 0x2, 0x2, 0x75f, 0x75a, 0x3, 0x2, 0x2, 
       0x2, 0x760, 0x125, 0x3, 0x2, 0x2, 0x2, 0x761, 0x763, 0x5, 0x160, 
       0xb1, 0x2, 0x762, 0x761, 0x3, 0x2, 0x2, 0x2, 0x762, 0x763, 0x3, 0x2, 
       0x2, 0x2, 0x763, 0x765, 0x3, 0x2, 0x2, 0x2, 0x764, 0x766, 0x5, 0x12a, 
       0x96, 0x2, 0x765, 0x764, 0x3, 0x2, 0x2, 0x2, 0x765, 0x766, 0x3, 0x2, 
       0x2, 0x2, 0x766, 0x767, 0x3, 0x2, 0x2, 0x2, 0x767, 0x768, 0x7, 0x33, 
       0x2, 0x2, 0x768, 0x769, 0x5, 0x12c, 0x97, 0x2, 0x769, 0x127, 0x3, 
       0x2, 0x2, 0x2, 0x76a, 0x76c, 0x5, 0x160, 0xb1, 0x2, 0x76b, 0x76a, 
       0x3, 0x2, 0x2, 0x2, 0x76b, 0x76c, 0x3, 0x2, 0x2, 0x2, 0x76c, 0x76e, 
       0x3, 0x2, 0x2, 0x2, 0x76d, 0x76f, 0x5, 0x12a, 0x96, 0x2, 0x76e, 0x76d, 
       0x3, 0x2, 0x2, 0x2, 0x76e, 0x76f, 0x3, 0x2, 0x2, 0x2, 0x76f, 0x770, 
       0x3, 0x2, 0x2, 0x2, 0x770, 0x771, 0x7, 0x58, 0x2, 0x2, 0x771, 0x772, 
       0x5, 0x12c, 0x97, 0x2, 0x772, 0x129, 0x3, 0x2, 0x2, 0x2, 0x773, 0x77b, 
       0x7, 0x4f, 0x2, 0x2, 0x774, 0x77b, 0x7, 0x3b, 0x2, 0x2, 0x775, 0x77b, 
       0x7, 0x4e, 0x2, 0x2, 0x776, 0x777, 0x7, 0x4f, 0x2, 0x2, 0x777, 0x77b, 
       0x7, 0x3b, 0x2, 0x2, 0x778, 0x779, 0x7, 0x3b, 0x2, 0x2, 0x779, 0x77b, 
       0x7, 0x4f, 0x2, 0x2, 0x77a, 0x773, 0x3, 0x2, 0x2, 0x2, 0x77a, 0x774, 
       0x3, 0x2, 0x2, 0x2, 0x77a, 0x775, 0x3, 0x2, 0x2, 0x2, 0x77a, 0x776, 
       0x3, 0x2, 0x2, 0x2, 0x77a, 0x778, 0x3, 0x2, 0x2, 0x2, 0x77b, 0x12b, 
       0x3, 0x2, 0x2, 0x2, 0x77c, 0x77f, 0x5, 0xac, 0x57, 0x2, 0x77d, 0x77f, 
       0x7, 0x88, 0x2, 0x2, 0x77e, 0x77c, 0x3, 0x2, 0x2, 0x2, 0x77e, 0x77d, 
       0x3, 0x2, 0x2, 0x2, 0x77f, 0x12d, 0x3, 0x2, 0x2, 0x2, 0x780, 0x782, 
       0x5, 0x160, 0xb1, 0x2, 0x781, 0x780, 0x3, 0x2, 0x2, 0x2, 0x781, 0x782, 
       0x3, 0x2, 0x2, 0x2, 0x782, 0x78b, 0x3, 0x2, 0x2, 0x2, 0x783, 0x784, 
       0x7, 0xc, 0x2, 0x2, 0x784, 0x785, 0x5, 0xac, 0x57, 0x2, 0x785, 0x786, 
       0x5, 0x132, 0x9a, 0x2, 0x786, 0x78c, 0x3, 0x2, 0x2, 0x2, 0x787, 0x788, 
       0x7, 0x53, 0x2, 0x2, 0x788, 0x789, 0x5, 0xac, 0x57, 0x2, 0x789, 0x78a, 
       0x5, 0x130, 0x99, 0x2, 0x78a, 0x78c, 0x3, 0x2, 0x2, 0x2, 0x78b, 0x783, 
       0x3, 0x2, 0x2, 0x2, 0x78b, 0x787, 0x3, 0x2, 0x2, 0x2, 0x78c, 0x12f, 
       0x3, 0x2, 0x2, 0x2, 0x78d, 0x78f, 0x5, 0x160, 0xb1, 0x2, 0x78e, 0x78d, 
       0x3, 0x2, 0x2, 0x2, 0x78e, 0x78f, 0x3, 0x2, 0x2, 0x2, 0x78f, 0x790, 
       0x3, 0x2, 0x2, 0x2, 0x790, 0x791, 0x7, 0xc, 0x2, 0x2, 0x791, 0x792, 
       0x5, 0xac, 0x57, 0x2, 0x792, 0x131, 0x3, 0x2, 0x2, 0x2, 0x793, 0x795, 
       0x5, 0x160, 0xb1, 0x2, 0x794, 0x793, 0x3, 0x2, 0x2, 0x2, 0x794, 0x795, 
       0x3, 0x2, 0x2, 0x2, 0x795, 0x796, 0x3, 0x2, 0x2, 0x2, 0x796, 0x797, 
       0x7, 0x53, 0x2, 0x2, 0x797, 0x798, 0x5, 0xac, 0x57, 0x2, 0x798, 0x133, 
       0x3, 0x2, 0x2, 0x2, 0x799, 0x7b0, 0x7, 0x89, 0x2, 0x2, 0x79a, 0x7b0, 
       0x7, 0x8a, 0x2, 0x2, 0x79b, 0x7b0, 0x7, 0x91, 0x2, 0x2, 0x79c, 0x7b0, 
       0x7, 0x92, 0x2, 0x2, 0x79d, 0x7b0, 0x7, 0x99, 0x2, 0x2, 0x79e, 0x7b0, 
       0x7, 0x9a, 0x2, 0x2, 0x79f, 0x7b0, 0x7, 0x62, 0x2, 0x2, 0x7a0, 0x7b0, 
       0x7, 0x2c, 0x2, 0x2, 0x7a1, 0x7b0, 0x7, 0x8b, 0x2, 0x2, 0x7a2, 0x7b0, 
       0x7, 0x8c, 0x2, 0x2, 0x7a3, 0x7b0, 0x7, 0x8d, 0x2, 0x2, 0x7a4, 0x7b0, 
       0x7, 0x8e, 0x2, 0x2, 0x7a5, 0x7b0, 0x7, 0x8f, 0x2, 0x2, 0x7a6, 0x7b0, 
       0x7, 0x90, 0x2, 0x2, 0x7a7, 0x7b0, 0x7, 0xaa, 0x2, 0x2, 0x7a8, 0x7b0, 
       0x5, 0x17a, 0xbe, 0x2, 0x7a9, 0x7b0, 0x7, 0x9e, 0x2, 0x2, 0x7aa, 
       0x7b0, 0x7, 0x9f, 0x2, 0x2, 0x7ab, 0x7b0, 0x7, 0x95, 0x2, 0x2, 0x7ac, 
       0x7b0, 0x7, 0x94, 0x2, 0x2, 0x7ad, 0x7b0, 0x7, 0xa1, 0x2, 0x2, 0x7ae, 
       0x7b0, 0x7, 0xa0, 0x2, 0x2, 0x7af, 0x799, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x79a, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x79b, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x79c, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x79d, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x79e, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x79f, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7a0, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x7a1, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7a2, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x7a3, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7a4, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x7a5, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7a6, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x7a7, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7a8, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x7a9, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7aa, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x7ab, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7ac, 0x3, 0x2, 0x2, 0x2, 0x7af, 0x7ad, 0x3, 0x2, 0x2, 0x2, 0x7af, 
       0x7ae, 0x3, 0x2, 0x2, 0x2, 0x7b0, 0x135, 0x3, 0x2, 0x2, 0x2, 0x7b1, 
       0x7b2, 0x9, 0xd, 0x2, 0x2, 0x7b2, 0x7b3, 0x7, 0x48, 0x2, 0x2, 0x7b3, 
       0x7b4, 0x5, 0x6, 0x4, 0x2, 0x7b4, 0x7b5, 0x7, 0x83, 0x2, 0x2, 0x7b5, 
       0x7b6, 0x5, 0x1ae, 0xd8, 0x2, 0x7b6, 0x7b7, 0x7, 0x84, 0x2, 0x2, 
       0x7b7, 0x137, 0x3, 0x2, 0x2, 0x2, 0x7b8, 0x7b9, 0x7, 0x87, 0x2, 0x2, 
       0x7b9, 0x7ba, 0x9, 0xe, 0x2, 0x2, 0x7ba, 0x7bc, 0x7, 0x83, 0x2, 0x2, 
       0x7bb, 0x7bd, 0x5, 0x1a, 0xe, 0x2, 0x7bc, 0x7bb, 0x3, 0x2, 0x2, 0x2, 
       0x7bc, 0x7bd, 0x3, 0x2, 0x2, 0x2, 0x7bd, 0x7be, 0x3, 0x2, 0x2, 0x2, 
       0x7be, 0x7bf, 0x7, 0x84, 0x2, 0x2, 0x7bf, 0x139, 0x3, 0x2, 0x2, 0x2, 
       0x7c0, 0x7c3, 0x5, 0xac, 0x57, 0x2, 0x7c1, 0x7c3, 0x7, 0x88, 0x2, 
       0x2, 0x7c2, 0x7c0, 0x3, 0x2, 0x2, 0x2, 0x7c2, 0x7c1, 0x3, 0x2, 0x2, 
       0x2, 0x7c3, 0x13b, 0x3, 0x2, 0x2, 0x2, 0x7c4, 0x7c5, 0x7, 0x87, 0x2, 
       0x2, 0x7c5, 0x7c6, 0x5, 0xee, 0x78, 0x2, 0x7c6, 0x13d, 0x3, 0x2, 
       0x2, 0x2, 0x7c7, 0x7cb, 0x7, 0x7f, 0x2, 0x2, 0x7c8, 0x7ca, 0x5, 0x140, 
       0xa1, 0x2, 0x7c9, 0x7c8, 0x3, 0x2, 0x2, 0x2, 0x7ca, 0x7cd, 0x3, 0x2, 
       0x2, 0x2, 0x7cb, 0x7c9, 0x3, 0x2, 0x2, 0x2, 0x7cb, 0x7cc, 0x3, 0x2, 
       0x2, 0x2, 0x7cc, 0x7ce, 0x3, 0x2, 0x2, 0x2, 0x7cd, 0x7cb, 0x3, 0x2, 
       0x2, 0x2, 0x7ce, 0x7cf, 0x7, 0x80, 0x2, 0x2, 0x7cf, 0x13f, 0x3, 0x2, 
       0x2, 0x2, 0x7d0, 0x7d2, 0x5, 0x160, 0xb1, 0x2, 0x7d1, 0x7d0, 0x3, 
       0x2, 0x2, 0x2, 0x7d1, 0x7d2, 0x3, 0x2, 0x2, 0x2, 0x7d2, 0x7d4, 0x3, 
       0x2, 0x2, 0x2, 0x7d3, 0x7d5, 0x5, 0x102, 0x82, 0x2, 0x7d4, 0x7d3, 
       0x3, 0x2, 0x2, 0x2, 0x7d4, 0x7d5, 0x3, 0x2, 0x2, 0x2, 0x7d5, 0x7e0, 
       0x3, 0x2, 0x2, 0x2, 0x7d6, 0x7e1, 0x5, 0x106, 0x84, 0x2, 0x7d7, 0x7d8, 
       0x7, 0x2e, 0x2, 0x2, 0x7d8, 0x7da, 0x5, 0x6, 0x4, 0x2, 0x7d9, 0x7db, 
       0x5, 0x174, 0xbb, 0x2, 0x7da, 0x7d9, 0x3, 0x2, 0x2, 0x2, 0x7db, 0x7dc, 
       0x3, 0x2, 0x2, 0x2, 0x7dc, 0x7da, 0x3, 0x2, 0x2, 0x2, 0x7dc, 0x7dd, 
       0x3, 0x2, 0x2, 0x2, 0x7dd, 0x7de, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7df, 
       0x7, 0x88, 0x2, 0x2, 0x7df, 0x7e1, 0x3, 0x2, 0x2, 0x2, 0x7e0, 0x7d6, 
       0x3, 0x2, 0x2, 0x2, 0x7e0, 0x7d7, 0x3, 0x2, 0x2, 0x2, 0x7e1, 0x141, 
       0x3, 0x2, 0x2, 0x2, 0x7e2, 0x7ea, 0x5, 0x8, 0x5, 0x2, 0x7e3, 0x7e5, 
       0x9, 0xf, 0x2, 0x2, 0x7e4, 0x7e3, 0x3, 0x2, 0x2, 0x2, 0x7e5, 0x7e8, 
       0x3, 0x2, 0x2, 0x2, 0x7e6, 0x7e4, 0x3, 0x2, 0x2, 0x2, 0x7e6, 0x7e7, 
       0x3, 0x2, 0x2, 0x2, 0x7e7, 0x7e9, 0x3, 0x2, 0x2, 0x2, 0x7e8, 0x7e6, 
       0x3, 0x2, 0x2, 0x2, 0x7e9, 0x7eb, 0x5, 0x144, 0xa3, 0x2, 0x7ea, 0x7e6, 
       0x3, 0x2, 0x2, 0x2, 0x7eb, 0x7ec, 0x3, 0x2, 0x2, 0x2, 0x7ec, 0x7ea, 
       0x3, 0x2, 0x2, 0x2, 0x7ec, 0x7ed, 0x3, 0x2, 0x2, 0x2, 0x7ed, 0x143, 
       0x3, 0x2, 0x2, 0x2, 0x7ee, 0x7f2, 0x7, 0x81, 0x2, 0x2, 0x7ef, 0x7f1, 
       0x7, 0x86, 0x2, 0x2, 0x7f0, 0x7ef, 0x3, 0x2, 0x2, 0x2, 0x7f1, 0x7f4, 
       0x3, 0x2, 0x2, 0x2, 0x7f2, 0x7f0, 0x3, 0x2, 0x2, 0x2, 0x7f2, 0x7f3, 
       0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7f5, 0x3, 0x2, 0x2, 0x2, 0x7f4, 0x7f2, 
       0x3, 0x2, 0x2, 0x2, 0x7f5, 0x7f6, 0x7, 0x82, 0x2, 0x2, 0x7f6, 0x145, 
       0x3, 0x2, 0x2, 0x2, 0x7f7, 0x803, 0x7, 0x7f, 0x2, 0x2, 0x7f8, 0x7fd, 
       0x5, 0x112, 0x8a, 0x2, 0x7f9, 0x7fa, 0x7, 0x86, 0x2, 0x2, 0x7fa, 
       0x7fc, 0x5, 0x112, 0x8a, 0x2, 0x7fb, 0x7f9, 0x3, 0x2, 0x2, 0x2, 0x7fc, 
       0x7ff, 0x3, 0x2, 0x2, 0x2, 0x7fd, 0x7fb, 0x3, 0x2, 0x2, 0x2, 0x7fd, 
       0x7fe, 0x3, 0x2, 0x2, 0x2, 0x7fe, 0x801, 0x3, 0x2, 0x2, 0x2, 0x7ff, 
       0x7fd, 0x3, 0x2, 0x2, 0x2, 0x800, 0x802, 0x7, 0x86, 0x2, 0x2, 0x801, 
       0x800, 0x3, 0x2, 0x2, 0x2, 0x801, 0x802, 0x3, 0x2, 0x2, 0x2, 0x802, 
       0x804, 0x3, 0x2, 0x2, 0x2, 0x803, 0x7f8, 0x3, 0x2, 0x2, 0x2, 0x803, 
       0x804, 0x3, 0x2, 0x2, 0x2, 0x804, 0x805, 0x3, 0x2, 0x2, 0x2, 0x805, 
       0x806, 0x7, 0x80, 0x2, 0x2, 0x806, 0x147, 0x3, 0x2, 0x2, 0x2, 0x807, 
       0x808, 0x7, 0x94, 0x2, 0x2, 0x808, 0x80d, 0x5, 0x14a, 0xa6, 0x2, 
       0x809, 0x80a, 0x7, 0x86, 0x2, 0x2, 0x80a, 0x80c, 0x5, 0x14a, 0xa6, 
       0x2, 0x80b, 0x809, 0x3, 0x2, 0x2, 0x2, 0x80c, 0x80f, 0x3, 0x2, 0x2, 
       0x2, 0x80d, 0x80b, 0x3, 0x2, 0x2, 0x2, 0x80d, 0x80e, 0x3, 0x2, 0x2, 
       0x2, 0x80e, 0x810, 0x3, 0x2, 0x2, 0x2, 0x80f, 0x80d, 0x3, 0x2, 0x2, 
       0x2, 0x810, 0x811, 0x7, 0x95, 0x2, 0x2, 0x811, 0x149, 0x3, 0x2, 0x2, 
       0x2, 0x812, 0x814, 0x5, 0x160, 0xb1, 0x2, 0x813, 0x812, 0x3, 0x2, 
       0x2, 0x2, 0x813, 0x814, 0x3, 0x2, 0x2, 0x2, 0x814, 0x816, 0x3, 0x2, 
       0x2, 0x2, 0x815, 0x817, 0x5, 0x14c, 0xa7, 0x2, 0x816, 0x815, 0x3, 
       0x2, 0x2, 0x2, 0x816, 0x817, 0x3, 0x2, 0x2, 0x2, 0x817, 0x818, 0x3, 
       0x2, 0x2, 0x2, 0x818, 0x819, 0x5, 0x1b4, 0xdb, 0x2, 0x819, 0x14b, 
       0x3, 0x2, 0x2, 0x2, 0x81a, 0x81b, 0x9, 0x10, 0x2, 0x2, 0x81b, 0x14d, 
       0x3, 0x2, 0x2, 0x2, 0x81c, 0x81d, 0x7, 0x87, 0x2, 0x2, 0x81d, 0x81e, 
       0x5, 0xee, 0x78, 0x2, 0x81e, 0x14f, 0x3, 0x2, 0x2, 0x2, 0x81f, 0x823, 
       0x7, 0x7f, 0x2, 0x2, 0x820, 0x822, 0x5, 0x152, 0xaa, 0x2, 0x821, 
       0x820, 0x3, 0x2, 0x2, 0x2, 0x822, 0x825, 0x3, 0x2, 0x2, 0x2, 0x823, 
       0x821, 0x3, 0x2, 0x2, 0x2, 0x823, 0x824, 0x3, 0x2, 0x2, 0x2, 0x824, 
       0x826, 0x3, 0x2, 0x2, 0x2, 0x825, 0x823, 0x3, 0x2, 0x2, 0x2, 0x826, 
       0x827, 0x7, 0x80, 0x2, 0x2, 0x827, 0x151, 0x3, 0x2, 0x2, 0x2, 0x828, 
       0x82a, 0x5, 0x160, 0xb1, 0x2, 0x829, 0x828, 0x3, 0x2, 0x2, 0x2, 0x829, 
       0x82a, 0x3, 0x2, 0x2, 0x2, 0x82a, 0x82c, 0x3, 0x2, 0x2, 0x2, 0x82b, 
       0x82d, 0x7, 0x44, 0x2, 0x2, 0x82c, 0x82b, 0x3, 0x2, 0x2, 0x2, 0x82c, 
       0x82d, 0x3, 0x2, 0x2, 0x2, 0x82d, 0x86d, 0x3, 0x2, 0x2, 0x2, 0x82e, 
       0x830, 0x7, 0x69, 0x2, 0x2, 0x82f, 0x82e, 0x3, 0x2, 0x2, 0x2, 0x82f, 
       0x830, 0x3, 0x2, 0x2, 0x2, 0x830, 0x836, 0x3, 0x2, 0x2, 0x2, 0x831, 
       0x837, 0x7, 0x52, 0x2, 0x2, 0x832, 0x833, 0x7, 0x52, 0x2, 0x2, 0x833, 
       0x837, 0x7, 0x51, 0x2, 0x2, 0x834, 0x835, 0x7, 0x51, 0x2, 0x2, 0x835, 
       0x837, 0x7, 0x52, 0x2, 0x2, 0x836, 0x831, 0x3, 0x2, 0x2, 0x2, 0x836, 
       0x832, 0x3, 0x2, 0x2, 0x2, 0x836, 0x834, 0x3, 0x2, 0x2, 0x2, 0x836, 
       0x837, 0x3, 0x2, 0x2, 0x2, 0x837, 0x838, 0x3, 0x2, 0x2, 0x2, 0x838, 
       0x854, 0x5, 0x6, 0x4, 0x2, 0x839, 0x83b, 0x5, 0x1b4, 0xdb, 0x2, 0x83a, 
       0x83c, 0x5, 0xe8, 0x75, 0x2, 0x83b, 0x83a, 0x3, 0x2, 0x2, 0x2, 0x83b, 
       0x83c, 0x3, 0x2, 0x2, 0x2, 0x83c, 0x83d, 0x3, 0x2, 0x2, 0x2, 0x83d, 
       0x83f, 0x7, 0x83, 0x2, 0x2, 0x83e, 0x840, 0x5, 0x11a, 0x8e, 0x2, 
       0x83f, 0x83e, 0x3, 0x2, 0x2, 0x2, 0x83f, 0x840, 0x3, 0x2, 0x2, 0x2, 
       0x840, 0x841, 0x3, 0x2, 0x2, 0x2, 0x841, 0x843, 0x7, 0x84, 0x2, 0x2, 
       0x842, 0x844, 0x5, 0xf0, 0x79, 0x2, 0x843, 0x842, 0x3, 0x2, 0x2, 
       0x2, 0x843, 0x844, 0x3, 0x2, 0x2, 0x2, 0x844, 0x845, 0x3, 0x2, 0x2, 
       0x2, 0x845, 0x846, 0x7, 0x88, 0x2, 0x2, 0x846, 0x855, 0x3, 0x2, 0x2, 
       0x2, 0x847, 0x848, 0x5, 0x1b4, 0xdb, 0x2, 0x848, 0x849, 0x7, 0x7f, 
       0x2, 0x2, 0x849, 0x84a, 0x5, 0x154, 0xab, 0x2, 0x84a, 0x84b, 0x7, 
       0x80, 0x2, 0x2, 0x84b, 0x855, 0x3, 0x2, 0x2, 0x2, 0x84c, 0x84d, 0x7, 
       0x60, 0x2, 0x2, 0x84d, 0x84e, 0x7, 0x81, 0x2, 0x2, 0x84e, 0x84f, 
       0x5, 0x11a, 0x8e, 0x2, 0x84f, 0x850, 0x7, 0x82, 0x2, 0x2, 0x850, 
       0x851, 0x7, 0x7f, 0x2, 0x2, 0x851, 0x852, 0x5, 0x154, 0xab, 0x2, 
       0x852, 0x853, 0x7, 0x80, 0x2, 0x2, 0x853, 0x855, 0x3, 0x2, 0x2, 0x2, 
       0x854, 0x839, 0x3, 0x2, 0x2, 0x2, 0x854, 0x847, 0x3, 0x2, 0x2, 0x2, 
       0x854, 0x84c, 0x3, 0x2, 0x2, 0x2, 0x855, 0x86e, 0x3, 0x2, 0x2, 0x2, 
       0x856, 0x858, 0x7, 0x69, 0x2, 0x2, 0x857, 0x856, 0x3, 0x2, 0x2, 0x2, 
       0x857, 0x858, 0x3, 0x2, 0x2, 0x2, 0x858, 0x859, 0x3, 0x2, 0x2, 0x2, 
       0x859, 0x85a, 0x7, 0x6e, 0x2, 0x2, 0x85a, 0x85c, 0x5, 0x1b4, 0xdb, 
       0x2, 0x85b, 0x85d, 0x5, 0xe8, 0x75, 0x2, 0x85c, 0x85b, 0x3, 0x2, 
       0x2, 0x2, 0x85c, 0x85d, 0x3, 0x2, 0x2, 0x2, 0x85d, 0x85e, 0x3, 0x2, 
       0x2, 0x2, 0x85e, 0x860, 0x7, 0x83, 0x2, 0x2, 0x85f, 0x861, 0x5, 0x11a, 
       0x8e, 0x2, 0x860, 0x85f, 0x3, 0x2, 0x2, 0x2, 0x860, 0x861, 0x3, 0x2, 
       0x2, 0x2, 0x861, 0x862, 0x3, 0x2, 0x2, 0x2, 0x862, 0x864, 0x7, 0x84, 
       0x2, 0x2, 0x863, 0x865, 0x5, 0xf0, 0x79, 0x2, 0x864, 0x863, 0x3, 
       0x2, 0x2, 0x2, 0x864, 0x865, 0x3, 0x2, 0x2, 0x2, 0x865, 0x866, 0x3, 
       0x2, 0x2, 0x2, 0x866, 0x867, 0x7, 0x88, 0x2, 0x2, 0x867, 0x86e, 0x3, 
       0x2, 0x2, 0x2, 0x868, 0x869, 0x7, 0x29, 0x2, 0x2, 0x869, 0x86a, 0x5, 
       0x6, 0x4, 0x2, 0x86a, 0x86b, 0x5, 0x1b4, 0xdb, 0x2, 0x86b, 0x86c, 
       0x7, 0x88, 0x2, 0x2, 0x86c, 0x86e, 0x3, 0x2, 0x2, 0x2, 0x86d, 0x82f, 
       0x3, 0x2, 0x2, 0x2, 0x86d, 0x857, 0x3, 0x2, 0x2, 0x2, 0x86d, 0x868, 
       0x3, 0x2, 0x2, 0x2, 0x86e, 0x153, 0x3, 0x2, 0x2, 0x2, 0x86f, 0x871, 
       0x5, 0x160, 0xb1, 0x2, 0x870, 0x86f, 0x3, 0x2, 0x2, 0x2, 0x870, 0x871, 
       0x3, 0x2, 0x2, 0x2, 0x871, 0x884, 0x3, 0x2, 0x2, 0x2, 0x872, 0x873, 
       0x7, 0x33, 0x2, 0x2, 0x873, 0x879, 0x7, 0x88, 0x2, 0x2, 0x874, 0x876, 
       0x5, 0x160, 0xb1, 0x2, 0x875, 0x874, 0x3, 0x2, 0x2, 0x2, 0x875, 0x876, 
       0x3, 0x2, 0x2, 0x2, 0x876, 0x877, 0x3, 0x2, 0x2, 0x2, 0x877, 0x878, 
       0x7, 0x58, 0x2, 0x2, 0x878, 0x87a, 0x7, 0x88, 0x2, 0x2, 0x879, 0x875, 
       0x3, 0x2, 0x2, 0x2, 0x879, 0x87a, 0x3, 0x2, 0x2, 0x2, 0x87a, 0x885, 
       0x3, 0x2, 0x2, 0x2, 0x87b, 0x87c, 0x7, 0x58, 0x2, 0x2, 0x87c, 0x882, 
       0x7, 0x88, 0x2, 0x2, 0x87d, 0x87f, 0x5, 0x160, 0xb1, 0x2, 0x87e, 
       0x87d, 0x3, 0x2, 0x2, 0x2, 0x87e, 0x87f, 0x3, 0x2, 0x2, 0x2, 0x87f, 
       0x880, 0x3, 0x2, 0x2, 0x2, 0x880, 0x881, 0x7, 0x33, 0x2, 0x2, 0x881, 
       0x883, 0x7, 0x88, 0x2, 0x2, 0x882, 0x87e, 0x3, 0x2, 0x2, 0x2, 0x882, 
       0x883, 0x3, 0x2, 0x2, 0x2, 0x883, 0x885, 0x3, 0x2, 0x2, 0x2, 0x884, 
       0x872, 0x3, 0x2, 0x2, 0x2, 0x884, 0x87b, 0x3, 0x2, 0x2, 0x2, 0x885, 
       0x155, 0x3, 0x2, 0x2, 0x2, 0x886, 0x887, 0x7, 0x87, 0x2, 0x2, 0x887, 
       0x888, 0x5, 0x6, 0x4, 0x2, 0x888, 0x157, 0x3, 0x2, 0x2, 0x2, 0x889, 
       0x895, 0x7, 0x7f, 0x2, 0x2, 0x88a, 0x88f, 0x5, 0x15a, 0xae, 0x2, 
       0x88b, 0x88c, 0x7, 0x86, 0x2, 0x2, 0x88c, 0x88e, 0x5, 0x15a, 0xae, 
       0x2, 0x88d, 0x88b, 0x3, 0x2, 0x2, 0x2, 0x88e, 0x891, 0x3, 0x2, 0x2, 
       0x2, 0x88f, 0x88d, 0x3, 0x2, 0x2, 0x2, 0x88f, 0x890, 0x3, 0x2, 0x2, 
       0x2, 0x890, 0x893, 0x3, 0x2, 0x2, 0x2, 0x891, 0x88f, 0x3, 0x2, 0x2, 
       0x2, 0x892, 0x894, 0x7, 0x86, 0x2, 0x2, 0x893, 0x892, 0x3, 0x2, 0x2, 
       0x2, 0x893, 0x894, 0x3, 0x2, 0x2, 0x2, 0x894, 0x896, 0x3, 0x2, 0x2, 
       0x2, 0x895, 0x88a, 0x3, 0x2, 0x2, 0x2, 0x895, 0x896, 0x3, 0x2, 0x2, 
       0x2, 0x896, 0x897, 0x3, 0x2, 0x2, 0x2, 0x897, 0x898, 0x7, 0x80, 0x2, 
       0x2, 0x898, 0x159, 0x3, 0x2, 0x2, 0x2, 0x899, 0x89b, 0x5, 0x160, 
       0xb1, 0x2, 0x89a, 0x899, 0x3, 0x2, 0x2, 0x2, 0x89a, 0x89b, 0x3, 0x2, 
       0x2, 0x2, 0x89b, 0x89c, 0x3, 0x2, 0x2, 0x2, 0x89c, 0x89f, 0x5, 0x1b4, 
       0xdb, 0x2, 0x89d, 0x89e, 0x7, 0x93, 0x2, 0x2, 0x89e, 0x8a0, 0x5, 
       0x1e, 0x10, 0x2, 0x89f, 0x89d, 0x3, 0x2, 0x2, 0x2, 0x89f, 0x8a0, 
       0x3, 0x2, 0x2, 0x2, 0x8a0, 0x15b, 0x3, 0x2, 0x2, 0x2, 0x8a1, 0x8a2, 
       0x7, 0x81, 0x2, 0x2, 0x8a2, 0x8a3, 0x5, 0x15e, 0xb0, 0x2, 0x8a3, 
       0x8a4, 0x7, 0x87, 0x2, 0x2, 0x8a4, 0x8a6, 0x5, 0x166, 0xb4, 0x2, 
       0x8a5, 0x8a7, 0x7, 0x86, 0x2, 0x2, 0x8a6, 0x8a5, 0x3, 0x2, 0x2, 0x2, 
       0x8a6, 0x8a7, 0x3, 0x2, 0x2, 0x2, 0x8a7, 0x8a8, 0x3, 0x2, 0x2, 0x2, 
       0x8a8, 0x8a9, 0x7, 0x82, 0x2, 0x2, 0x8a9, 0x15d, 0x3, 0x2, 0x2, 0x2, 
       0x8aa, 0x8ad, 0x5, 0x18e, 0xc8, 0x2, 0x8ab, 0x8ad, 0x5, 0x1b4, 0xdb, 
       0x2, 0x8ac, 0x8aa, 0x3, 0x2, 0x2, 0x2, 0x8ac, 0x8ab, 0x3, 0x2, 0x2, 
       0x2, 0x8ad, 0x15f, 0x3, 0x2, 0x2, 0x2, 0x8ae, 0x8b0, 0x5, 0x162, 
       0xb2, 0x2, 0x8af, 0x8ae, 0x3, 0x2, 0x2, 0x2, 0x8b0, 0x8b1, 0x3, 0x2, 
       0x2, 0x2, 0x8b1, 0x8af, 0x3, 0x2, 0x2, 0x2, 0x8b1, 0x8b2, 0x3, 0x2, 
       0x2, 0x2, 0x8b2, 0x161, 0x3, 0x2, 0x2, 0x2, 0x8b3, 0x8b7, 0x7, 0x81, 
       0x2, 0x2, 0x8b4, 0x8b5, 0x5, 0x164, 0xb3, 0x2, 0x8b5, 0x8b6, 0x7, 
       0x87, 0x2, 0x2, 0x8b6, 0x8b8, 0x3, 0x2, 0x2, 0x2, 0x8b7, 0x8b4, 0x3, 
       0x2, 0x2, 0x2, 0x8b7, 0x8b8, 0x3, 0x2, 0x2, 0x2, 0x8b8, 0x8b9, 0x3, 
       0x2, 0x2, 0x2, 0x8b9, 0x8bb, 0x5, 0x166, 0xb4, 0x2, 0x8ba, 0x8bc, 
       0x7, 0x86, 0x2, 0x2, 0x8bb, 0x8ba, 0x3, 0x2, 0x2, 0x2, 0x8bb, 0x8bc, 
       0x3, 0x2, 0x2, 0x2, 0x8bc, 0x8bd, 0x3, 0x2, 0x2, 0x2, 0x8bd, 0x8be, 
       0x7, 0x82, 0x2, 0x2, 0x8be, 0x163, 0x3, 0x2, 0x2, 0x2, 0x8bf, 0x8c2, 
       0x5, 0x18e, 0xc8, 0x2, 0x8c0, 0x8c2, 0x5, 0x1b4, 0xdb, 0x2, 0x8c1, 
       0x8bf, 0x3, 0x2, 0x2, 0x2, 0x8c1, 0x8c0, 0x3, 0x2, 0x2, 0x2, 0x8c2, 
       0x165, 0x3, 0x2, 0x2, 0x2, 0x8c3, 0x8c8, 0x5, 0x168, 0xb5, 0x2, 0x8c4, 
       0x8c5, 0x7, 0x86, 0x2, 0x2, 0x8c5, 0x8c7, 0x5, 0x168, 0xb5, 0x2, 
       0x8c6, 0x8c4, 0x3, 0x2, 0x2, 0x2, 0x8c7, 0x8ca, 0x3, 0x2, 0x2, 0x2, 
       0x8c8, 0x8c6, 0x3, 0x2, 0x2, 0x2, 0x8c8, 0x8c9, 0x3, 0x2, 0x2, 0x2, 
       0x8c9, 0x167, 0x3, 0x2, 0x2, 0x2, 0x8ca, 0x8c8, 0x3, 0x2, 0x2, 0x2, 
       0x8cb, 0x8d8, 0x5, 0x4, 0x3, 0x2, 0x8cc, 0x8d5, 0x7, 0x83, 0x2, 0x2, 
       0x8cd, 0x8d2, 0x5, 0x16a, 0xb6, 0x2, 0x8ce, 0x8cf, 0x7, 0x86, 0x2, 
       0x2, 0x8cf, 0x8d1, 0x5, 0x16a, 0xb6, 0x2, 0x8d0, 0x8ce, 0x3, 0x2, 
       0x2, 0x2, 0x8d1, 0x8d4, 0x3, 0x2, 0x2, 0x2, 0x8d2, 0x8d0, 0x3, 0x2, 
       0x2, 0x2, 0x8d2, 0x8d3, 0x3, 0x2, 0x2, 0x2, 0x8d3, 0x8d6, 0x3, 0x2, 
       0x2, 0x2, 0x8d4, 0x8d2, 0x3, 0x2, 0x2, 0x2, 0x8d5, 0x8cd, 0x3, 0x2, 
       0x2, 0x2, 0x8d5, 0x8d6, 0x3, 0x2, 0x2, 0x2, 0x8d6, 0x8d7, 0x3, 0x2, 
       0x2, 0x2, 0x8d7, 0x8d9, 0x7, 0x84, 0x2, 0x2, 0x8d8, 0x8cc, 0x3, 0x2, 
       0x2, 0x2, 0x8d8, 0x8d9, 0x3, 0x2, 0x2, 0x2, 0x8d9, 0x169, 0x3, 0x2, 
       0x2, 0x2, 0x8da, 0x8db, 0x5, 0x1b4, 0xdb, 0x2, 0x8db, 0x8dc, 0x7, 
       0x87, 0x2, 0x2, 0x8dc, 0x8de, 0x3, 0x2, 0x2, 0x2, 0x8dd, 0x8da, 0x3, 
       0x2, 0x2, 0x2, 0x8dd, 0x8de, 0x3, 0x2, 0x2, 0x2, 0x8de, 0x8df, 0x3, 
       0x2, 0x2, 0x2, 0x8df, 0x8e0, 0x5, 0x1e, 0x10, 0x2, 0x8e0, 0x16b, 
       0x3, 0x2, 0x2, 0x2, 0x8e1, 0x8e4, 0x5, 0xe, 0x8, 0x2, 0x8e2, 0x8e4, 
       0x5, 0x16, 0xc, 0x2, 0x8e3, 0x8e1, 0x3, 0x2, 0x2, 0x2, 0x8e3, 0x8e2, 
       0x3, 0x2, 0x2, 0x2, 0x8e4, 0x8e9, 0x3, 0x2, 0x2, 0x2, 0x8e5, 0x8e8, 
       0x5, 0x144, 0xa3, 0x2, 0x8e6, 0x8e8, 0x7, 0x96, 0x2, 0x2, 0x8e7, 
       0x8e5, 0x3, 0x2, 0x2, 0x2, 0x8e7, 0x8e6, 0x3, 0x2, 0x2, 0x2, 0x8e8, 
       0x8eb, 0x3, 0x2, 0x2, 0x2, 0x8e9, 0x8e7, 0x3, 0x2, 0x2, 0x2, 0x8e9, 
       0x8ea, 0x3, 0x2, 0x2, 0x2, 0x8ea, 0x8ec, 0x3, 0x2, 0x2, 0x2, 0x8eb, 
       0x8e9, 0x3, 0x2, 0x2, 0x2, 0x8ec, 0x8ed, 0x7, 0x8b, 0x2, 0x2, 0x8ed, 
       0x8f1, 0x3, 0x2, 0x2, 0x2, 0x8ee, 0x8ef, 0x7, 0x6e, 0x2, 0x2, 0x8ef, 
       0x8f1, 0x7, 0x8b, 0x2, 0x2, 0x8f0, 0x8e3, 0x3, 0x2, 0x2, 0x2, 0x8f0, 
       0x8ee, 0x3, 0x2, 0x2, 0x2, 0x8f1, 0x16d, 0x3, 0x2, 0x2, 0x2, 0x8f2, 
       0x8f7, 0x5, 0x170, 0xb9, 0x2, 0x8f3, 0x8f4, 0x7, 0x86, 0x2, 0x2, 
       0x8f4, 0x8f6, 0x5, 0x170, 0xb9, 0x2, 0x8f5, 0x8f3, 0x3, 0x2, 0x2, 
       0x2, 0x8f6, 0x8f9, 0x3, 0x2, 0x2, 0x2, 0x8f7, 0x8f5, 0x3, 0x2, 0x2, 
       0x2, 0x8f7, 0x8f8, 0x3, 0x2, 0x2, 0x2, 0x8f8, 0x16f, 0x3, 0x2, 0x2, 
       0x2, 0x8f9, 0x8f7, 0x3, 0x2, 0x2, 0x2, 0x8fa, 0x8fb, 0x5, 0x1b4, 
       0xdb, 0x2, 0x8fb, 0x8fc, 0x7, 0x93, 0x2, 0x2, 0x8fc, 0x8fd, 0x5, 
       0x172, 0xba, 0x2, 0x8fd, 0x171, 0x3, 0x2, 0x2, 0x2, 0x8fe, 0x900, 
       0x7, 0x8e, 0x2, 0x2, 0x8ff, 0x8fe, 0x3, 0x2, 0x2, 0x2, 0x8ff, 0x900, 
       0x3, 0x2, 0x2, 0x2, 0x900, 0x901, 0x3, 0x2, 0x2, 0x2, 0x901, 0x904, 
       0x5, 0x1e, 0x10, 0x2, 0x902, 0x904, 0x5, 0x176, 0xbc, 0x2, 0x903, 
       0x8ff, 0x3, 0x2, 0x2, 0x2, 0x903, 0x902, 0x3, 0x2, 0x2, 0x2, 0x904, 
       0x173, 0x3, 0x2, 0x2, 0x2, 0x905, 0x906, 0x5, 0x1b4, 0xdb, 0x2, 0x906, 
       0x907, 0x7, 0x81, 0x2, 0x2, 0x907, 0x908, 0x5, 0x1e, 0x10, 0x2, 0x908, 
       0x909, 0x7, 0x82, 0x2, 0x2, 0x909, 0x175, 0x3, 0x2, 0x2, 0x2, 0x90a, 
       0x90b, 0x7, 0x5b, 0x2, 0x2, 0x90b, 0x90c, 0x5, 0x6, 0x4, 0x2, 0x90c, 
       0x90d, 0x7, 0x81, 0x2, 0x2, 0x90d, 0x90e, 0x5, 0x1e, 0x10, 0x2, 0x90e, 
       0x90f, 0x7, 0x82, 0x2, 0x2, 0x90f, 0x928, 0x3, 0x2, 0x2, 0x2, 0x910, 
       0x912, 0x7, 0x5b, 0x2, 0x2, 0x911, 0x913, 0x5, 0x6, 0x4, 0x2, 0x912, 
       0x911, 0x3, 0x2, 0x2, 0x2, 0x912, 0x913, 0x3, 0x2, 0x2, 0x2, 0x913, 
       0x914, 0x3, 0x2, 0x2, 0x2, 0x914, 0x916, 0x7, 0x81, 0x2, 0x2, 0x915, 
       0x917, 0x5, 0x1e, 0x10, 0x2, 0x916, 0x915, 0x3, 0x2, 0x2, 0x2, 0x916, 
       0x917, 0x3, 0x2, 0x2, 0x2, 0x917, 0x918, 0x3, 0x2, 0x2, 0x2, 0x918, 
       0x919, 0x7, 0x82, 0x2, 0x2, 0x919, 0x91a, 0x7, 0x7f, 0x2, 0x2, 0x91a, 
       0x91f, 0x5, 0x1e, 0x10, 0x2, 0x91b, 0x91c, 0x7, 0x86, 0x2, 0x2, 0x91c, 
       0x91e, 0x5, 0x1e, 0x10, 0x2, 0x91d, 0x91b, 0x3, 0x2, 0x2, 0x2, 0x91e, 
       0x921, 0x3, 0x2, 0x2, 0x2, 0x91f, 0x91d, 0x3, 0x2, 0x2, 0x2, 0x91f, 
       0x920, 0x3, 0x2, 0x2, 0x2, 0x920, 0x923, 0x3, 0x2, 0x2, 0x2, 0x921, 
       0x91f, 0x3, 0x2, 0x2, 0x2, 0x922, 0x924, 0x7, 0x86, 0x2, 0x2, 0x923, 
       0x922, 0x3, 0x2, 0x2, 0x2, 0x923, 0x924, 0x3, 0x2, 0x2, 0x2, 0x924, 
       0x925, 0x3, 0x2, 0x2, 0x2, 0x925, 0x926, 0x7, 0x80, 0x2, 0x2, 0x926, 
       0x928, 0x3, 0x2, 0x2, 0x2, 0x927, 0x90a, 0x3, 0x2, 0x2, 0x2, 0x927, 
       0x910, 0x3, 0x2, 0x2, 0x2, 0x928, 0x177, 0x3, 0x2, 0x2, 0x2, 0x929, 
       0x92a, 0x7, 0x93, 0x2, 0x2, 0x92a, 0x92b, 0x7, 0x95, 0x2, 0x2, 0x92b, 
       0x92c, 0x6, 0xbd, 0x2, 0x3, 0x92c, 0x179, 0x3, 0x2, 0x2, 0x2, 0x92d, 
       0x92e, 0x7, 0x95, 0x2, 0x2, 0x92e, 0x92f, 0x7, 0x95, 0x2, 0x2, 0x92f, 
       0x930, 0x6, 0xbe, 0x3, 0x3, 0x930, 0x17b, 0x3, 0x2, 0x2, 0x2, 0x931, 
       0x932, 0x7, 0x95, 0x2, 0x2, 0x932, 0x933, 0x7, 0xa1, 0x2, 0x2, 0x933, 
       0x934, 0x6, 0xbf, 0x4, 0x3, 0x934, 0x17d, 0x3, 0x2, 0x2, 0x2, 0x935, 
       0x93e, 0x5, 0x180, 0xc1, 0x2, 0x936, 0x93e, 0x5, 0x182, 0xc2, 0x2, 
       0x937, 0x93e, 0x7, 0x76, 0x2, 0x2, 0x938, 0x93e, 0x7, 0x77, 0x2, 
       0x2, 0x939, 0x93e, 0x7, 0x78, 0x2, 0x2, 0x93a, 0x93e, 0x7, 0x79, 
       0x2, 0x2, 0x93b, 0x93e, 0x7, 0x7a, 0x2, 0x2, 0x93c, 0x93e, 0x7, 0x45, 
       0x2, 0x2, 0x93d, 0x935, 0x3, 0x2, 0x2, 0x2, 0x93d, 0x936, 0x3, 0x2, 
       0x2, 0x2, 0x93d, 0x937, 0x3, 0x2, 0x2, 0x2, 0x93d, 0x938, 0x3, 0x2, 
       0x2, 0x2, 0x93d, 0x939, 0x3, 0x2, 0x2, 0x2, 0x93d, 0x93a, 0x3, 0x2, 
       0x2, 0x2, 0x93d, 0x93b, 0x3, 0x2, 0x2, 0x2, 0x93d, 0x93c, 0x3, 0x2, 
       0x2, 0x2, 0x93e, 0x17f, 0x3, 0x2, 0x2, 0x2, 0x93f, 0x940, 0x9, 0x11, 
       0x2, 0x2, 0x940, 0x181, 0x3, 0x2, 0x2, 0x2, 0x941, 0x946, 0x5, 0x184, 
       0xc3, 0x2, 0x942, 0x946, 0x5, 0x186, 0xc4, 0x2, 0x943, 0x946, 0x7, 
       0x7b, 0x2, 0x2, 0x944, 0x946, 0x7, 0x7c, 0x2, 0x2, 0x945, 0x941, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x942, 0x3, 0x2, 0x2, 0x2, 0x945, 0x943, 
       0x3, 0x2, 0x2, 0x2, 0x945, 0x944, 0x3, 0x2, 0x2, 0x2, 0x946, 0x183, 
       0x3, 0x2, 0x2, 0x2, 0x947, 0x94b, 0x7, 0x7d, 0x2, 0x2, 0x948, 0x94a, 
       0x5, 0x188, 0xc5, 0x2, 0x949, 0x948, 0x3, 0x2, 0x2, 0x2, 0x94a, 0x94d, 
       0x3, 0x2, 0x2, 0x2, 0x94b, 0x949, 0x3, 0x2, 0x2, 0x2, 0x94b, 0x94c, 
       0x3, 0x2, 0x2, 0x2, 0x94c, 0x94e, 0x3, 0x2, 0x2, 0x2, 0x94d, 0x94b, 
       0x3, 0x2, 0x2, 0x2, 0x94e, 0x94f, 0x7, 0xb2, 0x2, 0x2, 0x94f, 0x185, 
       0x3, 0x2, 0x2, 0x2, 0x950, 0x954, 0x7, 0x7e, 0x2, 0x2, 0x951, 0x953, 
       0x5, 0x18a, 0xc6, 0x2, 0x952, 0x951, 0x3, 0x2, 0x2, 0x2, 0x953, 0x956, 
       0x3, 0x2, 0x2, 0x2, 0x954, 0x952, 0x3, 0x2, 0x2, 0x2, 0x954, 0x955, 
       0x3, 0x2, 0x2, 0x2, 0x955, 0x957, 0x3, 0x2, 0x2, 0x2, 0x956, 0x954, 
       0x3, 0x2, 0x2, 0x2, 
  };
  static const uint16_t serializedATNSegment1[] = {
    0x957, 0x958, 0x7, 0xb2, 0x2, 0x2, 0x958, 0x187, 0x3, 0x2, 0x2, 0x2, 
       0x959, 0x95e, 0x5, 0x18c, 0xc7, 0x2, 0x95a, 0x95e, 0x7, 0xae, 0x2, 
       0x2, 0x95b, 0x95e, 0x7, 0xb0, 0x2, 0x2, 0x95c, 0x95e, 0x7, 0xb3, 
       0x2, 0x2, 0x95d, 0x959, 0x3, 0x2, 0x2, 0x2, 0x95d, 0x95a, 0x3, 0x2, 
       0x2, 0x2, 0x95d, 0x95b, 0x3, 0x2, 0x2, 0x2, 0x95d, 0x95c, 0x3, 0x2, 
       0x2, 0x2, 0x95e, 0x189, 0x3, 0x2, 0x2, 0x2, 0x95f, 0x964, 0x5, 0x18c, 
       0xc7, 0x2, 0x960, 0x964, 0x7, 0xae, 0x2, 0x2, 0x961, 0x964, 0x7, 
       0xb1, 0x2, 0x2, 0x962, 0x964, 0x7, 0xb4, 0x2, 0x2, 0x963, 0x95f, 
       0x3, 0x2, 0x2, 0x2, 0x963, 0x960, 0x3, 0x2, 0x2, 0x2, 0x963, 0x961, 
       0x3, 0x2, 0x2, 0x2, 0x963, 0x962, 0x3, 0x2, 0x2, 0x2, 0x964, 0x18b, 
       0x3, 0x2, 0x2, 0x2, 0x965, 0x96a, 0x5, 0x1e, 0x10, 0x2, 0x966, 0x967, 
       0x7, 0x86, 0x2, 0x2, 0x967, 0x969, 0x5, 0x1e, 0x10, 0x2, 0x968, 0x966, 
       0x3, 0x2, 0x2, 0x2, 0x969, 0x96c, 0x3, 0x2, 0x2, 0x2, 0x96a, 0x968, 
       0x3, 0x2, 0x2, 0x2, 0x96a, 0x96b, 0x3, 0x2, 0x2, 0x2, 0x96b, 0x973, 
       0x3, 0x2, 0x2, 0x2, 0x96c, 0x96a, 0x3, 0x2, 0x2, 0x2, 0x96d, 0x96f, 
       0x7, 0x87, 0x2, 0x2, 0x96e, 0x970, 0x7, 0xb6, 0x2, 0x2, 0x96f, 0x96e, 
       0x3, 0x2, 0x2, 0x2, 0x970, 0x971, 0x3, 0x2, 0x2, 0x2, 0x971, 0x96f, 
       0x3, 0x2, 0x2, 0x2, 0x971, 0x972, 0x3, 0x2, 0x2, 0x2, 0x972, 0x974, 
       0x3, 0x2, 0x2, 0x2, 0x973, 0x96d, 0x3, 0x2, 0x2, 0x2, 0x973, 0x974, 
       0x3, 0x2, 0x2, 0x2, 0x974, 0x18d, 0x3, 0x2, 0x2, 0x2, 0x975, 0x976, 
       0x9, 0x12, 0x2, 0x2, 0x976, 0x18f, 0x3, 0x2, 0x2, 0x2, 0x977, 0x978, 
       0x7, 0x1c, 0x2, 0x2, 0x978, 0x97a, 0x5, 0x1b4, 0xdb, 0x2, 0x979, 
       0x97b, 0x5, 0xe8, 0x75, 0x2, 0x97a, 0x979, 0x3, 0x2, 0x2, 0x2, 0x97a, 
       0x97b, 0x3, 0x2, 0x2, 0x2, 0x97b, 0x97d, 0x3, 0x2, 0x2, 0x2, 0x97c, 
       0x97e, 0x5, 0xec, 0x77, 0x2, 0x97d, 0x97c, 0x3, 0x2, 0x2, 0x2, 0x97d, 
       0x97e, 0x3, 0x2, 0x2, 0x2, 0x97e, 0x980, 0x3, 0x2, 0x2, 0x2, 0x97f, 
       0x981, 0x5, 0xf0, 0x79, 0x2, 0x980, 0x97f, 0x3, 0x2, 0x2, 0x2, 0x980, 
       0x981, 0x3, 0x2, 0x2, 0x2, 0x981, 0x982, 0x3, 0x2, 0x2, 0x2, 0x982, 
       0x984, 0x5, 0xfc, 0x7f, 0x2, 0x983, 0x985, 0x7, 0x88, 0x2, 0x2, 0x984, 
       0x983, 0x3, 0x2, 0x2, 0x2, 0x984, 0x985, 0x3, 0x2, 0x2, 0x2, 0x985, 
       0x191, 0x3, 0x2, 0x2, 0x2, 0x986, 0x988, 0x9, 0x13, 0x2, 0x2, 0x987, 
       0x986, 0x3, 0x2, 0x2, 0x2, 0x987, 0x988, 0x3, 0x2, 0x2, 0x2, 0x988, 
       0x989, 0x3, 0x2, 0x2, 0x2, 0x989, 0x98a, 0x7, 0x5e, 0x2, 0x2, 0x98a, 
       0x98c, 0x5, 0x1b4, 0xdb, 0x2, 0x98b, 0x98d, 0x5, 0xe8, 0x75, 0x2, 
       0x98c, 0x98b, 0x3, 0x2, 0x2, 0x2, 0x98c, 0x98d, 0x3, 0x2, 0x2, 0x2, 
       0x98d, 0x98f, 0x3, 0x2, 0x2, 0x2, 0x98e, 0x990, 0x5, 0x13c, 0x9f, 
       0x2, 0x98f, 0x98e, 0x3, 0x2, 0x2, 0x2, 0x98f, 0x990, 0x3, 0x2, 0x2, 
       0x2, 0x990, 0x992, 0x3, 0x2, 0x2, 0x2, 0x991, 0x993, 0x5, 0xf0, 0x79, 
       0x2, 0x992, 0x991, 0x3, 0x2, 0x2, 0x2, 0x992, 0x993, 0x3, 0x2, 0x2, 
       0x2, 0x993, 0x994, 0x3, 0x2, 0x2, 0x2, 0x994, 0x996, 0x5, 0x13e, 
       0xa0, 0x2, 0x995, 0x997, 0x7, 0x88, 0x2, 0x2, 0x996, 0x995, 0x3, 
       0x2, 0x2, 0x2, 0x996, 0x997, 0x3, 0x2, 0x2, 0x2, 0x997, 0x193, 0x3, 
       0x2, 0x2, 0x2, 0x998, 0x999, 0x7, 0x3a, 0x2, 0x2, 0x999, 0x99b, 0x5, 
       0x1b4, 0xdb, 0x2, 0x99a, 0x99c, 0x5, 0x148, 0xa5, 0x2, 0x99b, 0x99a, 
       0x3, 0x2, 0x2, 0x2, 0x99b, 0x99c, 0x3, 0x2, 0x2, 0x2, 0x99c, 0x99e, 
       0x3, 0x2, 0x2, 0x2, 0x99d, 0x99f, 0x5, 0x14e, 0xa8, 0x2, 0x99e, 0x99d, 
       0x3, 0x2, 0x2, 0x2, 0x99e, 0x99f, 0x3, 0x2, 0x2, 0x2, 0x99f, 0x9a1, 
       0x3, 0x2, 0x2, 0x2, 0x9a0, 0x9a2, 0x5, 0xf0, 0x79, 0x2, 0x9a1, 0x9a0, 
       0x3, 0x2, 0x2, 0x2, 0x9a1, 0x9a2, 0x3, 0x2, 0x2, 0x2, 0x9a2, 0x9a3, 
       0x3, 0x2, 0x2, 0x2, 0x9a3, 0x9a5, 0x5, 0xfc, 0x7f, 0x2, 0x9a4, 0x9a6, 
       0x7, 0x88, 0x2, 0x2, 0x9a5, 0x9a4, 0x3, 0x2, 0x2, 0x2, 0x9a5, 0x9a6, 
       0x3, 0x2, 0x2, 0x2, 0x9a6, 0x195, 0x3, 0x2, 0x2, 0x2, 0x9a7, 0x9a8, 
       0x7, 0x27, 0x2, 0x2, 0x9a8, 0x9aa, 0x5, 0x1b4, 0xdb, 0x2, 0x9a9, 
       0x9ab, 0x5, 0x156, 0xac, 0x2, 0x9aa, 0x9a9, 0x3, 0x2, 0x2, 0x2, 0x9aa, 
       0x9ab, 0x3, 0x2, 0x2, 0x2, 0x9ab, 0x9ac, 0x3, 0x2, 0x2, 0x2, 0x9ac, 
       0x9ae, 0x5, 0x158, 0xad, 0x2, 0x9ad, 0x9af, 0x7, 0x88, 0x2, 0x2, 
       0x9ae, 0x9ad, 0x3, 0x2, 0x2, 0x2, 0x9ae, 0x9af, 0x3, 0x2, 0x2, 0x2, 
       0x9af, 0x197, 0x3, 0x2, 0x2, 0x2, 0x9b0, 0x9b1, 0x7, 0x21, 0x2, 0x2, 
       0x9b1, 0x9b2, 0x5, 0x114, 0x8b, 0x2, 0x9b2, 0x9b4, 0x5, 0x1b4, 0xdb, 
       0x2, 0x9b3, 0x9b5, 0x5, 0x148, 0xa5, 0x2, 0x9b4, 0x9b3, 0x3, 0x2, 
       0x2, 0x2, 0x9b4, 0x9b5, 0x3, 0x2, 0x2, 0x2, 0x9b5, 0x9b6, 0x3, 0x2, 
       0x2, 0x2, 0x9b6, 0x9b8, 0x7, 0x83, 0x2, 0x2, 0x9b7, 0x9b9, 0x5, 0x11a, 
       0x8e, 0x2, 0x9b8, 0x9b7, 0x3, 0x2, 0x2, 0x2, 0x9b8, 0x9b9, 0x3, 0x2, 
       0x2, 0x2, 0x9b9, 0x9ba, 0x3, 0x2, 0x2, 0x2, 0x9ba, 0x9bc, 0x7, 0x84, 
       0x2, 0x2, 0x9bb, 0x9bd, 0x5, 0xf0, 0x79, 0x2, 0x9bc, 0x9bb, 0x3, 
       0x2, 0x2, 0x2, 0x9bc, 0x9bd, 0x3, 0x2, 0x2, 0x2, 0x9bd, 0x9be, 0x3, 
       0x2, 0x2, 0x2, 0x9be, 0x9bf, 0x7, 0x88, 0x2, 0x2, 0x9bf, 0x199, 0x3, 
       0x2, 0x2, 0x2, 0x9c0, 0x9c1, 0x7, 0x29, 0x2, 0x2, 0x9c1, 0x9ca, 0x5, 
       0x6, 0x4, 0x2, 0x9c2, 0x9c3, 0x5, 0x10e, 0x88, 0x2, 0x9c3, 0x9c4, 
       0x7, 0x88, 0x2, 0x2, 0x9c4, 0x9cb, 0x3, 0x2, 0x2, 0x2, 0x9c5, 0x9c6, 
       0x5, 0x116, 0x8c, 0x2, 0x9c6, 0x9c7, 0x7, 0x7f, 0x2, 0x2, 0x9c7, 
       0x9c8, 0x5, 0x12e, 0x98, 0x2, 0x9c8, 0x9c9, 0x7, 0x80, 0x2, 0x2, 
       0x9c9, 0x9cb, 0x3, 0x2, 0x2, 0x2, 0x9ca, 0x9c2, 0x3, 0x2, 0x2, 0x2, 
       0x9ca, 0x9c5, 0x3, 0x2, 0x2, 0x2, 0x9cb, 0x19b, 0x3, 0x2, 0x2, 0x2, 
       0x9cc, 0x9cd, 0x5, 0x10e, 0x88, 0x2, 0x9cd, 0x9ce, 0x7, 0x88, 0x2, 
       0x2, 0x9ce, 0x19d, 0x3, 0x2, 0x2, 0x2, 0x9cf, 0x9dd, 0x5, 0x116, 
       0x8c, 0x2, 0x9d0, 0x9d1, 0x7, 0x7f, 0x2, 0x2, 0x9d1, 0x9d2, 0x5, 
       0x124, 0x93, 0x2, 0x9d2, 0x9d7, 0x7, 0x80, 0x2, 0x2, 0x9d3, 0x9d4, 
       0x7, 0x93, 0x2, 0x2, 0x9d4, 0x9d5, 0x5, 0x112, 0x8a, 0x2, 0x9d5, 
       0x9d6, 0x7, 0x88, 0x2, 0x2, 0x9d6, 0x9d8, 0x3, 0x2, 0x2, 0x2, 0x9d7, 
       0x9d3, 0x3, 0x2, 0x2, 0x2, 0x9d7, 0x9d8, 0x3, 0x2, 0x2, 0x2, 0x9d8, 
       0x9de, 0x3, 0x2, 0x2, 0x2, 0x9d9, 0x9da, 0x5, 0x178, 0xbd, 0x2, 0x9da, 
       0x9db, 0x5, 0x4c, 0x27, 0x2, 0x9db, 0x9dc, 0x7, 0x88, 0x2, 0x2, 0x9dc, 
       0x9de, 0x3, 0x2, 0x2, 0x2, 0x9dd, 0x9d0, 0x3, 0x2, 0x2, 0x2, 0x9dd, 
       0x9d9, 0x3, 0x2, 0x2, 0x2, 0x9de, 0x19f, 0x3, 0x2, 0x2, 0x2, 0x9df, 
       0x9e0, 0x7, 0x1d, 0x2, 0x2, 0x9e0, 0x9e1, 0x5, 0x6, 0x4, 0x2, 0x9e1, 
       0x9e2, 0x5, 0x10a, 0x86, 0x2, 0x9e2, 0x9e3, 0x7, 0x88, 0x2, 0x2, 
       0x9e3, 0x1a1, 0x3, 0x2, 0x2, 0x2, 0x9e4, 0x9e5, 0x7, 0x60, 0x2, 0x2, 
       0x9e5, 0x9e6, 0x7, 0x81, 0x2, 0x2, 0x9e6, 0x9e7, 0x5, 0x11a, 0x8e, 
       0x2, 0x9e7, 0x9f0, 0x7, 0x82, 0x2, 0x2, 0x9e8, 0x9e9, 0x7, 0x7f, 
       0x2, 0x2, 0x9e9, 0x9ea, 0x5, 0x124, 0x93, 0x2, 0x9ea, 0x9eb, 0x7, 
       0x80, 0x2, 0x2, 0x9eb, 0x9f1, 0x3, 0x2, 0x2, 0x2, 0x9ec, 0x9ed, 0x5, 
       0x178, 0xbd, 0x2, 0x9ed, 0x9ee, 0x5, 0x4c, 0x27, 0x2, 0x9ee, 0x9ef, 
       0x7, 0x88, 0x2, 0x2, 0x9ef, 0x9f1, 0x3, 0x2, 0x2, 0x2, 0x9f0, 0x9e8, 
       0x3, 0x2, 0x2, 0x2, 0x9f0, 0x9ec, 0x3, 0x2, 0x2, 0x2, 0x9f1, 0x1a3, 
       0x3, 0x2, 0x2, 0x2, 0x9f2, 0x9f3, 0x7, 0x92, 0x2, 0x2, 0x9f3, 0x9f4, 
       0x5, 0x1b4, 0xdb, 0x2, 0x9f4, 0x9f5, 0x7, 0x83, 0x2, 0x2, 0x9f5, 
       0x9f6, 0x7, 0x84, 0x2, 0x2, 0x9f6, 0x9f7, 0x5, 0x13a, 0x9e, 0x2, 
       0x9f7, 0x1a5, 0x3, 0x2, 0x2, 0x2, 0x9f8, 0x9f9, 0x5, 0x1b4, 0xdb, 
       0x2, 0x9f9, 0x9fb, 0x7, 0x83, 0x2, 0x2, 0x9fa, 0x9fc, 0x5, 0x11a, 
       0x8e, 0x2, 0x9fb, 0x9fa, 0x3, 0x2, 0x2, 0x2, 0x9fb, 0x9fc, 0x3, 0x2, 
       0x2, 0x2, 0x9fc, 0x9fd, 0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9ff, 0x7, 0x84, 
       0x2, 0x2, 0x9fe, 0xa00, 0x5, 0x138, 0x9d, 0x2, 0x9ff, 0x9fe, 0x3, 
       0x2, 0x2, 0x2, 0x9ff, 0xa00, 0x3, 0x2, 0x2, 0x2, 0xa00, 0xa01, 0x3, 
       0x2, 0x2, 0x2, 0xa01, 0xa02, 0x5, 0x13a, 0x9e, 0x2, 0xa02, 0x1a7, 
       0x3, 0x2, 0x2, 0x2, 0xa03, 0xa05, 0x5, 0x1aa, 0xd6, 0x2, 0xa04, 0xa06, 
       0x5, 0xe8, 0x75, 0x2, 0xa05, 0xa04, 0x3, 0x2, 0x2, 0x2, 0xa05, 0xa06, 
       0x3, 0x2, 0x2, 0x2, 0xa06, 0xa07, 0x3, 0x2, 0x2, 0x2, 0xa07, 0xa09, 
       0x7, 0x83, 0x2, 0x2, 0xa08, 0xa0a, 0x5, 0x11a, 0x8e, 0x2, 0xa09, 
       0xa08, 0x3, 0x2, 0x2, 0x2, 0xa09, 0xa0a, 0x3, 0x2, 0x2, 0x2, 0xa0a, 
       0xa0b, 0x3, 0x2, 0x2, 0x2, 0xa0b, 0xa0d, 0x7, 0x84, 0x2, 0x2, 0xa0c, 
       0xa0e, 0x5, 0xf0, 0x79, 0x2, 0xa0d, 0xa0c, 0x3, 0x2, 0x2, 0x2, 0xa0d, 
       0xa0e, 0x3, 0x2, 0x2, 0x2, 0xa0e, 0xa14, 0x3, 0x2, 0x2, 0x2, 0xa0f, 
       0xa15, 0x5, 0x118, 0x8d, 0x2, 0xa10, 0xa11, 0x5, 0x178, 0xbd, 0x2, 
       0xa11, 0xa12, 0x5, 0x4c, 0x27, 0x2, 0xa12, 0xa13, 0x7, 0x88, 0x2, 
       0x2, 0xa13, 0xa15, 0x3, 0x2, 0x2, 0x2, 0xa14, 0xa0f, 0x3, 0x2, 0x2, 
       0x2, 0xa14, 0xa10, 0x3, 0x2, 0x2, 0x2, 0xa15, 0x1a9, 0x3, 0x2, 0x2, 
       0x2, 0xa16, 0xa1c, 0x5, 0x1b4, 0xdb, 0x2, 0xa17, 0xa18, 0x5, 0x1b4, 
       0xdb, 0x2, 0xa18, 0xa19, 0x7, 0x97, 0x2, 0x2, 0xa19, 0xa1a, 0x5, 
       0x1b4, 0xdb, 0x2, 0xa1a, 0xa1c, 0x3, 0x2, 0x2, 0x2, 0xa1b, 0xa16, 
       0x3, 0x2, 0x2, 0x2, 0xa1b, 0xa17, 0x3, 0x2, 0x2, 0x2, 0xa1c, 0xa24, 
       0x3, 0x2, 0x2, 0x2, 0xa1d, 0xa1f, 0x5, 0x18, 0xd, 0x2, 0xa1e, 0xa1d, 
       0x3, 0x2, 0x2, 0x2, 0xa1e, 0xa1f, 0x3, 0x2, 0x2, 0x2, 0xa1f, 0xa20, 
       0x3, 0x2, 0x2, 0x2, 0xa20, 0xa21, 0x7, 0x85, 0x2, 0x2, 0xa21, 0xa23, 
       0x5, 0x1b4, 0xdb, 0x2, 0xa22, 0xa1e, 0x3, 0x2, 0x2, 0x2, 0xa23, 0xa26, 
       0x3, 0x2, 0x2, 0x2, 0xa24, 0xa22, 0x3, 0x2, 0x2, 0x2, 0xa24, 0xa25, 
       0x3, 0x2, 0x2, 0x2, 0xa25, 0x1ab, 0x3, 0x2, 0x2, 0x2, 0xa26, 0xa24, 
       0x3, 0x2, 0x2, 0x2, 0xa27, 0xa28, 0x7, 0x48, 0x2, 0x2, 0xa28, 0xa29, 
       0x5, 0x134, 0x9b, 0x2, 0xa29, 0xa2b, 0x7, 0x83, 0x2, 0x2, 0xa2a, 
       0xa2c, 0x7, 0x38, 0x2, 0x2, 0xa2b, 0xa2a, 0x3, 0x2, 0x2, 0x2, 0xa2b, 
       0xa2c, 0x3, 0x2, 0x2, 0x2, 0xa2c, 0xa2d, 0x3, 0x2, 0x2, 0x2, 0xa2d, 
       0xa33, 0x5, 0x1ae, 0xd8, 0x2, 0xa2e, 0xa30, 0x7, 0x86, 0x2, 0x2, 
       0xa2f, 0xa31, 0x7, 0x38, 0x2, 0x2, 0xa30, 0xa2f, 0x3, 0x2, 0x2, 0x2, 
       0xa30, 0xa31, 0x3, 0x2, 0x2, 0x2, 0xa31, 0xa32, 0x3, 0x2, 0x2, 0x2, 
       0xa32, 0xa34, 0x5, 0x1ae, 0xd8, 0x2, 0xa33, 0xa2e, 0x3, 0x2, 0x2, 
       0x2, 0xa33, 0xa34, 0x3, 0x2, 0x2, 0x2, 0xa34, 0xa35, 0x3, 0x2, 0x2, 
       0x2, 0xa35, 0xa3b, 0x7, 0x84, 0x2, 0x2, 0xa36, 0xa3c, 0x5, 0x13a, 
       0x9e, 0x2, 0xa37, 0xa38, 0x5, 0x178, 0xbd, 0x2, 0xa38, 0xa39, 0x5, 
       0x4c, 0x27, 0x2, 0xa39, 0xa3a, 0x7, 0x88, 0x2, 0x2, 0xa3a, 0xa3c, 
       0x3, 0x2, 0x2, 0x2, 0xa3b, 0xa36, 0x3, 0x2, 0x2, 0x2, 0xa3b, 0xa37, 
       0x3, 0x2, 0x2, 0x2, 0xa3c, 0x1ad, 0x3, 0x2, 0x2, 0x2, 0xa3d, 0xa3e, 
       0x5, 0x6, 0x4, 0x2, 0xa3e, 0xa41, 0x5, 0x1b4, 0xdb, 0x2, 0xa3f, 0xa40, 
       0x7, 0x93, 0x2, 0x2, 0xa40, 0xa42, 0x5, 0x1e, 0x10, 0x2, 0xa41, 0xa3f, 
       0x3, 0x2, 0x2, 0x2, 0xa41, 0xa42, 0x3, 0x2, 0x2, 0x2, 0xa42, 0x1af, 
       0x3, 0x2, 0x2, 0x2, 0xa43, 0xa45, 0x7, 0x83, 0x2, 0x2, 0xa44, 0xa46, 
       0x5, 0x1a, 0xe, 0x2, 0xa45, 0xa44, 0x3, 0x2, 0x2, 0x2, 0xa45, 0xa46, 
       0x3, 0x2, 0x2, 0x2, 0xa46, 0xa47, 0x3, 0x2, 0x2, 0x2, 0xa47, 0xa48, 
       0x7, 0x84, 0x2, 0x2, 0xa48, 0x1b1, 0x3, 0x2, 0x2, 0x2, 0xa49, 0xa4b, 
       0x7, 0x83, 0x2, 0x2, 0xa4a, 0xa4c, 0x5, 0x1a, 0xe, 0x2, 0xa4b, 0xa4a, 
       0x3, 0x2, 0x2, 0x2, 0xa4b, 0xa4c, 0x3, 0x2, 0x2, 0x2, 0xa4c, 0xa4d, 
       0x3, 0x2, 0x2, 0x2, 0xa4d, 0xa4f, 0x7, 0x84, 0x2, 0x2, 0xa4e, 0xa50, 
       0x5, 0x5a, 0x2e, 0x2, 0xa4f, 0xa4e, 0x3, 0x2, 0x2, 0x2, 0xa4f, 0xa50, 
       0x3, 0x2, 0x2, 0x2, 0xa50, 0x1b3, 0x3, 0x2, 0x2, 0x2, 0xa51, 0xa52, 
       0x9, 0x14, 0x2, 0x2, 0xa52, 0x1b5, 0x3, 0x2, 0x2, 0x2, 0x15a, 0x1b7, 
       0x1ba, 0x1bd, 0x1c2, 0x1c6, 0x1cc, 0x1cf, 0x1d4, 0x1d8, 0x1df, 0x1e1, 
       0x1e9, 0x1f1, 0x1f7, 0x1fb, 0x200, 0x20a, 0x212, 0x21c, 0x222, 0x225, 
       0x229, 0x231, 0x236, 0x240, 0x24d, 0x255, 0x25b, 0x25d, 0x264, 0x26c, 
       0x274, 0x27c, 0x284, 0x28c, 0x296, 0x298, 0x29e, 0x2a3, 0x2ab, 0x2b3, 
       0x2bb, 0x2bd, 0x2c0, 0x2c7, 0x2cc, 0x2d3, 0x2d7, 0x2d9, 0x2f5, 0x2f9, 
       0x2fe, 0x302, 0x30a, 0x30d, 0x312, 0x316, 0x31a, 0x320, 0x32e, 0x334, 
       0x340, 0x344, 0x349, 0x34d, 0x353, 0x35b, 0x364, 0x376, 0x379, 0x37e, 
       0x381, 0x390, 0x396, 0x39a, 0x3a0, 0x3a5, 0x3a8, 0x3b0, 0x3b8, 0x3c3, 
       0x3c8, 0x3cd, 0x3cf, 0x3d8, 0x3e0, 0x3e7, 0x3ef, 0x3f3, 0x3fc, 0x401, 
       0x403, 0x40c, 0x414, 0x418, 0x41d, 0x41f, 0x424, 0x428, 0x42f, 0x437, 
       0x439, 0x43d, 0x440, 0x443, 0x44b, 0x455, 0x466, 0x46d, 0x471, 0x47b, 
       0x480, 0x487, 0x490, 0x495, 0x49c, 0x4a8, 0x4b3, 0x4bb, 0x4c0, 0x4c9, 
       0x4d2, 0x4db, 0x4e1, 0x4e6, 0x4ea, 0x4ee, 0x4f2, 0x4f6, 0x4fd, 0x505, 
       0x512, 0x51c, 0x532, 0x536, 0x53a, 0x53f, 0x553, 0x558, 0x55d, 0x564, 
       0x567, 0x57d, 0x589, 0x58d, 0x595, 0x59d, 0x5a4, 0x5a8, 0x5ad, 0x5b0, 
       0x5b5, 0x5bd, 0x5c2, 0x5c9, 0x5cf, 0x5d7, 0x5df, 0x5e2, 0x5e9, 0x5f0, 
       0x5f4, 0x5f7, 0x5fd, 0x601, 0x607, 0x615, 0x61b, 0x622, 0x627, 0x62a, 
       0x62d, 0x634, 0x63e, 0x64f, 0x654, 0x658, 0x65b, 0x65e, 0x665, 0x66b, 
       0x673, 0x679, 0x683, 0x68b, 0x691, 0x69c, 0x6a0, 0x6a2, 0x6a7, 0x6ab, 
       0x6b2, 0x6bb, 0x6c2, 0x6c5, 0x6c8, 0x6cc, 0x6d1, 0x6de, 0x6e8, 0x6ef, 
       0x6fb, 0x702, 0x70e, 0x714, 0x718, 0x71c, 0x722, 0x728, 0x72a, 0x731, 
       0x735, 0x738, 0x73c, 0x746, 0x749, 0x750, 0x753, 0x758, 0x75d, 0x75f, 
       0x762, 0x765, 0x76b, 0x76e, 0x77a, 0x77e, 0x781, 0x78b, 0x78e, 0x794, 
       0x7af, 0x7bc, 0x7c2, 0x7cb, 0x7d1, 0x7d4, 0x7dc, 0x7e0, 0x7e6, 0x7ec, 
       0x7f2, 0x7fd, 0x801, 0x803, 0x80d, 0x813, 0x816, 0x823, 0x829, 0x82c, 
       0x82f, 0x836, 0x83b, 0x83f, 0x843, 0x854, 0x857, 0x85c, 0x860, 0x864, 
       0x86d, 0x870, 0x875, 0x879, 0x87e, 0x882, 0x884, 0x88f, 0x893, 0x895, 
       0x89a, 0x89f, 0x8a6, 0x8ac, 0x8b1, 0x8b7, 0x8bb, 0x8c1, 0x8c8, 0x8d2, 
       0x8d5, 0x8d8, 0x8dd, 0x8e3, 0x8e7, 0x8e9, 0x8f0, 0x8f7, 0x8ff, 0x903, 
       0x912, 0x916, 0x91f, 0x923, 0x927, 0x93d, 0x945, 0x94b, 0x954, 0x95d, 
       0x963, 0x96a, 0x971, 0x973, 0x97a, 0x97d, 0x980, 0x984, 0x987, 0x98c, 
       0x98f, 0x992, 0x996, 0x99b, 0x99e, 0x9a1, 0x9a5, 0x9aa, 0x9ae, 0x9b4, 
       0x9b8, 0x9bc, 0x9ca, 0x9d7, 0x9dd, 0x9f0, 0x9fb, 0x9ff, 0xa05, 0xa09, 
       0xa0d, 0xa14, 0xa1b, 0xa1e, 0xa24, 0xa2b, 0xa30, 0xa33, 0xa3b, 0xa41, 
       0xa45, 0xa4b, 0xa4f, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

CSharpParser::Initializer CSharpParser::_init;
